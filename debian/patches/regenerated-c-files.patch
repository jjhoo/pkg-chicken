Files modified after applying fix-incorrect-bignum-allocation-sizes.patch
and running command 'make PLATFORM=linux distfiles'

--- chicken-5.1.0.orig/c-platform.c
+++ chicken-5.1.0/c-platform.c
@@ -1,6 +1,6 @@
 /* Generated from c-platform.scm by the CHICKEN compiler
    http://www.call-cc.org
-   Version 5.1.0rc1 (prerelease) (rev 7358d2e5)
+   Version 5.1.0 (rev 8e62f718)
    linux-unix-gnu-x86-64 [ 64bit dload ptables ]
    command line: c-platform.scm -optimize-level 2 -include-path . -include-path ./ -inline -ignore-repository -feature chicken-bootstrap -no-warnings -specialize -consult-types-file ./types.db -no-lambda-info -no-trace -emit-import-library chicken.compiler.c-platform -output-file c-platform.c
    unit: c-platform
@@ -28,154 +28,152 @@ static C_TLS C_word lf[944];
 static double C_possibly_force_alignment;
 
 
-C_noret_decl(f_1664)
-static void C_ccall f_1664(C_word c,C_word *av) C_noret;
-C_noret_decl(f_1667)
-static void C_ccall f_1667(C_word c,C_word *av) C_noret;
-C_noret_decl(f_1670)
-static void C_ccall f_1670(C_word c,C_word *av) C_noret;
-C_noret_decl(f_1673)
-static void C_ccall f_1673(C_word c,C_word *av) C_noret;
-C_noret_decl(f_1676)
-static void C_ccall f_1676(C_word c,C_word *av) C_noret;
-C_noret_decl(f_1679)
-static void C_ccall f_1679(C_word c,C_word *av) C_noret;
-C_noret_decl(f_1682)
-static void C_ccall f_1682(C_word c,C_word *av) C_noret;
-C_noret_decl(f_2117)
-static void C_fcall f_2117(C_word t0,C_word t1,C_word t2) C_noret;
-C_noret_decl(f_2123)
-static void C_fcall f_2123(C_word t0,C_word t1,C_word t2,C_word t3) C_noret;
-C_noret_decl(f_2137)
-static void C_ccall f_2137(C_word c,C_word *av) C_noret;
-C_noret_decl(f_2293)
-static void C_fcall f_2293(C_word t0,C_word t1,C_word t2) C_noret;
-C_noret_decl(f_2302)
-static void C_fcall f_2302(C_word t0,C_word t1,C_word t2) C_noret;
-C_noret_decl(f_2310)
-static void C_fcall f_2310(C_word t0,C_word t1,C_word t2,C_word t3) C_noret;
-C_noret_decl(f_2317)
-static void C_ccall f_2317(C_word c,C_word *av) C_noret;
-C_noret_decl(f_2331)
-static void C_ccall f_2331(C_word c,C_word *av) C_noret;
-C_noret_decl(f_2459)
-static C_word C_fcall f_2459(C_word t0);
-C_noret_decl(f_2701)
-static void C_fcall f_2701(C_word t0,C_word t1,C_word t2) C_noret;
-C_noret_decl(f_2715)
-static void C_ccall f_2715(C_word c,C_word *av) C_noret;
-C_noret_decl(f_2719)
-static void C_ccall f_2719(C_word c,C_word *av) C_noret;
-C_noret_decl(f_2963)
-static void C_ccall f_2963(C_word c,C_word *av) C_noret;
-C_noret_decl(f_2970)
-static void C_ccall f_2970(C_word c,C_word *av) C_noret;
+C_noret_decl(f_1666)
+static void C_ccall f_1666(C_word c,C_word *av) C_noret;
+C_noret_decl(f_1669)
+static void C_ccall f_1669(C_word c,C_word *av) C_noret;
+C_noret_decl(f_1672)
+static void C_ccall f_1672(C_word c,C_word *av) C_noret;
+C_noret_decl(f_1675)
+static void C_ccall f_1675(C_word c,C_word *av) C_noret;
+C_noret_decl(f_1678)
+static void C_ccall f_1678(C_word c,C_word *av) C_noret;
+C_noret_decl(f_1681)
+static void C_ccall f_1681(C_word c,C_word *av) C_noret;
+C_noret_decl(f_1684)
+static void C_ccall f_1684(C_word c,C_word *av) C_noret;
+C_noret_decl(f_2119)
+static void C_fcall f_2119(C_word t0,C_word t1,C_word t2) C_noret;
+C_noret_decl(f_2125)
+static void C_fcall f_2125(C_word t0,C_word t1,C_word t2,C_word t3) C_noret;
+C_noret_decl(f_2139)
+static void C_ccall f_2139(C_word c,C_word *av) C_noret;
+C_noret_decl(f_2295)
+static void C_fcall f_2295(C_word t0,C_word t1,C_word t2) C_noret;
+C_noret_decl(f_2304)
+static void C_fcall f_2304(C_word t0,C_word t1,C_word t2) C_noret;
+C_noret_decl(f_2312)
+static void C_fcall f_2312(C_word t0,C_word t1,C_word t2,C_word t3) C_noret;
+C_noret_decl(f_2319)
+static void C_ccall f_2319(C_word c,C_word *av) C_noret;
+C_noret_decl(f_2333)
+static void C_ccall f_2333(C_word c,C_word *av) C_noret;
+C_noret_decl(f_2461)
+static C_word C_fcall f_2461(C_word t0);
+C_noret_decl(f_2703)
+static void C_fcall f_2703(C_word t0,C_word t1,C_word t2) C_noret;
+C_noret_decl(f_2717)
+static void C_ccall f_2717(C_word c,C_word *av) C_noret;
+C_noret_decl(f_2721)
+static void C_ccall f_2721(C_word c,C_word *av) C_noret;
+C_noret_decl(f_2965)
+static void C_ccall f_2965(C_word c,C_word *av) C_noret;
 C_noret_decl(f_2973)
 static void C_ccall f_2973(C_word c,C_word *av) C_noret;
 C_noret_decl(f_2976)
 static void C_ccall f_2976(C_word c,C_word *av) C_noret;
-C_noret_decl(f_2991)
-static void C_ccall f_2991(C_word c,C_word *av) C_noret;
-C_noret_decl(f_2998)
-static void C_ccall f_2998(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3007)
-static void C_ccall f_3007(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3009)
-static void C_fcall f_3009(C_word t0,C_word t1,C_word t2,C_word t3) C_noret;
-C_noret_decl(f_3011)
-static void C_ccall f_3011(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3033)
-static void C_ccall f_3033(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3066)
-static void C_ccall f_3066(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3074)
-static void C_ccall f_3074(C_word c,C_word *av) C_noret;
+C_noret_decl(f_2979)
+static void C_ccall f_2979(C_word c,C_word *av) C_noret;
+C_noret_decl(f_2994)
+static void C_ccall f_2994(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3001)
+static void C_ccall f_3001(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3010)
+static void C_ccall f_3010(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3012)
+static void C_fcall f_3012(C_word t0,C_word t1,C_word t2,C_word t3) C_noret;
+C_noret_decl(f_3014)
+static void C_ccall f_3014(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3036)
+static void C_ccall f_3036(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3069)
+static void C_ccall f_3069(C_word c,C_word *av) C_noret;
 C_noret_decl(f_3077)
 static void C_ccall f_3077(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3079)
-static void C_ccall f_3079(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3095)
-static void C_ccall f_3095(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3104)
-static void C_fcall f_3104(C_word t0,C_word t1) C_noret;
+C_noret_decl(f_3080)
+static void C_ccall f_3080(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3082)
+static void C_ccall f_3082(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3098)
+static void C_ccall f_3098(C_word c,C_word *av) C_noret;
 C_noret_decl(f_3107)
 static void C_fcall f_3107(C_word t0,C_word t1) C_noret;
-C_noret_decl(f_3122)
-static void C_ccall f_3122(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3134)
-static void C_ccall f_3134(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3148)
-static void C_ccall f_3148(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3152)
-static void C_ccall f_3152(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3161)
-static void C_ccall f_3161(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3175)
-static void C_ccall f_3175(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3179)
-static void C_ccall f_3179(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3209)
-static void C_ccall f_3209(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3213)
-static void C_ccall f_3213(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3217)
-static void C_ccall f_3217(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3221)
-static void C_ccall f_3221(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3225)
-static void C_ccall f_3225(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3233)
-static void C_ccall f_3233(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3110)
+static void C_fcall f_3110(C_word t0,C_word t1) C_noret;
+C_noret_decl(f_3125)
+static void C_ccall f_3125(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3137)
+static void C_ccall f_3137(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3151)
+static void C_ccall f_3151(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3155)
+static void C_ccall f_3155(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3164)
+static void C_ccall f_3164(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3178)
+static void C_ccall f_3178(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3182)
+static void C_ccall f_3182(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3212)
+static void C_ccall f_3212(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3216)
+static void C_ccall f_3216(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3220)
+static void C_ccall f_3220(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3224)
+static void C_ccall f_3224(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3228)
+static void C_ccall f_3228(C_word c,C_word *av) C_noret;
 C_noret_decl(f_3236)
 static void C_ccall f_3236(C_word c,C_word *av) C_noret;
 C_noret_decl(f_3239)
 static void C_ccall f_3239(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3241)
-static void C_ccall f_3241(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3269)
-static void C_ccall f_3269(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3277)
-static void C_ccall f_3277(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3294)
-static void C_ccall f_3294(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3296)
-static void C_fcall f_3296(C_word t0,C_word t1,C_word t2) C_noret;
-C_noret_decl(f_3321)
-static void C_ccall f_3321(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3332)
-static void C_ccall f_3332(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3336)
-static void C_ccall f_3336(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3242)
+static void C_ccall f_3242(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3244)
+static void C_ccall f_3244(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3272)
+static void C_ccall f_3272(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3280)
+static void C_ccall f_3280(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3297)
+static void C_ccall f_3297(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3299)
+static void C_fcall f_3299(C_word t0,C_word t1,C_word t2) C_noret;
+C_noret_decl(f_3324)
+static void C_ccall f_3324(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3335)
+static void C_ccall f_3335(C_word c,C_word *av) C_noret;
 C_noret_decl(f_3339)
 static void C_ccall f_3339(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3353)
-static void C_ccall f_3353(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3357)
-static void C_ccall f_3357(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3380)
-static void C_ccall f_3380(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3395)
-static void C_ccall f_3395(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3403)
-static void C_ccall f_3403(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3412)
-static void C_ccall f_3412(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3416)
-static void C_ccall f_3416(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3342)
+static void C_ccall f_3342(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3356)
+static void C_ccall f_3356(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3360)
+static void C_ccall f_3360(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3383)
+static void C_ccall f_3383(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3398)
+static void C_ccall f_3398(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3406)
+static void C_ccall f_3406(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3415)
+static void C_ccall f_3415(C_word c,C_word *av) C_noret;
 C_noret_decl(f_3419)
 static void C_ccall f_3419(C_word c,C_word *av) C_noret;
 C_noret_decl(f_3422)
 static void C_ccall f_3422(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3424)
-static void C_fcall f_3424(C_word t0,C_word t1,C_word t2,C_word t3) C_noret;
-C_noret_decl(f_3430)
-static void C_ccall f_3430(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3442)
-static void C_ccall f_3442(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3461)
-static void C_ccall f_3461(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3492)
-static void C_ccall f_3492(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3425)
+static void C_ccall f_3425(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3427)
+static void C_fcall f_3427(C_word t0,C_word t1,C_word t2,C_word t3) C_noret;
+C_noret_decl(f_3433)
+static void C_ccall f_3433(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3445)
+static void C_ccall f_3445(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3464)
+static void C_ccall f_3464(C_word c,C_word *av) C_noret;
 C_noret_decl(f_3495)
 static void C_ccall f_3495(C_word c,C_word *av) C_noret;
 C_noret_decl(f_3498)
@@ -186,48 +184,48 @@ C_noret_decl(f_3504)
 static void C_ccall f_3504(C_word c,C_word *av) C_noret;
 C_noret_decl(f_3507)
 static void C_ccall f_3507(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3508)
-static void C_ccall f_3508(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3534)
-static void C_ccall f_3534(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3510)
+static void C_ccall f_3510(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3511)
+static void C_ccall f_3511(C_word c,C_word *av) C_noret;
 C_noret_decl(f_3537)
 static void C_ccall f_3537(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3539)
-static void C_ccall f_3539(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3573)
-static void C_ccall f_3573(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3600)
-static void C_ccall f_3600(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3540)
+static void C_ccall f_3540(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3542)
+static void C_ccall f_3542(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3576)
+static void C_ccall f_3576(C_word c,C_word *av) C_noret;
 C_noret_decl(f_3603)
 static void C_ccall f_3603(C_word c,C_word *av) C_noret;
 C_noret_decl(f_3606)
 static void C_ccall f_3606(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3621)
-static void C_ccall f_3621(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3625)
-static void C_ccall f_3625(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3637)
-static void C_ccall f_3637(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3649)
-static void C_ccall f_3649(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3661)
-static void C_ccall f_3661(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3665)
-static void C_ccall f_3665(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3673)
-static void C_ccall f_3673(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3680)
-static void C_ccall f_3680(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3684)
-static void C_ccall f_3684(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3688)
-static void C_ccall f_3688(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3692)
-static void C_ccall f_3692(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3696)
-static void C_ccall f_3696(C_word c,C_word *av) C_noret;
-C_noret_decl(f_3704)
-static void C_ccall f_3704(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3609)
+static void C_ccall f_3609(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3624)
+static void C_ccall f_3624(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3628)
+static void C_ccall f_3628(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3640)
+static void C_ccall f_3640(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3652)
+static void C_ccall f_3652(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3664)
+static void C_ccall f_3664(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3668)
+static void C_ccall f_3668(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3676)
+static void C_ccall f_3676(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3683)
+static void C_ccall f_3683(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3687)
+static void C_ccall f_3687(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3691)
+static void C_ccall f_3691(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3695)
+static void C_ccall f_3695(C_word c,C_word *av) C_noret;
+C_noret_decl(f_3699)
+static void C_ccall f_3699(C_word c,C_word *av) C_noret;
 C_noret_decl(f_3707)
 static void C_ccall f_3707(C_word c,C_word *av) C_noret;
 C_noret_decl(f_3710)
@@ -720,30 +718,30 @@ C_noret_decl(f_4439)
 static void C_ccall f_4439(C_word c,C_word *av) C_noret;
 C_noret_decl(f_4442)
 static void C_ccall f_4442(C_word c,C_word *av) C_noret;
-C_noret_decl(f_4444)
-static void C_ccall f_4444(C_word c,C_word *av) C_noret;
-C_noret_decl(f_4481)
-static void C_ccall f_4481(C_word c,C_word *av) C_noret;
-C_noret_decl(f_4483)
-static void C_ccall f_4483(C_word c,C_word *av) C_noret;
-C_noret_decl(f_4490)
-static void C_fcall f_4490(C_word t0,C_word t1) C_noret;
-C_noret_decl(f_4501)
-static void C_ccall f_4501(C_word c,C_word *av) C_noret;
-C_noret_decl(f_4522)
-static void C_ccall f_4522(C_word c,C_word *av) C_noret;
-C_noret_decl(f_4526)
-static void C_ccall f_4526(C_word c,C_word *av) C_noret;
-C_noret_decl(f_4539)
-static void C_ccall f_4539(C_word c,C_word *av) C_noret;
-C_noret_decl(f_4541)
-static void C_ccall f_4541(C_word c,C_word *av) C_noret;
-C_noret_decl(f_4563)
-static void C_ccall f_4563(C_word c,C_word *av) C_noret;
-C_noret_decl(f_4567)
-static void C_ccall f_4567(C_word c,C_word *av) C_noret;
-C_noret_decl(f_4577)
-static void C_ccall f_4577(C_word c,C_word *av) C_noret;
+C_noret_decl(f_4445)
+static void C_ccall f_4445(C_word c,C_word *av) C_noret;
+C_noret_decl(f_4447)
+static void C_ccall f_4447(C_word c,C_word *av) C_noret;
+C_noret_decl(f_4484)
+static void C_ccall f_4484(C_word c,C_word *av) C_noret;
+C_noret_decl(f_4486)
+static void C_ccall f_4486(C_word c,C_word *av) C_noret;
+C_noret_decl(f_4493)
+static void C_fcall f_4493(C_word t0,C_word t1) C_noret;
+C_noret_decl(f_4504)
+static void C_ccall f_4504(C_word c,C_word *av) C_noret;
+C_noret_decl(f_4525)
+static void C_ccall f_4525(C_word c,C_word *av) C_noret;
+C_noret_decl(f_4529)
+static void C_ccall f_4529(C_word c,C_word *av) C_noret;
+C_noret_decl(f_4542)
+static void C_ccall f_4542(C_word c,C_word *av) C_noret;
+C_noret_decl(f_4544)
+static void C_ccall f_4544(C_word c,C_word *av) C_noret;
+C_noret_decl(f_4566)
+static void C_ccall f_4566(C_word c,C_word *av) C_noret;
+C_noret_decl(f_4570)
+static void C_ccall f_4570(C_word c,C_word *av) C_noret;
 C_noret_decl(f_4580)
 static void C_ccall f_4580(C_word c,C_word *av) C_noret;
 C_noret_decl(f_4583)
@@ -1124,58 +1122,58 @@ C_noret_decl(f_5144)
 static void C_ccall f_5144(C_word c,C_word *av) C_noret;
 C_noret_decl(f_5147)
 static void C_ccall f_5147(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5149)
-static void C_ccall f_5149(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5171)
-static void C_ccall f_5171(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5186)
-static void C_ccall f_5186(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5150)
+static void C_ccall f_5150(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5152)
+static void C_ccall f_5152(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5174)
+static void C_ccall f_5174(C_word c,C_word *av) C_noret;
 C_noret_decl(f_5189)
 static void C_ccall f_5189(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5204)
-static void C_ccall f_5204(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5216)
-static void C_ccall f_5216(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5224)
-static void C_ccall f_5224(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5226)
-static void C_ccall f_5226(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5247)
-static void C_ccall f_5247(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5251)
-static void C_ccall f_5251(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5192)
+static void C_ccall f_5192(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5207)
+static void C_ccall f_5207(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5219)
+static void C_ccall f_5219(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5227)
+static void C_ccall f_5227(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5229)
+static void C_ccall f_5229(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5250)
+static void C_ccall f_5250(C_word c,C_word *av) C_noret;
 C_noret_decl(f_5254)
 static void C_ccall f_5254(C_word c,C_word *av) C_noret;
 C_noret_decl(f_5257)
 static void C_ccall f_5257(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5259)
-static void C_ccall f_5259(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5278)
-static void C_ccall f_5278(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5295)
-static void C_ccall f_5295(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5338)
-static void C_ccall f_5338(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5342)
-static void C_ccall f_5342(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5346)
-static void C_ccall f_5346(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5350)
-static void C_ccall f_5350(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5357)
-static void C_ccall f_5357(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5361)
-static void C_ccall f_5361(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5369)
-static void C_ccall f_5369(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5373)
-static void C_ccall f_5373(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5381)
-static void C_ccall f_5381(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5260)
+static void C_ccall f_5260(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5262)
+static void C_ccall f_5262(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5281)
+static void C_ccall f_5281(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5298)
+static void C_ccall f_5298(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5341)
+static void C_ccall f_5341(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5345)
+static void C_ccall f_5345(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5349)
+static void C_ccall f_5349(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5353)
+static void C_ccall f_5353(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5360)
+static void C_ccall f_5360(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5364)
+static void C_ccall f_5364(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5372)
+static void C_ccall f_5372(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5376)
+static void C_ccall f_5376(C_word c,C_word *av) C_noret;
 C_noret_decl(f_5384)
 static void C_ccall f_5384(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5388)
-static void C_ccall f_5388(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5387)
+static void C_ccall f_5387(C_word c,C_word *av) C_noret;
 C_noret_decl(f_5391)
 static void C_ccall f_5391(C_word c,C_word *av) C_noret;
 C_noret_decl(f_5394)
@@ -1206,238 +1204,233 @@ C_noret_decl(f_5430)
 static void C_ccall f_5430(C_word c,C_word *av) C_noret;
 C_noret_decl(f_5433)
 static void C_ccall f_5433(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5435)
-static void C_ccall f_5435(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5457)
-static void C_ccall f_5457(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5475)
-static void C_ccall f_5475(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5497)
-static void C_ccall f_5497(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5515)
-static void C_ccall f_5515(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5540)
-static void C_ccall f_5540(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5561)
-static void C_ccall f_5561(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5569)
-static void C_ccall f_5569(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5573)
-static void C_ccall f_5573(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5580)
-static void C_ccall f_5580(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5608)
-static void C_ccall f_5608(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5436)
+static void C_ccall f_5436(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5438)
+static void C_ccall f_5438(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5460)
+static void C_ccall f_5460(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5478)
+static void C_ccall f_5478(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5500)
+static void C_ccall f_5500(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5518)
+static void C_ccall f_5518(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5543)
+static void C_ccall f_5543(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5564)
+static void C_ccall f_5564(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5572)
+static void C_ccall f_5572(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5576)
+static void C_ccall f_5576(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5583)
+static void C_ccall f_5583(C_word c,C_word *av) C_noret;
 C_noret_decl(f_5611)
 static void C_ccall f_5611(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5642)
-static void C_fcall f_5642(C_word t0,C_word t1) C_noret;
-C_noret_decl(f_5664)
-static void C_ccall f_5664(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5687)
-static void C_ccall f_5687(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5691)
-static void C_ccall f_5691(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5695)
-static void C_ccall f_5695(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5702)
-static void C_ccall f_5702(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5724)
-static void C_ccall f_5724(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5734)
-static void C_ccall f_5734(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5748)
-static void C_ccall f_5748(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5752)
-static void C_ccall f_5752(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5759)
-static void C_ccall f_5759(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5790)
-static void C_ccall f_5790(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5614)
+static void C_ccall f_5614(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5645)
+static void C_fcall f_5645(C_word t0,C_word t1) C_noret;
+C_noret_decl(f_5667)
+static void C_ccall f_5667(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5690)
+static void C_ccall f_5690(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5694)
+static void C_ccall f_5694(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5698)
+static void C_ccall f_5698(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5705)
+static void C_ccall f_5705(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5727)
+static void C_ccall f_5727(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5737)
+static void C_ccall f_5737(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5751)
+static void C_ccall f_5751(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5755)
+static void C_ccall f_5755(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5762)
+static void C_ccall f_5762(C_word c,C_word *av) C_noret;
 C_noret_decl(f_5793)
-static void C_fcall f_5793(C_word t0,C_word t1) C_noret;
-C_noret_decl(f_5808)
-static void C_ccall f_5808(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5825)
-static void C_ccall f_5825(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5829)
-static void C_ccall f_5829(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5836)
-static void C_ccall f_5836(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5846)
-static void C_fcall f_5846(C_word t0,C_word t1) C_noret;
-C_noret_decl(f_5867)
-static void C_ccall f_5867(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5895)
-static void C_ccall f_5895(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5897)
-static void C_ccall f_5897(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5920)
-static void C_ccall f_5920(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5922)
-static void C_ccall f_5922(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5941)
-static void C_ccall f_5941(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5945)
-static void C_ccall f_5945(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5960)
-static void C_ccall f_5960(C_word c,C_word *av) C_noret;
-C_noret_decl(f_5970)
-static void C_fcall f_5970(C_word t0,C_word t1) C_noret;
-C_noret_decl(f_5991)
-static void C_ccall f_5991(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6019)
-static void C_ccall f_6019(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6021)
-static void C_ccall f_6021(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6044)
-static void C_ccall f_6044(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6046)
-static void C_ccall f_6046(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6065)
-static void C_ccall f_6065(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6069)
-static void C_ccall f_6069(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6084)
-static void C_ccall f_6084(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6088)
-static void C_ccall f_6088(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6109)
-static void C_ccall f_6109(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6151)
-static void C_ccall f_6151(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6153)
-static void C_ccall f_6153(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6160)
-static void C_fcall f_6160(C_word t0,C_word t1) C_noret;
-C_noret_decl(f_6171)
-static void C_ccall f_6171(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6192)
-static void C_ccall f_6192(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6196)
-static void C_ccall f_6196(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6202)
-static void C_ccall f_6202(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6224)
-static void C_ccall f_6224(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6228)
-static void C_ccall f_6228(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6230)
-static void C_ccall f_6230(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6246)
-static void C_ccall f_6246(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6252)
-static void C_ccall f_6252(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6270)
-static void C_ccall f_6270(C_word c,C_word *av) C_noret;
+static void C_ccall f_5793(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5796)
+static void C_fcall f_5796(C_word t0,C_word t1) C_noret;
+C_noret_decl(f_5811)
+static void C_ccall f_5811(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5828)
+static void C_ccall f_5828(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5832)
+static void C_ccall f_5832(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5839)
+static void C_ccall f_5839(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5849)
+static void C_fcall f_5849(C_word t0,C_word t1) C_noret;
+C_noret_decl(f_5870)
+static void C_ccall f_5870(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5898)
+static void C_ccall f_5898(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5900)
+static void C_ccall f_5900(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5923)
+static void C_ccall f_5923(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5925)
+static void C_ccall f_5925(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5944)
+static void C_ccall f_5944(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5948)
+static void C_ccall f_5948(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5963)
+static void C_ccall f_5963(C_word c,C_word *av) C_noret;
+C_noret_decl(f_5973)
+static void C_fcall f_5973(C_word t0,C_word t1) C_noret;
+C_noret_decl(f_5994)
+static void C_ccall f_5994(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6022)
+static void C_ccall f_6022(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6024)
+static void C_ccall f_6024(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6047)
+static void C_ccall f_6047(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6049)
+static void C_ccall f_6049(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6068)
+static void C_ccall f_6068(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6072)
+static void C_ccall f_6072(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6087)
+static void C_ccall f_6087(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6091)
+static void C_ccall f_6091(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6112)
+static void C_ccall f_6112(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6154)
+static void C_ccall f_6154(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6156)
+static void C_ccall f_6156(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6163)
+static void C_fcall f_6163(C_word t0,C_word t1) C_noret;
+C_noret_decl(f_6174)
+static void C_ccall f_6174(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6195)
+static void C_ccall f_6195(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6199)
+static void C_ccall f_6199(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6205)
+static void C_ccall f_6205(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6227)
+static void C_ccall f_6227(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6231)
+static void C_ccall f_6231(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6233)
+static void C_ccall f_6233(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6249)
+static void C_ccall f_6249(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6255)
+static void C_ccall f_6255(C_word c,C_word *av) C_noret;
 C_noret_decl(f_6273)
-static void C_fcall f_6273(C_word t0,C_word t1) C_noret;
+static void C_ccall f_6273(C_word c,C_word *av) C_noret;
 C_noret_decl(f_6276)
 static void C_fcall f_6276(C_word t0,C_word t1) C_noret;
-C_noret_decl(f_6291)
-static void C_ccall f_6291(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6303)
-static void C_ccall f_6303(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6313)
-static void C_ccall f_6313(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6317)
-static void C_ccall f_6317(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6326)
-static void C_ccall f_6326(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6336)
-static void C_ccall f_6336(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6340)
-static void C_ccall f_6340(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6370)
-static void C_ccall f_6370(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6374)
-static void C_ccall f_6374(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6378)
-static void C_ccall f_6378(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6382)
-static void C_ccall f_6382(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6386)
-static void C_ccall f_6386(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6395)
-static void C_ccall f_6395(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6399)
-static void C_ccall f_6399(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6401)
-static void C_fcall f_6401(C_word t0,C_word t1,C_word t2) C_noret;
-C_noret_decl(f_6411)
-static void C_ccall f_6411(C_word c,C_word *av) C_noret;
-C_noret_decl(f_6424)
-static void C_fcall f_6424(C_word t0,C_word t1,C_word t2) C_noret;
-C_noret_decl(f_6449)
-static void C_ccall f_6449(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6279)
+static void C_fcall f_6279(C_word t0,C_word t1) C_noret;
+C_noret_decl(f_6294)
+static void C_ccall f_6294(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6306)
+static void C_ccall f_6306(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6316)
+static void C_ccall f_6316(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6320)
+static void C_ccall f_6320(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6329)
+static void C_ccall f_6329(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6339)
+static void C_ccall f_6339(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6343)
+static void C_ccall f_6343(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6373)
+static void C_ccall f_6373(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6377)
+static void C_ccall f_6377(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6381)
+static void C_ccall f_6381(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6385)
+static void C_ccall f_6385(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6389)
+static void C_ccall f_6389(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6398)
+static void C_ccall f_6398(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6402)
+static void C_ccall f_6402(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6404)
+static void C_fcall f_6404(C_word t0,C_word t1,C_word t2) C_noret;
+C_noret_decl(f_6414)
+static void C_ccall f_6414(C_word c,C_word *av) C_noret;
+C_noret_decl(f_6427)
+static void C_fcall f_6427(C_word t0,C_word t1,C_word t2) C_noret;
+C_noret_decl(f_6452)
+static void C_ccall f_6452(C_word c,C_word *av) C_noret;
 C_noret_decl(C_c_2dplatform_toplevel)
 C_externexport void C_ccall C_c_2dplatform_toplevel(C_word c,C_word *av) C_noret;
 
-C_noret_decl(trf_2117)
-static void C_ccall trf_2117(C_word c,C_word *av) C_noret;
-static void C_ccall trf_2117(C_word c,C_word *av){
+C_noret_decl(trf_2119)
+static void C_ccall trf_2119(C_word c,C_word *av) C_noret;
+static void C_ccall trf_2119(C_word c,C_word *av){
 C_word t0=av[2];
 C_word t1=av[1];
 C_word t2=av[0];
-f_2117(t0,t1,t2);}
+f_2119(t0,t1,t2);}
 
-C_noret_decl(trf_2123)
-static void C_ccall trf_2123(C_word c,C_word *av) C_noret;
-static void C_ccall trf_2123(C_word c,C_word *av){
+C_noret_decl(trf_2125)
+static void C_ccall trf_2125(C_word c,C_word *av) C_noret;
+static void C_ccall trf_2125(C_word c,C_word *av){
 C_word t0=av[3];
 C_word t1=av[2];
 C_word t2=av[1];
 C_word t3=av[0];
-f_2123(t0,t1,t2,t3);}
+f_2125(t0,t1,t2,t3);}
 
-C_noret_decl(trf_2293)
-static void C_ccall trf_2293(C_word c,C_word *av) C_noret;
-static void C_ccall trf_2293(C_word c,C_word *av){
+C_noret_decl(trf_2295)
+static void C_ccall trf_2295(C_word c,C_word *av) C_noret;
+static void C_ccall trf_2295(C_word c,C_word *av){
 C_word t0=av[2];
 C_word t1=av[1];
 C_word t2=av[0];
-f_2293(t0,t1,t2);}
+f_2295(t0,t1,t2);}
 
-C_noret_decl(trf_2302)
-static void C_ccall trf_2302(C_word c,C_word *av) C_noret;
-static void C_ccall trf_2302(C_word c,C_word *av){
+C_noret_decl(trf_2304)
+static void C_ccall trf_2304(C_word c,C_word *av) C_noret;
+static void C_ccall trf_2304(C_word c,C_word *av){
 C_word t0=av[2];
 C_word t1=av[1];
 C_word t2=av[0];
-f_2302(t0,t1,t2);}
+f_2304(t0,t1,t2);}
 
-C_noret_decl(trf_2310)
-static void C_ccall trf_2310(C_word c,C_word *av) C_noret;
-static void C_ccall trf_2310(C_word c,C_word *av){
+C_noret_decl(trf_2312)
+static void C_ccall trf_2312(C_word c,C_word *av) C_noret;
+static void C_ccall trf_2312(C_word c,C_word *av){
 C_word t0=av[3];
 C_word t1=av[2];
 C_word t2=av[1];
 C_word t3=av[0];
-f_2310(t0,t1,t2,t3);}
+f_2312(t0,t1,t2,t3);}
 
-C_noret_decl(trf_2701)
-static void C_ccall trf_2701(C_word c,C_word *av) C_noret;
-static void C_ccall trf_2701(C_word c,C_word *av){
+C_noret_decl(trf_2703)
+static void C_ccall trf_2703(C_word c,C_word *av) C_noret;
+static void C_ccall trf_2703(C_word c,C_word *av){
 C_word t0=av[2];
 C_word t1=av[1];
 C_word t2=av[0];
-f_2701(t0,t1,t2);}
+f_2703(t0,t1,t2);}
 
-C_noret_decl(trf_3009)
-static void C_ccall trf_3009(C_word c,C_word *av) C_noret;
-static void C_ccall trf_3009(C_word c,C_word *av){
+C_noret_decl(trf_3012)
+static void C_ccall trf_3012(C_word c,C_word *av) C_noret;
+static void C_ccall trf_3012(C_word c,C_word *av){
 C_word t0=av[3];
 C_word t1=av[2];
 C_word t2=av[1];
 C_word t3=av[0];
-f_3009(t0,t1,t2,t3);}
-
-C_noret_decl(trf_3104)
-static void C_ccall trf_3104(C_word c,C_word *av) C_noret;
-static void C_ccall trf_3104(C_word c,C_word *av){
-C_word t0=av[1];
-C_word t1=av[0];
-f_3104(t0,t1);}
+f_3012(t0,t1,t2,t3);}
 
 C_noret_decl(trf_3107)
 static void C_ccall trf_3107(C_word c,C_word *av) C_noret;
@@ -1446,71 +1439,71 @@ C_word t0=av[1];
 C_word t1=av[0];
 f_3107(t0,t1);}
 
-C_noret_decl(trf_3296)
-static void C_ccall trf_3296(C_word c,C_word *av) C_noret;
-static void C_ccall trf_3296(C_word c,C_word *av){
+C_noret_decl(trf_3110)
+static void C_ccall trf_3110(C_word c,C_word *av) C_noret;
+static void C_ccall trf_3110(C_word c,C_word *av){
+C_word t0=av[1];
+C_word t1=av[0];
+f_3110(t0,t1);}
+
+C_noret_decl(trf_3299)
+static void C_ccall trf_3299(C_word c,C_word *av) C_noret;
+static void C_ccall trf_3299(C_word c,C_word *av){
 C_word t0=av[2];
 C_word t1=av[1];
 C_word t2=av[0];
-f_3296(t0,t1,t2);}
+f_3299(t0,t1,t2);}
 
-C_noret_decl(trf_3424)
-static void C_ccall trf_3424(C_word c,C_word *av) C_noret;
-static void C_ccall trf_3424(C_word c,C_word *av){
+C_noret_decl(trf_3427)
+static void C_ccall trf_3427(C_word c,C_word *av) C_noret;
+static void C_ccall trf_3427(C_word c,C_word *av){
 C_word t0=av[3];
 C_word t1=av[2];
 C_word t2=av[1];
 C_word t3=av[0];
-f_3424(t0,t1,t2,t3);}
+f_3427(t0,t1,t2,t3);}
 
-C_noret_decl(trf_4490)
-static void C_ccall trf_4490(C_word c,C_word *av) C_noret;
-static void C_ccall trf_4490(C_word c,C_word *av){
+C_noret_decl(trf_4493)
+static void C_ccall trf_4493(C_word c,C_word *av) C_noret;
+static void C_ccall trf_4493(C_word c,C_word *av){
 C_word t0=av[1];
 C_word t1=av[0];
-f_4490(t0,t1);}
+f_4493(t0,t1);}
 
-C_noret_decl(trf_5642)
-static void C_ccall trf_5642(C_word c,C_word *av) C_noret;
-static void C_ccall trf_5642(C_word c,C_word *av){
+C_noret_decl(trf_5645)
+static void C_ccall trf_5645(C_word c,C_word *av) C_noret;
+static void C_ccall trf_5645(C_word c,C_word *av){
 C_word t0=av[1];
 C_word t1=av[0];
-f_5642(t0,t1);}
+f_5645(t0,t1);}
 
-C_noret_decl(trf_5793)
-static void C_ccall trf_5793(C_word c,C_word *av) C_noret;
-static void C_ccall trf_5793(C_word c,C_word *av){
+C_noret_decl(trf_5796)
+static void C_ccall trf_5796(C_word c,C_word *av) C_noret;
+static void C_ccall trf_5796(C_word c,C_word *av){
 C_word t0=av[1];
 C_word t1=av[0];
-f_5793(t0,t1);}
+f_5796(t0,t1);}
 
-C_noret_decl(trf_5846)
-static void C_ccall trf_5846(C_word c,C_word *av) C_noret;
-static void C_ccall trf_5846(C_word c,C_word *av){
+C_noret_decl(trf_5849)
+static void C_ccall trf_5849(C_word c,C_word *av) C_noret;
+static void C_ccall trf_5849(C_word c,C_word *av){
 C_word t0=av[1];
 C_word t1=av[0];
-f_5846(t0,t1);}
+f_5849(t0,t1);}
 
-C_noret_decl(trf_5970)
-static void C_ccall trf_5970(C_word c,C_word *av) C_noret;
-static void C_ccall trf_5970(C_word c,C_word *av){
+C_noret_decl(trf_5973)
+static void C_ccall trf_5973(C_word c,C_word *av) C_noret;
+static void C_ccall trf_5973(C_word c,C_word *av){
 C_word t0=av[1];
 C_word t1=av[0];
-f_5970(t0,t1);}
+f_5973(t0,t1);}
 
-C_noret_decl(trf_6160)
-static void C_ccall trf_6160(C_word c,C_word *av) C_noret;
-static void C_ccall trf_6160(C_word c,C_word *av){
+C_noret_decl(trf_6163)
+static void C_ccall trf_6163(C_word c,C_word *av) C_noret;
+static void C_ccall trf_6163(C_word c,C_word *av){
 C_word t0=av[1];
 C_word t1=av[0];
-f_6160(t0,t1);}
-
-C_noret_decl(trf_6273)
-static void C_ccall trf_6273(C_word c,C_word *av) C_noret;
-static void C_ccall trf_6273(C_word c,C_word *av){
-C_word t0=av[1];
-C_word t1=av[0];
-f_6273(t0,t1);}
+f_6163(t0,t1);}
 
 C_noret_decl(trf_6276)
 static void C_ccall trf_6276(C_word c,C_word *av) C_noret;
@@ -1519,24 +1512,31 @@ C_word t0=av[1];
 C_word t1=av[0];
 f_6276(t0,t1);}
 
-C_noret_decl(trf_6401)
-static void C_ccall trf_6401(C_word c,C_word *av) C_noret;
-static void C_ccall trf_6401(C_word c,C_word *av){
+C_noret_decl(trf_6279)
+static void C_ccall trf_6279(C_word c,C_word *av) C_noret;
+static void C_ccall trf_6279(C_word c,C_word *av){
+C_word t0=av[1];
+C_word t1=av[0];
+f_6279(t0,t1);}
+
+C_noret_decl(trf_6404)
+static void C_ccall trf_6404(C_word c,C_word *av) C_noret;
+static void C_ccall trf_6404(C_word c,C_word *av){
 C_word t0=av[2];
 C_word t1=av[1];
 C_word t2=av[0];
-f_6401(t0,t1,t2);}
+f_6404(t0,t1,t2);}
 
-C_noret_decl(trf_6424)
-static void C_ccall trf_6424(C_word c,C_word *av) C_noret;
-static void C_ccall trf_6424(C_word c,C_word *av){
+C_noret_decl(trf_6427)
+static void C_ccall trf_6427(C_word c,C_word *av) C_noret;
+static void C_ccall trf_6427(C_word c,C_word *av){
 C_word t0=av[2];
 C_word t1=av[1];
 C_word t2=av[0];
-f_6424(t0,t1,t2);}
+f_6427(t0,t1,t2);}
 
-/* k1662 */
-static void C_ccall f_1664(C_word c,C_word *av){
+/* k1664 */
+static void C_ccall f_1666(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -1544,16 +1544,16 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_1664,2,av);}
+C_save_and_reclaim((void *)f_1666,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1667,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);{
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1669,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);{
 C_word *av2=av;
 av2[0]=C_SCHEME_UNDEFINED;
 av2[1]=t2;
 C_eval_toplevel(2,av2);}}
 
-/* k1665 in k1662 */
-static void C_ccall f_1667(C_word c,C_word *av){
+/* k1667 in k1664 */
+static void C_ccall f_1669(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -1561,16 +1561,16 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_1667,2,av);}
+C_save_and_reclaim((void *)f_1669,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1670,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);{
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1672,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);{
 C_word *av2=av;
 av2[0]=C_SCHEME_UNDEFINED;
 av2[1]=t2;
 C_expand_toplevel(2,av2);}}
 
-/* k1668 in k1665 in k1662 */
-static void C_ccall f_1670(C_word c,C_word *av){
+/* k1670 in k1667 in k1664 */
+static void C_ccall f_1672(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -1578,16 +1578,16 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_1670,2,av);}
+C_save_and_reclaim((void *)f_1672,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1673,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);{
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1675,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);{
 C_word *av2=av;
 av2[0]=C_SCHEME_UNDEFINED;
 av2[1]=t2;
 C_internal_toplevel(2,av2);}}
 
-/* k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_1673(C_word c,C_word *av){
+/* k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_1675(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -1595,16 +1595,16 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_1673,2,av);}
+C_save_and_reclaim((void *)f_1675,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1676,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);{
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1678,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);{
 C_word *av2=av;
 av2[0]=C_SCHEME_UNDEFINED;
 av2[1]=t2;
 C_optimizer_toplevel(2,av2);}}
 
-/* k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_1676(C_word c,C_word *av){
+/* k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_1678(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -1612,16 +1612,16 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_1676,2,av);}
+C_save_and_reclaim((void *)f_1678,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1679,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);{
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1681,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);{
 C_word *av2=av;
 av2[0]=C_SCHEME_UNDEFINED;
 av2[1]=t2;
 C_support_toplevel(2,av2);}}
 
-/* k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_1679(C_word c,C_word *av){
+/* k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_1681(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -1629,16 +1629,16 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_1679,2,av);}
+C_save_and_reclaim((void *)f_1681,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1682,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);{
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1684,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);{
 C_word *av2=av;
 av2[0]=C_SCHEME_UNDEFINED;
 av2[1]=t2;
 C_compiler_toplevel(2,av2);}}
 
-/* k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_1682(C_word c,C_word *av){
+/* k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_1684(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -1650,13 +1650,13 @@ C_word t6;
 C_word t7;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(23,c,4)))){
-C_save_and_reclaim((void *)f_1682,2,av);}
+C_save_and_reclaim((void *)f_1684,2,av);}
 a=C_alloc(23);
 t2=C_a_i_provide(&a,1,lf[0]);
 t3=C_a_i_provide(&a,1,lf[1]);
-t4=C_mutate(&lf[2] /* (set! chicken.compiler.c-platform#cons* ...) */,(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_2117,tmp=(C_word)a,a+=2,tmp));
-t5=C_mutate(&lf[3] /* (set! chicken.compiler.c-platform#filter ...) */,(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_2293,tmp=(C_word)a,a+=2,tmp));
-t6=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2963,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+t4=C_mutate(&lf[2] /* (set! chicken.compiler.c-platform#cons* ...) */,(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_2119,tmp=(C_word)a,a+=2,tmp));
+t5=C_mutate(&lf[3] /* (set! chicken.compiler.c-platform#filter ...) */,(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_2295,tmp=(C_word)a,a+=2,tmp));
+t6=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2965,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
 /* c-platform.scm:55: chicken.compiler.optimizer#default-optimization-passes */
 t7=*((C_word*)lf[943]+1);{
 C_word *av2;
@@ -1670,8 +1670,8 @@ av2[1]=t6;
 av2[2]=C_fix(3);
 ((C_proc)(void*)(*((C_word*)t7+1)))(3,av2);}}
 
-/* chicken.compiler.c-platform#cons* in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_fcall f_2117(C_word t1,C_word t2,C_word t3){
+/* chicken.compiler.c-platform#cons* in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_fcall f_2119(C_word t1,C_word t2,C_word t3){
 C_word tmp;
 C_word t4;
 C_word t5;
@@ -1679,16 +1679,16 @@ C_word t6;
 C_word t7;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,0,4)))){
-C_save_and_reclaim_args((void *)trf_2117,3,t1,t2,t3);}
+C_save_and_reclaim_args((void *)trf_2119,3,t1,t2,t3);}
 a=C_alloc(5);
 t4=C_SCHEME_UNDEFINED;
 t5=(*a=C_VECTOR_TYPE|1,a[1]=t4,tmp=(C_word)a,a+=2,tmp);
-t6=C_set_block_item(t5,0,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2123,a[2]=t5,tmp=(C_word)a,a+=3,tmp));
+t6=C_set_block_item(t5,0,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2125,a[2]=t5,tmp=(C_word)a,a+=3,tmp));
 t7=((C_word*)t5)[1];
-f_2123(t7,t1,t2,t3);}
+f_2125(t7,t1,t2,t3);}
 
-/* loop in chicken.compiler.c-platform#cons* in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_fcall f_2123(C_word t0,C_word t1,C_word t2,C_word t3){
+/* loop in chicken.compiler.c-platform#cons* in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_fcall f_2125(C_word t0,C_word t1,C_word t2,C_word t3){
 C_word tmp;
 C_word t4;
 C_word t5;
@@ -1701,7 +1701,7 @@ C_word t11;
 C_word *a;
 loop:
 if(C_unlikely(!C_demand(C_calculate_demand(4,0,3)))){
-C_save_and_reclaim_args((void *)trf_2123,4,t0,t1,t2,t3);}
+C_save_and_reclaim_args((void *)trf_2125,4,t0,t1,t2,t3);}
 a=C_alloc(4);
 if(C_truep(C_i_nullp(t3))){
 t4=t2;
@@ -1711,7 +1711,7 @@ av2[0]=t5;
 av2[1]=t4;
 ((C_proc)(void*)(*((C_word*)t5+1)))(2,av2);}}
 else{
-t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2137,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
+t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2139,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
 t5=C_i_car(t3);
 t6=t3;
 t7=C_u_i_cdr(t6);
@@ -1724,15 +1724,15 @@ t2=t10;
 t3=t11;
 goto loop;}}
 
-/* k2135 in loop in chicken.compiler.c-platform#cons* in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_2137(C_word c,C_word *av){
+/* k2137 in loop in chicken.compiler.c-platform#cons* in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_2139(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,1)))){
-C_save_and_reclaim((void *)f_2137,2,av);}
+C_save_and_reclaim((void *)f_2139,2,av);}
 a=C_alloc(3);
 t2=((C_word*)t0)[2];{
 C_word *av2=av;
@@ -1740,8 +1740,8 @@ av2[0]=t2;
 av2[1]=C_a_i_cons(&a,2,((C_word*)t0)[3],t1);
 ((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}
 
-/* chicken.compiler.c-platform#filter in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_fcall f_2293(C_word t1,C_word t2,C_word t3){
+/* chicken.compiler.c-platform#filter in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_fcall f_2295(C_word t1,C_word t2,C_word t3){
 C_word tmp;
 C_word t4;
 C_word t5;
@@ -1750,17 +1750,17 @@ C_word t7;
 C_word t8;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,0,3)))){
-C_save_and_reclaim_args((void *)trf_2293,3,t1,t2,t3);}
+C_save_and_reclaim_args((void *)trf_2295,3,t1,t2,t3);}
 a=C_alloc(6);
 t4=C_i_check_list_2(t3,lf[4]);
 t5=C_SCHEME_UNDEFINED;
 t6=(*a=C_VECTOR_TYPE|1,a[1]=t5,tmp=(C_word)a,a+=2,tmp);
-t7=C_set_block_item(t6,0,(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2302,a[2]=t2,a[3]=t6,tmp=(C_word)a,a+=4,tmp));
+t7=C_set_block_item(t6,0,(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2304,a[2]=t2,a[3]=t6,tmp=(C_word)a,a+=4,tmp));
 t8=((C_word*)t6)[1];
-f_2302(t8,t1,t3);}
+f_2304(t8,t1,t3);}
 
-/* foldr254 in chicken.compiler.c-platform#filter in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_fcall f_2302(C_word t0,C_word t1,C_word t2){
+/* foldr254 in chicken.compiler.c-platform#filter in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_fcall f_2304(C_word t0,C_word t1,C_word t2){
 C_word tmp;
 C_word t3;
 C_word t4;
@@ -1773,13 +1773,13 @@ C_word t10;
 C_word *a;
 loop:
 if(C_unlikely(!C_demand(C_calculate_demand(8,0,4)))){
-C_save_and_reclaim_args((void *)trf_2302,3,t0,t1,t2);}
+C_save_and_reclaim_args((void *)trf_2304,3,t0,t1,t2);}
 a=C_alloc(8);
 if(C_truep(C_i_pairp(t2))){
-t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2310,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2312,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
 t4=C_slot(t2,C_fix(0));
 t5=t4;
-t6=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2331,a[2]=t3,a[3]=t1,a[4]=t5,tmp=(C_word)a,a+=5,tmp);
+t6=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2333,a[2]=t3,a[3]=t1,a[4]=t5,tmp=(C_word)a,a+=5,tmp);
 t7=C_slot(t2,C_fix(1));
 t9=t6;
 t10=t7;
@@ -1793,16 +1793,16 @@ av2[0]=t3;
 av2[1]=C_SCHEME_END_OF_LIST;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* g259 in foldr254 in chicken.compiler.c-platform#filter in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_fcall f_2310(C_word t0,C_word t1,C_word t2,C_word t3){
+/* g259 in foldr254 in chicken.compiler.c-platform#filter in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_fcall f_2312(C_word t0,C_word t1,C_word t2,C_word t3){
 C_word tmp;
 C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,0,2)))){
-C_save_and_reclaim_args((void *)trf_2310,4,t0,t1,t2,t3);}
+C_save_and_reclaim_args((void *)trf_2312,4,t0,t1,t2,t3);}
 a=C_alloc(5);
-t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2317,a[2]=t1,a[3]=t2,a[4]=t3,tmp=(C_word)a,a+=5,tmp);
+t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2319,a[2]=t1,a[3]=t2,a[4]=t3,tmp=(C_word)a,a+=5,tmp);
 /* mini-srfi-1.scm:131: pred */
 t5=((C_word*)t0)[2];{
 C_word av2[3];
@@ -1811,8 +1811,8 @@ av2[1]=t4;
 av2[2]=t2;
 ((C_proc)(void*)(*((C_word*)t5+1)))(3,av2);}}
 
-/* k2315 in g259 in foldr254 in chicken.compiler.c-platform#filter in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_2317(C_word c,C_word *av){
+/* k2317 in g259 in foldr254 in chicken.compiler.c-platform#filter in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_2319(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -1820,7 +1820,7 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,1)))){
-C_save_and_reclaim((void *)f_2317,2,av);}
+C_save_and_reclaim((void *)f_2319,2,av);}
 a=C_alloc(3);
 if(C_truep(t1)){
 t2=((C_word*)t0)[2];{
@@ -1836,21 +1836,21 @@ av2[0]=t3;
 av2[1]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* k2329 in foldr254 in chicken.compiler.c-platform#filter in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_2331(C_word c,C_word *av){
+/* k2331 in foldr254 in chicken.compiler.c-platform#filter in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_2333(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,3)))){
-C_save_and_reclaim((void *)f_2331,2,av);}
+C_save_and_reclaim((void *)f_2333,2,av);}
 /* mini-srfi-1.scm:131: g259 */
 t2=((C_word*)t0)[2];
-f_2310(t2,((C_word*)t0)[3],((C_word*)t0)[4],t1);}
+f_2312(t2,((C_word*)t0)[3],((C_word*)t0)[4],t1);}
 
-/* loop in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static C_word C_fcall f_2459(C_word t1){
+/* loop in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static C_word C_fcall f_2461(C_word t1){
 C_word tmp;
 C_word t2;
 C_word t3;
@@ -1871,14 +1871,14 @@ t6=t4;
 t1=t6;
 goto loop;}}
 
-/* loop in k5187 in k5184 in k5245 in k5169 in k5249 in rewrite-make-vector in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in ... */
-static void C_fcall f_2701(C_word t0,C_word t1,C_word t2){
+/* loop in k5190 in k5187 in k5248 in k5172 in k5252 in rewrite-make-vector in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in ... */
+static void C_fcall f_2703(C_word t0,C_word t1,C_word t2){
 C_word tmp;
 C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,0,2)))){
-C_save_and_reclaim_args((void *)trf_2701,3,t0,t1,t2);}
+C_save_and_reclaim_args((void *)trf_2703,3,t0,t1,t2);}
 a=C_alloc(5);
 if(C_truep(C_fixnum_greater_or_equal_p(t2,((C_word*)t0)[2]))){
 t3=t1;{
@@ -1887,7 +1887,7 @@ av2[0]=t3;
 av2[1]=C_SCHEME_END_OF_LIST;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}
 else{
-t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2715,a[2]=t1,a[3]=t2,a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
+t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2717,a[2]=t1,a[3]=t2,a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
 /* mini-srfi-1.scm:190: proc */
 t4=((C_word*)t0)[4];{
 C_word av2[3];
@@ -1896,8 +1896,8 @@ av2[1]=t3;
 av2[2]=t2;
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}}
 
-/* k2713 in loop in k5187 in k5184 in k5245 in k5169 in k5249 in rewrite-make-vector in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in ... */
-static void C_ccall f_2715(C_word c,C_word *av){
+/* k2715 in loop in k5190 in k5187 in k5248 in k5172 in k5252 in rewrite-make-vector in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in ... */
+static void C_ccall f_2717(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -1907,24 +1907,24 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
-C_save_and_reclaim((void *)f_2715,2,av);}
+C_save_and_reclaim((void *)f_2717,2,av);}
 a=C_alloc(4);
 t2=t1;
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2719,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2721,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
 t4=C_fixnum_plus(((C_word*)t0)[3],C_fix(1));
 /* mini-srfi-1.scm:190: loop */
 t5=((C_word*)((C_word*)t0)[4])[1];
-f_2701(t5,t3,t4);}
+f_2703(t5,t3,t4);}
 
-/* k2717 in k2713 in loop in k5187 in k5184 in k5245 in k5169 in k5249 in rewrite-make-vector in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in ... */
-static void C_ccall f_2719(C_word c,C_word *av){
+/* k2719 in k2715 in loop in k5190 in k5187 in k5248 in k5172 in k5252 in rewrite-make-vector in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in ... */
+static void C_ccall f_2721(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,1)))){
-C_save_and_reclaim((void *)f_2719,2,av);}
+C_save_and_reclaim((void *)f_2721,2,av);}
 a=C_alloc(3);
 t2=((C_word*)t0)[2];{
 C_word *av2=av;
@@ -1932,8 +1932,8 @@ av2[0]=t2;
 av2[1]=C_a_i_cons(&a,2,((C_word*)t0)[3],t1);
 ((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}
 
-/* k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_2963(C_word c,C_word *av){
+/* k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_2965(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -1945,14 +1945,14 @@ C_word t6;
 C_word t7;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_2963,2,av);}
+C_save_and_reclaim((void *)f_2965,2,av);}
 a=C_alloc(3);
 t2=C_mutate((C_word*)lf[5]+1 /* (set! chicken.compiler.c-platform#default-declarations ...) */,lf[6]);
 t3=C_mutate((C_word*)lf[7]+1 /* (set! chicken.compiler.c-platform#default-profiling-declarations ...) */,lf[8]);
 t4=C_mutate((C_word*)lf[9]+1 /* (set! chicken.compiler.c-platform#default-units ...) */,lf[10]);
 t5=C_set_block_item(lf[11] /* chicken.compiler.c-platform#words-per-flonum */,0,C_fix(4));
-t6=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2970,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:82: chicken.compiler.optimizer#eq-inline-operator */
+t6=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2973,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:83: chicken.compiler.optimizer#eq-inline-operator */
 t7=*((C_word*)lf[941]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -1965,8 +1965,8 @@ av2[1]=t6;
 av2[2]=lf[942];
 ((C_proc)(void*)(*((C_word*)t7+1)))(3,av2);}}
 
-/* k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_2970(C_word c,C_word *av){
+/* k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_2973(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -1974,10 +1974,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_2970,2,av);}
+C_save_and_reclaim((void *)f_2973,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2973,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:83: chicken.compiler.optimizer#membership-test-operators */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2976,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:84: chicken.compiler.optimizer#membership-test-operators */
 t3=*((C_word*)lf[939]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -1990,8 +1990,8 @@ av2[1]=t2;
 av2[2]=lf[940];
 ((C_proc)(void*)(*((C_word*)t3+1)))(3,av2);}}
 
-/* k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_2973(C_word c,C_word *av){
+/* k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_2976(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -1999,10 +1999,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_2973,2,av);}
+C_save_and_reclaim((void *)f_2976,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2976,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:86: chicken.compiler.optimizer#membership-unfold-limit */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2979,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:87: chicken.compiler.optimizer#membership-unfold-limit */
 t3=*((C_word*)lf[938]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -2015,8 +2015,8 @@ av2[1]=t2;
 av2[2]=C_fix(20);
 ((C_proc)(void*)(*((C_word*)t3+1)))(3,av2);}}
 
-/* k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_2976(C_word c,C_word *av){
+/* k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_2979(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2034,7 +2034,7 @@ C_word t12;
 C_word t13;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(15,c,3)))){
-C_save_and_reclaim((void *)f_2976,2,av);}
+C_save_and_reclaim((void *)f_2979,2,av);}
 a=C_alloc(15);
 t2=C_mutate((C_word*)lf[12]+1 /* (set! chicken.compiler.c-platform#target-include-file ...) */,lf[13]);
 t3=C_mutate((C_word*)lf[14]+1 /* (set! chicken.compiler.c-platform#valid-compiler-options ...) */,lf[15]);
@@ -2043,15 +2043,15 @@ t5=C_a_i_cons(&a,2,C_SCHEME_UNDEFINED,C_
 t6=t5;
 t7=(*a=C_VECTOR_TYPE|1,a[1]=t6,tmp=(C_word)a,a+=2,tmp);
 t8=((C_word*)t7)[1];
-t9=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2991,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+t9=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2994,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
 t10=C_SCHEME_UNDEFINED;
 t11=(*a=C_VECTOR_TYPE|1,a[1]=t10,tmp=(C_word)a,a+=2,tmp);
-t12=C_set_block_item(t11,0,(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6424,a[2]=t7,a[3]=t11,a[4]=t8,tmp=(C_word)a,a+=5,tmp));
+t12=C_set_block_item(t11,0,(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6427,a[2]=t7,a[3]=t11,a[4]=t8,tmp=(C_word)a,a+=5,tmp));
 t13=((C_word*)t11)[1];
-f_6424(t13,t9,lf[937]);}
+f_6427(t13,t9,lf[937]);}
 
-/* k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_2991(C_word c,C_word *av){
+/* k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_2994(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2060,11 +2060,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,4)))){
-C_save_and_reclaim((void *)f_2991,2,av);}
+C_save_and_reclaim((void *)f_2994,2,av);}
 a=C_alloc(3);
 t2=C_mutate((C_word*)lf[18]+1 /* (set! chicken.compiler.core#default-standard-bindings ...) */,t1);
-t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2998,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:258: scheme#append */
+t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3001,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:259: scheme#append */
 t4=*((C_word*)lf[37]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -2079,8 +2079,8 @@ av2[3]=lf[933];
 av2[4]=lf[934];
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_2998(C_word c,C_word *av){
+/* k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3001(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2093,19 +2093,19 @@ C_word t7;
 C_word t8;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(8,c,3)))){
-C_save_and_reclaim((void *)f_2998,2,av);}
+C_save_and_reclaim((void *)f_3001,2,av);}
 a=C_alloc(8);
 t2=C_mutate((C_word*)lf[19]+1 /* (set! chicken.compiler.core#default-extended-bindings ...) */,t1);
 t3=C_mutate((C_word*)lf[20]+1 /* (set! chicken.compiler.core#internal-bindings ...) */,lf[21]);
-t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3007,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3010,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
 t5=C_SCHEME_UNDEFINED;
 t6=(*a=C_VECTOR_TYPE|1,a[1]=t5,tmp=(C_word)a,a+=2,tmp);
-t7=C_set_block_item(t6,0,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6401,a[2]=t6,tmp=(C_word)a,a+=3,tmp));
+t7=C_set_block_item(t6,0,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6404,a[2]=t6,tmp=(C_word)a,a+=3,tmp));
 t8=((C_word*)t6)[1];
-f_6401(t8,t4,lf[931]);}
+f_6404(t8,t4,lf[931]);}
 
-/* k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3007(C_word c,C_word *av){
+/* k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3010(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2115,30 +2115,30 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(9,c,5)))){
-C_save_and_reclaim((void *)f_3007,2,av);}
+C_save_and_reclaim((void *)f_3010,2,av);}
 a=C_alloc(9);
-t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_3009,tmp=(C_word)a,a+=2,tmp);
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3074,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
-t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6399,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:312: op1 */
-f_3009(t4,lf[926],lf[927],lf[928]);}
+t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_3012,tmp=(C_word)a,a+=2,tmp);
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3077,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
+t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6402,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:313: op1 */
+f_3012(t4,lf[926],lf[927],lf[928]);}
 
-/* op1 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_fcall f_3009(C_word t1,C_word t2,C_word t3,C_word t4){
+/* op1 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_fcall f_3012(C_word t1,C_word t2,C_word t3,C_word t4){
 C_word tmp;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,0,6)))){
-C_save_and_reclaim_args((void *)trf_3009,4,t1,t2,t3,t4);}
+C_save_and_reclaim_args((void *)trf_3012,4,t1,t2,t3,t4);}
 a=C_alloc(5);
 t5=t1;{
 C_word av2[2];
 av2[0]=t5;
-av2[1]=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3011,a[2]=t3,a[3]=t2,a[4]=t4,tmp=(C_word)a,a+=5,tmp);
+av2[1]=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3014,a[2]=t3,a[3]=t2,a[4]=t4,tmp=(C_word)a,a+=5,tmp);
 ((C_proc)(void*)(*((C_word*)t5+1)))(2,av2);}}
 
-/* f_3011 in op1 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3011(C_word c,C_word *av){
+/* f_3014 in op1 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3014(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2160,20 +2160,20 @@ C_word t16;
 C_word t17;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(19,c,4)))){
-C_save_and_reclaim((void *)f_3011,6,av);}
+C_save_and_reclaim((void *)f_3014,6,av);}
 a=C_alloc(19);
 t6=C_i_length(t5);
 t7=C_eqp(t6,C_fix(1));
 if(C_truep(t7)){
 t8=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t9=t8;
-t10=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3033,a[2]=t4,a[3]=t1,a[4]=t9,tmp=(C_word)a,a+=5,tmp);
+t10=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3036,a[2]=t4,a[3]=t1,a[4]=t9,tmp=(C_word)a,a+=5,tmp);
 t11=C_eqp(lf[24],*((C_word*)lf[25]+1));
 if(C_truep(t11)){
 if(C_truep(*((C_word*)lf[26]+1))){
 t12=((C_word*)t0)[2];
 t13=C_a_i_list1(&a,1,t12);
-/* c-platform.scm:308: chicken.compiler.support#make-node */
+/* c-platform.scm:309: chicken.compiler.support#make-node */
 t14=*((C_word*)lf[22]+1);{
 C_word *av2=av;
 av2[0]=t14;
@@ -2185,7 +2185,7 @@ av2[4]=t5;
 else{
 t12=((C_word*)t0)[3];
 t13=C_a_i_list1(&a,1,t12);
-/* c-platform.scm:308: chicken.compiler.support#make-node */
+/* c-platform.scm:309: chicken.compiler.support#make-node */
 t14=*((C_word*)lf[22]+1);{
 C_word *av2=av;
 av2[0]=t14;
@@ -2199,8 +2199,8 @@ t12=C_a_i_list2(&a,2,((C_word*)t0)[4],C_
 t13=t12;
 t14=C_i_car(t5);
 t15=t14;
-t16=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3066,a[2]=t15,a[3]=t10,a[4]=t13,tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:311: chicken.compiler.support#qnode */
+t16=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3069,a[2]=t15,a[3]=t10,a[4]=t13,tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:312: chicken.compiler.support#qnode */
 t17=*((C_word*)lf[29]+1);{
 C_word *av2=av;
 av2[0]=t17;
@@ -2214,8 +2214,8 @@ av2[0]=t8;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t8+1)))(2,av2);}}}
 
-/* k3031 */
-static void C_ccall f_3033(C_word c,C_word *av){
+/* k3034 */
+static void C_ccall f_3036(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2223,10 +2223,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_3033,2,av);}
+C_save_and_reclaim((void *)f_3036,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:303: chicken.compiler.support#make-node */
+/* c-platform.scm:304: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -2241,8 +2241,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k3064 */
-static void C_ccall f_3066(C_word c,C_word *av){
+/* k3067 */
+static void C_ccall f_3069(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2250,10 +2250,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_3066,2,av);}
+C_save_and_reclaim((void *)f_3069,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:309: chicken.compiler.support#make-node */
+/* c-platform.scm:310: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -2268,8 +2268,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3074(C_word c,C_word *av){
+/* k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3077(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2278,15 +2278,15 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_3074,2,av);}
+C_save_and_reclaim((void *)f_3077,2,av);}
 a=C_alloc(6);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3077,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6395,a[2]=t2,tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:313: op1 */
-f_3009(t3,lf[922],lf[923],lf[924]);}
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3080,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6398,a[2]=t2,tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:314: op1 */
+f_3012(t3,lf[922],lf[923],lf[924]);}
 
-/* k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3077(C_word c,C_word *av){
+/* k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3080(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2295,11 +2295,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,6)))){
-C_save_and_reclaim((void *)f_3077,2,av);}
+C_save_and_reclaim((void *)f_3080,2,av);}
 a=C_alloc(6);
-t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_3079,tmp=(C_word)a,a+=2,tmp);
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3233,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:336: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_3082,tmp=(C_word)a,a+=2,tmp);
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3236,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:337: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -2314,8 +2314,8 @@ av2[3]=C_fix(8);
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3079(C_word c,C_word *av){
+/* eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3082(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2336,7 +2336,7 @@ C_word t15;
 C_word t16;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(13,c,2)))){
-C_save_and_reclaim((void *)f_3079,6,av);}
+C_save_and_reclaim((void *)f_3082,6,av);}
 a=C_alloc(13);
 t6=C_i_length(t5);
 t7=C_eqp(t6,C_fix(2));
@@ -2347,9 +2347,9 @@ t10=t9;
 t11=t5;
 t12=C_i_cadr(t11);
 t13=t12;
-t14=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3095,a[2]=t1,a[3]=t4,a[4]=t5,a[5]=t13,a[6]=t10,tmp=(C_word)a,a+=7,tmp);
-t15=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3225,a[2]=t4,a[3]=t14,a[4]=t13,a[5]=t10,tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:323: chicken.compiler.support#node-class */
+t14=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3098,a[2]=t1,a[3]=t4,a[4]=t5,a[5]=t13,a[6]=t10,tmp=(C_word)a,a+=7,tmp);
+t15=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3228,a[2]=t4,a[3]=t14,a[4]=t13,a[5]=t10,tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:324: chicken.compiler.support#node-class */
 t16=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t16;
@@ -2363,8 +2363,8 @@ av2[0]=t8;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t8+1)))(2,av2);}}}
 
-/* k3093 in eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3095(C_word c,C_word *av){
+/* k3096 in eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3098(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2373,7 +2373,7 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(10,c,2)))){
-C_save_and_reclaim((void *)f_3095,2,av);}
+C_save_and_reclaim((void *)f_3098,2,av);}
 a=C_alloc(10);
 if(C_truep(t1)){
 t2=((C_word*)t0)[2];{
@@ -2382,9 +2382,9 @@ av2[0]=t2;
 av2[1]=t1;
 ((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}
 else{
-t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3104,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3179,a[2]=t2,a[3]=((C_word*)t0)[6],tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:327: chicken.compiler.support#node-class */
+t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3107,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3182,a[2]=t2,a[3]=((C_word*)t0)[6],tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:328: chicken.compiler.support#node-class */
 t4=*((C_word*)lf[34]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -2397,23 +2397,23 @@ av2[1]=t3;
 av2[2]=((C_word*)t0)[6];
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}}
 
-/* k3102 in k3093 in eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_fcall f_3104(C_word t0,C_word t1){
+/* k3105 in k3096 in eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_fcall f_3107(C_word t0,C_word t1){
 C_word tmp;
 C_word t2;
 C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(9,0,2)))){
-C_save_and_reclaim_args((void *)trf_3104,2,t0,t1);}
+C_save_and_reclaim_args((void *)trf_3107,2,t0,t1);}
 a=C_alloc(9);
-t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3107,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
+t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3110,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
 if(C_truep(t1)){
 t3=t2;
-f_3107(t3,t1);}
+f_3110(t3,t1);}
 else{
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3152,a[2]=t2,a[3]=((C_word*)t0)[5],tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:330: chicken.compiler.support#node-class */
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3155,a[2]=t2,a[3]=((C_word*)t0)[5],tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:331: chicken.compiler.support#node-class */
 t4=*((C_word*)lf[34]+1);{
 C_word av2[3];
 av2[0]=t4;
@@ -2421,8 +2421,8 @@ av2[1]=t3;
 av2[2]=((C_word*)t0)[5];
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}}
 
-/* k3105 in k3102 in k3093 in eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_fcall f_3107(C_word t0,C_word t1){
+/* k3108 in k3105 in k3096 in eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_fcall f_3110(C_word t0,C_word t1){
 C_word tmp;
 C_word t2;
 C_word t3;
@@ -2430,13 +2430,13 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(8,0,4)))){
-C_save_and_reclaim_args((void *)trf_3107,2,t0,t1);}
+C_save_and_reclaim_args((void *)trf_3110,2,t0,t1);}
 a=C_alloc(8);
 if(C_truep(t1)){
 t2=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3122,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t3,tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:335: chicken.compiler.support#make-node */
+t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3125,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t3,tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:336: chicken.compiler.support#make-node */
 t5=*((C_word*)lf[22]+1);{
 C_word av2[5];
 av2[0]=t5;
@@ -2452,8 +2452,8 @@ av2[0]=t2;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}}
 
-/* k3120 in k3105 in k3102 in k3093 in eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3122(C_word c,C_word *av){
+/* k3123 in k3108 in k3105 in k3096 in eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3125(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2461,10 +2461,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_3122,2,av);}
+C_save_and_reclaim((void *)f_3125,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:333: chicken.compiler.support#make-node */
+/* c-platform.scm:334: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -2479,8 +2479,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k3132 in k3146 in k3150 in k3102 in k3093 in eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 in ... */
-static void C_ccall f_3134(C_word c,C_word *av){
+/* k3135 in k3149 in k3153 in k3105 in k3096 in eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 in ... */
+static void C_ccall f_3137(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2488,17 +2488,17 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
-C_save_and_reclaim((void *)f_3134,2,av);}
+C_save_and_reclaim((void *)f_3137,2,av);}
 if(C_truep(t1)){
 t2=((C_word*)t0)[2];
-f_3107(t2,t1);}
+f_3110(t2,t1);}
 else{
 t2=C_i_numberp(((C_word*)t0)[3]);
 t3=((C_word*)t0)[2];
-f_3107(t3,C_i_not(t2));}}
+f_3110(t3,C_i_not(t2));}}
 
-/* k3146 in k3150 in k3102 in k3093 in eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3148(C_word c,C_word *av){
+/* k3149 in k3153 in k3105 in k3096 in eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3151(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2508,12 +2508,12 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
-C_save_and_reclaim((void *)f_3148,2,av);}
+C_save_and_reclaim((void *)f_3151,2,av);}
 a=C_alloc(4);
 t2=C_i_car(t1);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3134,a[2]=((C_word*)t0)[2],a[3]=t3,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:332: chicken.compiler.support#immediate? */
+t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3137,a[2]=((C_word*)t0)[2],a[3]=t3,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:333: chicken.compiler.support#immediate? */
 t5=*((C_word*)lf[32]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -2526,8 +2526,8 @@ av2[1]=t4;
 av2[2]=t3;
 ((C_proc)(void*)(*((C_word*)t5+1)))(3,av2);}}
 
-/* k3150 in k3102 in k3093 in eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3152(C_word c,C_word *av){
+/* k3153 in k3105 in k3096 in eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3155(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2536,12 +2536,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_3152,2,av);}
+C_save_and_reclaim((void *)f_3155,2,av);}
 a=C_alloc(3);
 t2=C_eqp(lf[31],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3148,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:331: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3151,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:332: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -2555,10 +2555,10 @@ av2[2]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}
 else{
 t3=((C_word*)t0)[2];
-f_3107(t3,C_SCHEME_FALSE);}}
+f_3110(t3,C_SCHEME_FALSE);}}
 
-/* k3159 in k3173 in k3177 in k3093 in eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3161(C_word c,C_word *av){
+/* k3162 in k3176 in k3180 in k3096 in eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3164(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2566,18 +2566,18 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
-C_save_and_reclaim((void *)f_3161,2,av);}
+C_save_and_reclaim((void *)f_3164,2,av);}
 if(C_truep(t1)){
 t2=t1;
 t3=((C_word*)t0)[2];
-f_3104(t3,t2);}
+f_3107(t3,t2);}
 else{
 t2=C_i_numberp(((C_word*)t0)[3]);
 t3=((C_word*)t0)[2];
-f_3104(t3,C_i_not(t2));}}
+f_3107(t3,C_i_not(t2));}}
 
-/* k3173 in k3177 in k3093 in eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3175(C_word c,C_word *av){
+/* k3176 in k3180 in k3096 in eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3178(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2587,12 +2587,12 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
-C_save_and_reclaim((void *)f_3175,2,av);}
+C_save_and_reclaim((void *)f_3178,2,av);}
 a=C_alloc(4);
 t2=C_i_car(t1);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3161,a[2]=((C_word*)t0)[2],a[3]=t3,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:329: chicken.compiler.support#immediate? */
+t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3164,a[2]=((C_word*)t0)[2],a[3]=t3,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:330: chicken.compiler.support#immediate? */
 t5=*((C_word*)lf[32]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -2605,8 +2605,8 @@ av2[1]=t4;
 av2[2]=t3;
 ((C_proc)(void*)(*((C_word*)t5+1)))(3,av2);}}
 
-/* k3177 in k3093 in eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3179(C_word c,C_word *av){
+/* k3180 in k3096 in eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3182(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2615,12 +2615,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_3179,2,av);}
+C_save_and_reclaim((void *)f_3182,2,av);}
 a=C_alloc(3);
 t2=C_eqp(lf[31],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3175,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:328: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3178,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:329: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -2634,10 +2634,10 @@ av2[2]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}
 else{
 t3=((C_word*)t0)[2];
-f_3104(t3,C_SCHEME_FALSE);}}
+f_3107(t3,C_SCHEME_FALSE);}}
 
-/* k3207 in k3215 in k3211 in k3219 in k3223 in eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 in ... */
-static void C_ccall f_3209(C_word c,C_word *av){
+/* k3210 in k3218 in k3214 in k3222 in k3226 in eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 in ... */
+static void C_ccall f_3212(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2645,10 +2645,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_3209,2,av);}
+C_save_and_reclaim((void *)f_3212,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:326: chicken.compiler.support#make-node */
+/* c-platform.scm:327: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -2663,8 +2663,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k3211 in k3219 in k3223 in eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3213(C_word c,C_word *av){
+/* k3214 in k3222 in k3226 in eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3216(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2673,11 +2673,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
-C_save_and_reclaim((void *)f_3213,2,av);}
+C_save_and_reclaim((void *)f_3216,2,av);}
 a=C_alloc(5);
 t2=t1;
-t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3217,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:325: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3220,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:326: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -2690,8 +2690,8 @@ av2[1]=t3;
 av2[2]=((C_word*)t0)[4];
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}
 
-/* k3215 in k3211 in k3219 in k3223 in eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3217(C_word c,C_word *av){
+/* k3218 in k3214 in k3222 in k3226 in eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3220(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2701,13 +2701,13 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
-C_save_and_reclaim((void *)f_3217,2,av);}
+C_save_and_reclaim((void *)f_3220,2,av);}
 a=C_alloc(8);
 if(C_truep(C_i_equalp(((C_word*)t0)[2],t1))){
 t2=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3209,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t3,tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:326: chicken.compiler.support#qnode */
+t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3212,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t3,tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:327: chicken.compiler.support#qnode */
 t5=*((C_word*)lf[29]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -2724,10 +2724,10 @@ t2=((C_word*)t0)[4];{
 C_word *av2=av;
 av2[0]=t2;
 av2[1]=C_SCHEME_FALSE;
-f_3095(2,av2);}}}
+f_3098(2,av2);}}}
 
-/* k3219 in k3223 in eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3221(C_word c,C_word *av){
+/* k3222 in k3226 in eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3224(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2736,12 +2736,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
-C_save_and_reclaim((void *)f_3221,2,av);}
+C_save_and_reclaim((void *)f_3224,2,av);}
 a=C_alloc(5);
 t2=C_eqp(lf[35],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3213,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:325: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3216,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:326: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -2758,10 +2758,10 @@ t3=((C_word*)t0)[3];{
 C_word *av2=av;
 av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
-f_3095(2,av2);}}}
+f_3098(2,av2);}}}
 
-/* k3223 in eqv?-id in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3225(C_word c,C_word *av){
+/* k3226 in eqv?-id in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3228(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2770,12 +2770,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
-C_save_and_reclaim((void *)f_3225,2,av);}
+C_save_and_reclaim((void *)f_3228,2,av);}
 a=C_alloc(6);
 t2=C_eqp(lf[35],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3221,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:324: chicken.compiler.support#node-class */
+t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3224,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:325: chicken.compiler.support#node-class */
 t4=*((C_word*)lf[34]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -2792,10 +2792,10 @@ t3=((C_word*)t0)[3];{
 C_word *av2=av;
 av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
-f_3095(2,av2);}}}
+f_3098(2,av2);}}}
 
-/* k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3233(C_word c,C_word *av){
+/* k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3236(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2803,10 +2803,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,4)))){
-C_save_and_reclaim((void *)f_3233,2,av);}
+C_save_and_reclaim((void *)f_3236,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3236,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:337: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3239,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:338: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -2821,8 +2821,8 @@ av2[3]=C_fix(8);
 av2[4]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3236(C_word c,C_word *av){
+/* k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3239(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2831,11 +2831,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,6)))){
-C_save_and_reclaim((void *)f_3236,2,av);}
+C_save_and_reclaim((void *)f_3239,2,av);}
 a=C_alloc(5);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3239,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_6230,tmp=(C_word)a,a+=2,tmp);
-/* c-platform.scm:339: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3242,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_6233,tmp=(C_word)a,a+=2,tmp);
+/* c-platform.scm:340: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -2850,8 +2850,8 @@ av2[3]=C_fix(8);
 av2[4]=t3;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3239(C_word c,C_word *av){
+/* k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3242(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2860,11 +2860,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,6)))){
-C_save_and_reclaim((void *)f_3239,2,av);}
+C_save_and_reclaim((void *)f_3242,2,av);}
 a=C_alloc(6);
-t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_3241,tmp=(C_word)a,a+=2,tmp);
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3419,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:394: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_3244,tmp=(C_word)a,a+=2,tmp);
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3422,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:395: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -2879,8 +2879,8 @@ av2[3]=C_fix(8);
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3241(C_word c,C_word *av){
+/* rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3244(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -2898,19 +2898,19 @@ C_word t12;
 C_word t13;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(9,c,2)))){
-C_save_and_reclaim((void *)f_3241,6,av);}
+C_save_and_reclaim((void *)f_3244,6,av);}
 a=C_alloc(9);
 if(C_truep(C_i_pairp(t5))){
 t6=t5;
-t7=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_2459,tmp=(C_word)a,a+=2,tmp);
+t7=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_2461,tmp=(C_word)a,a+=2,tmp);
 t8=(
-  f_2459(t6)
+  f_2461(t6)
 );
 t9=t8;
 t10=t5;
 t11=C_u_i_car(t10);
-t12=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3416,a[2]=t1,a[3]=t5,a[4]=t4,a[5]=t9,a[6]=t11,tmp=(C_word)a,a+=7,tmp);
-/* c-platform.scm:374: chicken.compiler.support#node-class */
+t12=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3419,a[2]=t1,a[3]=t5,a[4]=t4,a[5]=t9,a[6]=t11,tmp=(C_word)a,a+=7,tmp);
+/* c-platform.scm:375: chicken.compiler.support#node-class */
 t13=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t13;
@@ -2924,16 +2924,16 @@ av2[0]=t6;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t6+1)))(2,av2);}}}
 
-/* k3267 in k3414 in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 in ... */
-static void C_ccall f_3269(C_word c,C_word *av){
+/* k3270 in k3417 in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 in ... */
+static void C_ccall f_3272(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
-C_save_and_reclaim((void *)f_3269,2,av);}
-/* c-platform.scm:375: chicken.compiler.support#make-node */
+C_save_and_reclaim((void *)f_3272,2,av);}
+/* c-platform.scm:376: chicken.compiler.support#make-node */
 t2=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -2948,29 +2948,29 @@ av2[3]=((C_word*)t0)[3];
 av2[4]=t1;
 ((C_proc)(void*)(*((C_word*)t2+1)))(5,av2);}}
 
-/* k3275 in k3414 in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 in ... */
-static void C_ccall f_3277(C_word c,C_word *av){
+/* k3278 in k3417 in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 in ... */
+static void C_ccall f_3280(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,3)))){
-C_save_and_reclaim((void *)f_3277,2,av);}
+C_save_and_reclaim((void *)f_3280,2,av);}
 a=C_alloc(6);
-/* c-platform.scm:377: cons* */
-f_2117(((C_word*)t0)[2],((C_word*)t0)[3],C_a_i_list(&a,2,((C_word*)t0)[4],t1));}
+/* c-platform.scm:378: cons* */
+f_2119(((C_word*)t0)[2],((C_word*)t0)[3],C_a_i_list(&a,2,((C_word*)t0)[4],t1));}
 
-/* k3292 in k3330 in k3334 in k3414 in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in ... */
-static void C_ccall f_3294(C_word c,C_word *av){
+/* k3295 in k3333 in k3337 in k3417 in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in ... */
+static void C_ccall f_3297(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,3)))){
-C_save_and_reclaim((void *)f_3294,2,av);}
-/* c-platform.scm:379: scheme#append */
+C_save_and_reclaim((void *)f_3297,2,av);}
+/* c-platform.scm:380: scheme#append */
 t2=*((C_word*)lf[37]+1);{
 C_word *av2;
 if(c >= 4) {
@@ -2984,20 +2984,20 @@ av2[2]=((C_word*)t0)[3];
 av2[3]=t1;
 ((C_proc)(void*)(*((C_word*)t2+1)))(4,av2);}}
 
-/* map-loop693 in k3330 in k3334 in k3414 in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in ... */
-static void C_fcall f_3296(C_word t0,C_word t1,C_word t2){
+/* map-loop694 in k3333 in k3337 in k3417 in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in ... */
+static void C_fcall f_3299(C_word t0,C_word t1,C_word t2){
 C_word tmp;
 C_word t3;
 C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,0,2)))){
-C_save_and_reclaim_args((void *)trf_3296,3,t0,t1,t2);}
+C_save_and_reclaim_args((void *)trf_3299,3,t0,t1,t2);}
 a=C_alloc(6);
 if(C_truep(C_i_pairp(t2))){
-t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3321,a[2]=((C_word*)t0)[2],a[3]=t2,a[4]=((C_word*)t0)[3],a[5]=t1,tmp=(C_word)a,a+=6,tmp);
+t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3324,a[2]=((C_word*)t0)[2],a[3]=t2,a[4]=((C_word*)t0)[3],a[5]=t1,tmp=(C_word)a,a+=6,tmp);
 t4=C_slot(t2,C_fix(0));
-/* c-platform.scm:379: g699 */
+/* c-platform.scm:380: g700 */
 t5=((C_word*)t0)[4];{
 C_word av2[3];
 av2[0]=t5;
@@ -3011,8 +3011,8 @@ av2[0]=t3;
 av2[1]=C_slot(((C_word*)t0)[5],C_fix(1));
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* k3319 in map-loop693 in k3330 in k3334 in k3414 in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in ... */
-static void C_ccall f_3321(C_word c,C_word *av){
+/* k3322 in map-loop694 in k3333 in k3337 in k3417 in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in ... */
+static void C_ccall f_3324(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3023,17 +3023,17 @@ C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_3321,2,av);}
+C_save_and_reclaim((void *)f_3324,2,av);}
 a=C_alloc(3);
 t2=C_a_i_cons(&a,2,t1,C_SCHEME_END_OF_LIST);
 t3=C_i_setslot(((C_word*)((C_word*)t0)[2])[1],C_fix(1),t2);
 t4=C_mutate(((C_word *)((C_word*)t0)[2])+1,t2);
 t5=C_slot(((C_word*)t0)[3],C_fix(1));
 t6=((C_word*)((C_word*)t0)[4])[1];
-f_3296(t6,((C_word*)t0)[5],t5);}
+f_3299(t6,((C_word*)t0)[5],t5);}
 
-/* k3330 in k3334 in k3414 in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in ... */
-static void C_ccall f_3332(C_word c,C_word *av){
+/* k3333 in k3337 in k3417 in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in ... */
+static void C_ccall f_3335(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3046,19 +3046,19 @@ C_word t7;
 C_word t8;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(12,c,3)))){
-C_save_and_reclaim((void *)f_3332,2,av);}
+C_save_and_reclaim((void *)f_3335,2,av);}
 a=C_alloc(12);
 t2=C_i_car(t1);
 t3=C_i_check_list_2(t2,lf[36]);
-t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3294,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
+t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3297,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
 t5=C_SCHEME_UNDEFINED;
 t6=(*a=C_VECTOR_TYPE|1,a[1]=t5,tmp=(C_word)a,a+=2,tmp);
-t7=C_set_block_item(t6,0,(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3296,a[2]=((C_word*)t0)[4],a[3]=t6,a[4]=((C_word*)t0)[5],a[5]=((C_word*)t0)[6],tmp=(C_word)a,a+=6,tmp));
+t7=C_set_block_item(t6,0,(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3299,a[2]=((C_word*)t0)[4],a[3]=t6,a[4]=((C_word*)t0)[5],a[5]=((C_word*)t0)[6],tmp=(C_word)a,a+=6,tmp));
 t8=((C_word*)t6)[1];
-f_3296(t8,t4,t2);}
+f_3299(t8,t4,t2);}
 
-/* k3334 in k3414 in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 in ... */
-static void C_ccall f_3336(C_word c,C_word *av){
+/* k3337 in k3417 in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 in ... */
+static void C_ccall f_3339(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3073,7 +3073,7 @@ C_word t9;
 C_word t10;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(12,c,2)))){
-C_save_and_reclaim((void *)f_3336,2,av);}
+C_save_and_reclaim((void *)f_3339,2,av);}
 a=C_alloc(12);
 t2=C_i_cdr(t1);
 t3=t2;
@@ -3082,8 +3082,8 @@ t5=t4;
 t6=(*a=C_VECTOR_TYPE|1,a[1]=t5,tmp=(C_word)a,a+=2,tmp);
 t7=((C_word*)t6)[1];
 t8=*((C_word*)lf[29]+1);
-t9=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3332,a[2]=((C_word*)t0)[2],a[3]=t3,a[4]=t6,a[5]=t8,a[6]=t7,tmp=(C_word)a,a+=7,tmp);
-/* c-platform.scm:379: chicken.compiler.support#node-parameters */
+t9=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3335,a[2]=((C_word*)t0)[2],a[3]=t3,a[4]=t6,a[5]=t8,a[6]=t7,tmp=(C_word)a,a+=7,tmp);
+/* c-platform.scm:380: chicken.compiler.support#node-parameters */
 t10=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -3096,8 +3096,8 @@ av2[1]=t9;
 av2[2]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t10+1)))(3,av2);}}
 
-/* k3337 in k3414 in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 in ... */
-static void C_ccall f_3339(C_word c,C_word *av){
+/* k3340 in k3417 in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 in ... */
+static void C_ccall f_3342(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3108,7 +3108,7 @@ C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(12,c,4)))){
-C_save_and_reclaim((void *)f_3339,2,av);}
+C_save_and_reclaim((void *)f_3342,2,av);}
 a=C_alloc(12);
 if(C_truep(t1)){
 t2=t1;
@@ -3120,9 +3120,9 @@ av2[1]=t2;
 else{
 t2=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3353,a[2]=((C_word*)t0)[2],a[3]=t3,tmp=(C_word)a,a+=4,tmp);
-t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3357,a[2]=t4,a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:392: chicken.compiler.support#make-node */
+t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3356,a[2]=((C_word*)t0)[2],a[3]=t3,tmp=(C_word)a,a+=4,tmp);
+t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3360,a[2]=t4,a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:393: chicken.compiler.support#make-node */
 t6=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -3137,16 +3137,16 @@ av2[3]=lf[40];
 av2[4]=C_SCHEME_END_OF_LIST;
 ((C_proc)(void*)(*((C_word*)t6+1)))(5,av2);}}}
 
-/* k3351 in k3337 in k3414 in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in ... */
-static void C_ccall f_3353(C_word c,C_word *av){
+/* k3354 in k3340 in k3417 in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in ... */
+static void C_ccall f_3356(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
-C_save_and_reclaim((void *)f_3353,2,av);}
-/* c-platform.scm:390: chicken.compiler.support#make-node */
+C_save_and_reclaim((void *)f_3356,2,av);}
+/* c-platform.scm:391: chicken.compiler.support#make-node */
 t2=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -3161,21 +3161,21 @@ av2[3]=((C_word*)t0)[3];
 av2[4]=t1;
 ((C_proc)(void*)(*((C_word*)t2+1)))(5,av2);}}
 
-/* k3355 in k3337 in k3414 in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in ... */
-static void C_ccall f_3357(C_word c,C_word *av){
+/* k3358 in k3340 in k3417 in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in ... */
+static void C_ccall f_3360(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,3)))){
-C_save_and_reclaim((void *)f_3357,2,av);}
+C_save_and_reclaim((void *)f_3360,2,av);}
 a=C_alloc(6);
-/* c-platform.scm:392: cons* */
-f_2117(((C_word*)t0)[2],t1,C_a_i_list(&a,2,((C_word*)t0)[3],((C_word*)t0)[4]));}
+/* c-platform.scm:393: cons* */
+f_2119(((C_word*)t0)[2],t1,C_a_i_list(&a,2,((C_word*)t0)[3],((C_word*)t0)[4]));}
 
-/* k3378 in k3401 in k3410 in k3414 in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in ... */
-static void C_ccall f_3380(C_word c,C_word *av){
+/* k3381 in k3404 in k3413 in k3417 in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in ... */
+static void C_ccall f_3383(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3185,13 +3185,13 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(9,c,4)))){
-C_save_and_reclaim((void *)f_3380,2,av);}
+C_save_and_reclaim((void *)f_3383,2,av);}
 a=C_alloc(9);
 if(C_truep(t1)){
 t2=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3395,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t3,tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:387: chicken.compiler.support#make-node */
+t4=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3398,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t3,tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:388: chicken.compiler.support#make-node */
 t5=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -3210,10 +3210,10 @@ t2=((C_word*)t0)[4];{
 C_word *av2=av;
 av2[0]=t2;
 av2[1]=C_SCHEME_FALSE;
-f_3339(2,av2);}}}
+f_3342(2,av2);}}}
 
-/* k3393 in k3378 in k3401 in k3410 in k3414 in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in ... */
-static void C_ccall f_3395(C_word c,C_word *av){
+/* k3396 in k3381 in k3404 in k3413 in k3417 in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in ... */
+static void C_ccall f_3398(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3222,11 +3222,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(9,c,4)))){
-C_save_and_reclaim((void *)f_3395,2,av);}
+C_save_and_reclaim((void *)f_3398,2,av);}
 a=C_alloc(9);
 t2=C_i_cadr(((C_word*)t0)[2]);
 t3=C_a_i_list3(&a,3,t1,((C_word*)t0)[3],t2);
-/* c-platform.scm:385: chicken.compiler.support#make-node */
+/* c-platform.scm:386: chicken.compiler.support#make-node */
 t4=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -3241,8 +3241,8 @@ av2[3]=((C_word*)t0)[5];
 av2[4]=t3;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* k3401 in k3410 in k3414 in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in ... */
-static void C_ccall f_3403(C_word c,C_word *av){
+/* k3404 in k3413 in k3417 in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in ... */
+static void C_ccall f_3406(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3251,12 +3251,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
-C_save_and_reclaim((void *)f_3403,2,av);}
+C_save_and_reclaim((void *)f_3406,2,av);}
 a=C_alloc(5);
 t2=C_i_car(t1);
 if(C_truep((C_truep(C_eqp(t2,lf[41]))?C_SCHEME_TRUE:(C_truep(C_eqp(t2,lf[42]))?C_SCHEME_TRUE:C_SCHEME_FALSE)))){
-t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3380,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:384: chicken.compiler.support#intrinsic? */
+t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3383,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:385: chicken.compiler.support#intrinsic? */
 t4=*((C_word*)lf[44]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -3273,10 +3273,10 @@ t3=((C_word*)t0)[4];{
 C_word *av2=av;
 av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
-f_3339(2,av2);}}}
+f_3342(2,av2);}}}
 
-/* k3410 in k3414 in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 in ... */
-static void C_ccall f_3412(C_word c,C_word *av){
+/* k3413 in k3417 in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 in ... */
+static void C_ccall f_3415(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3287,15 +3287,15 @@ C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
-C_save_and_reclaim((void *)f_3412,2,av);}
+C_save_and_reclaim((void *)f_3415,2,av);}
 a=C_alloc(5);
 t2=C_eqp(lf[35],t1);
 if(C_truep(t2)){
 t3=C_i_length(((C_word*)t0)[2]);
 t4=C_eqp(C_fix(2),t3);
 if(C_truep(t4)){
-t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3403,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:382: chicken.compiler.support#node-parameters */
+t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3406,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:383: chicken.compiler.support#node-parameters */
 t6=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -3312,16 +3312,16 @@ t5=((C_word*)t0)[4];{
 C_word *av2=av;
 av2[0]=t5;
 av2[1]=C_SCHEME_FALSE;
-f_3339(2,av2);}}}
+f_3342(2,av2);}}}
 else{
 t3=((C_word*)t0)[4];{
 C_word *av2=av;
 av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
-f_3339(2,av2);}}}
+f_3342(2,av2);}}}
 
-/* k3414 in rewrite-apply in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3416(C_word c,C_word *av){
+/* k3417 in rewrite-apply in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3419(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3337,19 +3337,19 @@ C_word t10;
 C_word t11;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(16,c,2)))){
-C_save_and_reclaim((void *)f_3416,2,av);}
+C_save_and_reclaim((void *)f_3419,2,av);}
 a=C_alloc(16);
 t2=C_eqp(lf[31],t1);
 if(C_truep(t2)){
 t3=C_a_i_list1(&a,1,C_SCHEME_FALSE);
 t4=t3;
-t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3269,a[2]=((C_word*)t0)[2],a[3]=t4,tmp=(C_word)a,a+=4,tmp);
+t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3272,a[2]=((C_word*)t0)[2],a[3]=t4,tmp=(C_word)a,a+=4,tmp);
 t6=((C_word*)t0)[3];
 t7=C_i_car(t6);
 t8=t7;
-t9=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3277,a[2]=t5,a[3]=t8,a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
-t10=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3336,a[2]=t9,a[3]=((C_word*)t0)[5],tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:379: chicken.base#butlast */
+t9=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3280,a[2]=t5,a[3]=t8,a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
+t10=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3339,a[2]=t9,a[3]=((C_word*)t0)[5],tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:380: chicken.base#butlast */
 t11=*((C_word*)lf[38]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -3362,9 +3362,9 @@ av2[1]=t10;
 av2[2]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t11+1)))(3,av2);}}
 else{
-t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3339,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[4],a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
-t4=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3412,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t3,a[5]=((C_word*)t0)[6],tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:380: chicken.compiler.support#node-class */
+t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3342,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[4],a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
+t4=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3415,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t3,a[5]=((C_word*)t0)[6],tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:381: chicken.compiler.support#node-class */
 t5=*((C_word*)lf[34]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -3377,8 +3377,8 @@ av2[1]=t4;
 av2[2]=((C_word*)t0)[6];
 ((C_proc)(void*)(*((C_word*)t5+1)))(3,av2);}}}
 
-/* k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3419(C_word c,C_word *av){
+/* k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3422(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3386,10 +3386,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,4)))){
-C_save_and_reclaim((void *)f_3419,2,av);}
+C_save_and_reclaim((void *)f_3422,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3422,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:395: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3425,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:396: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -3404,8 +3404,8 @@ av2[3]=C_fix(8);
 av2[4]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_3422(C_word c,C_word *av){
+/* k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_3425(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3414,24 +3414,24 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,5)))){
-C_save_and_reclaim((void *)f_3422,2,av);}
+C_save_and_reclaim((void *)f_3425,2,av);}
 a=C_alloc(6);
-t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_3424,tmp=(C_word)a,a+=2,tmp);
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3492,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:416: rewrite-c..r */
-f_3424(t3,lf[913],lf[914],lf[915]);}
+t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_3427,tmp=(C_word)a,a+=2,tmp);
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3495,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:417: rewrite-c..r */
+f_3427(t3,lf[913],lf[914],lf[915]);}
 
-/* rewrite-c..r in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 in ... */
-static void C_fcall f_3424(C_word t1,C_word t2,C_word t3,C_word t4){
+/* rewrite-c..r in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 in ... */
+static void C_fcall f_3427(C_word t1,C_word t2,C_word t3,C_word t4){
 C_word tmp;
 C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(4,0,6)))){
-C_save_and_reclaim_args((void *)trf_3424,4,t1,t2,t3,t4);}
+C_save_and_reclaim_args((void *)trf_3427,4,t1,t2,t3,t4);}
 a=C_alloc(4);
-t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3430,a[2]=t4,a[3]=t3,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:399: chicken.compiler.optimizer#rewrite */
+t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3433,a[2]=t4,a[3]=t3,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:400: chicken.compiler.optimizer#rewrite */
 t6=*((C_word*)lf[46]+1);{
 C_word av2[5];
 av2[0]=t6;
@@ -3441,8 +3441,8 @@ av2[3]=C_fix(8);
 av2[4]=t5;
 ((C_proc)(void*)(*((C_word*)t6+1)))(5,av2);}}
 
-/* a3429 in rewrite-c..r in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in ... */
-static void C_ccall f_3430(C_word c,C_word *av){
+/* a3432 in rewrite-c..r in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in ... */
+static void C_ccall f_3433(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3456,13 +3456,13 @@ C_word t8;
 C_word t9;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,3)))){
-C_save_and_reclaim((void *)f_3430,6,av);}
+C_save_and_reclaim((void *)f_3433,6,av);}
 a=C_alloc(6);
 t6=C_i_length(t5);
 t7=C_eqp(t6,C_fix(1));
 if(C_truep(t7)){
-t8=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3442,a[2]=t5,a[3]=t4,a[4]=((C_word*)t0)[2],a[5]=((C_word*)t0)[3],tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:405: scheme#call-with-current-continuation */
+t8=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3445,a[2]=t5,a[3]=t4,a[4]=((C_word*)t0)[2],a[5]=((C_word*)t0)[3],tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:406: scheme#call-with-current-continuation */
 t9=*((C_word*)lf[45]+1);{
 C_word *av2=av;
 av2[0]=t9;
@@ -3476,8 +3476,8 @@ av2[0]=t8;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t8+1)))(2,av2);}}}
 
-/* a3441 in a3429 in rewrite-c..r in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in ... */
-static void C_ccall f_3442(C_word c,C_word *av){
+/* a3444 in a3432 in rewrite-c..r in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in ... */
+static void C_ccall f_3445(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3492,17 +3492,17 @@ C_word t9;
 C_word t10;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(11,c,4)))){
-C_save_and_reclaim((void *)f_3442,3,av);}
+C_save_and_reclaim((void *)f_3445,3,av);}
 a=C_alloc(11);
 t3=((C_word*)t0)[2];
 t4=C_i_car(t3);
 t5=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t6=t5;
-t7=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3461,a[2]=((C_word*)t0)[3],a[3]=t1,a[4]=t6,tmp=(C_word)a,a+=5,tmp);
+t7=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3464,a[2]=((C_word*)t0)[3],a[3]=t1,a[4]=t6,tmp=(C_word)a,a+=5,tmp);
 t8=(C_truep(*((C_word*)lf[26]+1))?((C_word*)t0)[4]:C_SCHEME_FALSE);
 if(C_truep(t8)){
 t9=C_a_i_list1(&a,1,((C_word*)t0)[4]);
-/* c-platform.scm:412: chicken.compiler.support#make-node */
+/* c-platform.scm:413: chicken.compiler.support#make-node */
 t10=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -3519,7 +3519,7 @@ av2[4]=((C_word*)t0)[2];
 else{
 if(C_truep(((C_word*)t0)[5])){
 t9=C_a_i_list1(&a,1,((C_word*)t0)[5]);
-/* c-platform.scm:413: chicken.compiler.support#make-node */
+/* c-platform.scm:414: chicken.compiler.support#make-node */
 t10=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -3534,7 +3534,7 @@ av2[3]=t9;
 av2[4]=((C_word*)t0)[2];
 ((C_proc)(void*)(*((C_word*)t10+1)))(5,av2);}}
 else{
-/* c-platform.scm:414: return */
+/* c-platform.scm:415: return */
 t9=t2;{
 C_word *av2=av;
 av2[0]=t9;
@@ -3542,8 +3542,8 @@ av2[1]=t7;
 av2[2]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t9+1)))(3,av2);}}}}
 
-/* k3459 in a3441 in a3429 in rewrite-c..r in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in ... */
-static void C_ccall f_3461(C_word c,C_word *av){
+/* k3462 in a3444 in a3432 in rewrite-c..r in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in ... */
+static void C_ccall f_3464(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3551,10 +3551,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_3461,2,av);}
+C_save_and_reclaim((void *)f_3464,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:408: chicken.compiler.support#make-node */
+/* c-platform.scm:409: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -3569,22 +3569,7 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 in ... */
-static void C_ccall f_3492(C_word c,C_word *av){
-C_word tmp;
-C_word t0=av[0];
-C_word t1=av[1];
-C_word t2;
-C_word t3;
-C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(4,c,4)))){
-C_save_and_reclaim((void *)f_3492,2,av);}
-a=C_alloc(4);
-t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3495,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:417: rewrite-c..r */
-f_3424(t2,lf[910],lf[911],lf[912]);}
-
-/* k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in ... */
+/* k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 in ... */
 static void C_ccall f_3495(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -3597,9 +3582,9 @@ C_save_and_reclaim((void *)f_3495,2,av);
 a=C_alloc(4);
 t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3498,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
 /* c-platform.scm:418: rewrite-c..r */
-f_3424(t2,lf[907],lf[908],lf[909]);}
+f_3427(t2,lf[910],lf[911],lf[912]);}
 
-/* k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in ... */
+/* k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in ... */
 static void C_ccall f_3498(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -3612,9 +3597,9 @@ C_save_and_reclaim((void *)f_3498,2,av);
 a=C_alloc(4);
 t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3501,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
 /* c-platform.scm:419: rewrite-c..r */
-f_3424(t2,lf[904],lf[905],lf[906]);}
+f_3427(t2,lf[907],lf[908],lf[909]);}
 
-/* k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in ... */
+/* k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in ... */
 static void C_ccall f_3501(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -3627,9 +3612,9 @@ C_save_and_reclaim((void *)f_3501,2,av);
 a=C_alloc(4);
 t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3504,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
 /* c-platform.scm:420: rewrite-c..r */
-f_3424(t2,lf[880],lf[902],lf[903]);}
+f_3427(t2,lf[904],lf[905],lf[906]);}
 
-/* k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in ... */
+/* k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in ... */
 static void C_ccall f_3504(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -3637,28 +3622,43 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,4)))){
+if(C_unlikely(!C_demand(C_calculate_demand(4,c,4)))){
 C_save_and_reclaim((void *)f_3504,2,av);}
-a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3507,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+a=C_alloc(4);
+t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3507,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
 /* c-platform.scm:421: rewrite-c..r */
-f_3424(t2,lf[859],lf[900],lf[901]);}
+f_3427(t2,lf[880],lf[902],lf[903]);}
 
-/* k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in ... */
+/* k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in ... */
 static void C_ccall f_3507(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word t3;
+C_word *a;
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,4)))){
+C_save_and_reclaim((void *)f_3507,2,av);}
+a=C_alloc(3);
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3510,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:422: rewrite-c..r */
+f_3427(t2,lf[859],lf[900],lf[901]);}
+
+/* k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in ... */
+static void C_ccall f_3510(C_word c,C_word *av){
+C_word tmp;
+C_word t0=av[0];
+C_word t1=av[1];
+C_word t2;
+C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,6)))){
-C_save_and_reclaim((void *)f_3507,2,av);}
+C_save_and_reclaim((void *)f_3510,2,av);}
 a=C_alloc(6);
-t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_3508,tmp=(C_word)a,a+=2,tmp);
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3534,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:428: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_3511,tmp=(C_word)a,a+=2,tmp);
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3537,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:429: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -3673,8 +3673,8 @@ av2[3]=C_fix(8);
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* rvalues in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in ... */
-static void C_ccall f_3508(C_word c,C_word *av){
+/* rvalues in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in ... */
+static void C_ccall f_3511(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3689,14 +3689,14 @@ C_word t9;
 C_word t10;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_3508,6,av);}
+C_save_and_reclaim((void *)f_3511,6,av);}
 a=C_alloc(6);
 t6=C_i_length(t5);
 t7=C_eqp(t6,C_fix(1));
 if(C_truep(t7)){
 t8=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t9=C_a_i_cons(&a,2,t4,t5);
-/* c-platform.scm:427: chicken.compiler.support#make-node */
+/* c-platform.scm:428: chicken.compiler.support#make-node */
 t10=*((C_word*)lf[22]+1);{
 C_word *av2=av;
 av2[0]=t10;
@@ -3712,8 +3712,8 @@ av2[0]=t8;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t8+1)))(2,av2);}}}
 
-/* k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in ... */
-static void C_ccall f_3534(C_word c,C_word *av){
+/* k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in ... */
+static void C_ccall f_3537(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3721,10 +3721,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,4)))){
-C_save_and_reclaim((void *)f_3534,2,av);}
+C_save_and_reclaim((void *)f_3537,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3537,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:429: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3540,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:430: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -3739,8 +3739,8 @@ av2[3]=C_fix(8);
 av2[4]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in ... */
-static void C_ccall f_3537(C_word c,C_word *av){
+/* k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in ... */
+static void C_ccall f_3540(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3749,11 +3749,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,6)))){
-C_save_and_reclaim((void *)f_3537,2,av);}
+C_save_and_reclaim((void *)f_3540,2,av);}
 a=C_alloc(6);
-t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_3539,tmp=(C_word)a,a+=2,tmp);
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3704,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:460: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_3542,tmp=(C_word)a,a+=2,tmp);
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3707,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:461: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -3768,8 +3768,8 @@ av2[3]=C_fix(8);
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in ... */
-static void C_ccall f_3539(C_word c,C_word *av){
+/* rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in ... */
+static void C_ccall f_3542(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3787,7 +3787,7 @@ C_word t12;
 C_word t13;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
-C_save_and_reclaim((void *)f_3539,6,av);}
+C_save_and_reclaim((void *)f_3542,6,av);}
 a=C_alloc(7);
 t6=C_i_length(t5);
 t7=C_eqp(C_fix(2),t6);
@@ -3796,8 +3796,8 @@ t8=C_i_car(t5);
 t9=t8;
 t10=C_i_cadr(t5);
 t11=t10;
-t12=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3696,a[2]=t1,a[3]=t9,a[4]=t11,a[5]=t4,a[6]=t2,tmp=(C_word)a,a+=7,tmp);
-/* c-platform.scm:438: chicken.compiler.support#node-class */
+t12=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3699,a[2]=t1,a[3]=t9,a[4]=t11,a[5]=t4,a[6]=t2,tmp=(C_word)a,a+=7,tmp);
+/* c-platform.scm:439: chicken.compiler.support#node-class */
 t13=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t13;
@@ -3811,8 +3811,8 @@ av2[0]=t8;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t8+1)))(2,av2);}}}
 
-/* k3571 in k3686 in k3690 in k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in ... */
-static void C_ccall f_3573(C_word c,C_word *av){
+/* k3574 in k3689 in k3693 in k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in ... */
+static void C_ccall f_3576(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3821,12 +3821,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
-C_save_and_reclaim((void *)f_3573,2,av);}
+C_save_and_reclaim((void *)f_3576,2,av);}
 a=C_alloc(7);
 t2=t1;
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3684,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=t2,tmp=(C_word)a,a+=7,tmp);
-/* c-platform.scm:442: chicken.compiler.support#node-class */
+t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3687,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=t2,tmp=(C_word)a,a+=7,tmp);
+/* c-platform.scm:443: chicken.compiler.support#node-class */
 t4=*((C_word*)lf[34]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -3845,8 +3845,8 @@ av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* k3598 in k3678 in k3682 in k3571 in k3686 in k3690 in k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in ... */
-static void C_ccall f_3600(C_word c,C_word *av){
+/* k3601 in k3681 in k3685 in k3574 in k3689 in k3693 in k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in ... */
+static void C_ccall f_3603(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3855,11 +3855,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
-C_save_and_reclaim((void *)f_3600,2,av);}
+C_save_and_reclaim((void *)f_3603,2,av);}
 a=C_alloc(8);
 t2=t1;
-t3=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_3603,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],a[6]=((C_word*)t0)[5],a[7]=((C_word*)t0)[6],tmp=(C_word)a,a+=8,tmp);
-/* c-platform.scm:447: chicken.base#gensym */
+t3=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_3606,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],a[6]=((C_word*)t0)[5],a[7]=((C_word*)t0)[6],tmp=(C_word)a,a+=8,tmp);
+/* c-platform.scm:448: chicken.base#gensym */
 t4=*((C_word*)lf[50]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -3872,8 +3872,8 @@ av2[1]=t3;
 av2[2]=lf[55];
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}
 
-/* k3601 in k3598 in k3678 in k3682 in k3571 in k3686 in k3690 in k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in ... */
-static void C_ccall f_3603(C_word c,C_word *av){
+/* k3604 in k3601 in k3681 in k3685 in k3574 in k3689 in k3693 in k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in ... */
+static void C_ccall f_3606(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3883,12 +3883,12 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(11,c,2)))){
-C_save_and_reclaim((void *)f_3603,2,av);}
+C_save_and_reclaim((void *)f_3606,2,av);}
 a=C_alloc(11);
 t2=t1;
-t3=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_3606,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t2,a[6]=((C_word*)t0)[5],a[7]=((C_word*)t0)[6],tmp=(C_word)a,a+=8,tmp);
-t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3673,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:448: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_3609,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t2,a[6]=((C_word*)t0)[5],a[7]=((C_word*)t0)[6],tmp=(C_word)a,a+=8,tmp);
+t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3676,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:449: chicken.compiler.support#node-parameters */
 t5=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -3901,8 +3901,8 @@ av2[1]=t4;
 av2[2]=((C_word*)t0)[7];
 ((C_proc)(void*)(*((C_word*)t5+1)))(3,av2);}}
 
-/* k3604 in k3601 in k3598 in k3678 in k3682 in k3571 in k3686 in k3690 in k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in ... */
-static void C_ccall f_3606(C_word c,C_word *av){
+/* k3607 in k3604 in k3601 in k3681 in k3685 in k3574 in k3689 in k3693 in k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in ... */
+static void C_ccall f_3609(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3913,13 +3913,13 @@ C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(15,c,2)))){
-C_save_and_reclaim((void *)f_3606,2,av);}
+C_save_and_reclaim((void *)f_3609,2,av);}
 a=C_alloc(15);
 t2=C_a_i_list1(&a,1,((C_word*)t0)[2]);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3621,a[2]=((C_word*)t0)[3],a[3]=t3,a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[2],tmp=(C_word)a,a+=6,tmp);
-t5=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3665,a[2]=((C_word*)t0)[5],a[3]=t4,a[4]=((C_word*)t0)[6],a[5]=((C_word*)t0)[7],tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:453: chicken.base#gensym */
+t4=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3624,a[2]=((C_word*)t0)[3],a[3]=t3,a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[2],tmp=(C_word)a,a+=6,tmp);
+t5=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3668,a[2]=((C_word*)t0)[5],a[3]=t4,a[4]=((C_word*)t0)[6],a[5]=((C_word*)t0)[7],tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:454: chicken.base#gensym */
 t6=*((C_word*)lf[50]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -3932,8 +3932,8 @@ av2[1]=t5;
 av2[2]=lf[51];
 ((C_proc)(void*)(*((C_word*)t6+1)))(3,av2);}}
 
-/* k3619 in k3604 in k3601 in k3598 in k3678 in k3682 in k3571 in k3686 in k3690 in k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in ... */
-static void C_ccall f_3621(C_word c,C_word *av){
+/* k3622 in k3607 in k3604 in k3601 in k3681 in k3685 in k3574 in k3689 in k3693 in k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in ... */
+static void C_ccall f_3624(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3945,14 +3945,14 @@ C_word t6;
 C_word t7;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(13,c,2)))){
-C_save_and_reclaim((void *)f_3621,2,av);}
+C_save_and_reclaim((void *)f_3624,2,av);}
 a=C_alloc(13);
 t2=t1;
-t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3625,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
+t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3628,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
 t4=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t5=t4;
-t6=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3637,a[2]=((C_word*)t0)[4],a[3]=t3,a[4]=t5,tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:459: chicken.compiler.support#varnode */
+t6=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3640,a[2]=((C_word*)t0)[4],a[3]=t3,a[4]=t5,tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:460: chicken.compiler.support#varnode */
 t7=*((C_word*)lf[49]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -3965,8 +3965,8 @@ av2[1]=t6;
 av2[2]=((C_word*)t0)[5];
 ((C_proc)(void*)(*((C_word*)t7+1)))(3,av2);}}
 
-/* k3623 in k3619 in k3604 in k3601 in k3598 in k3678 in k3682 in k3571 in k3686 in k3690 in k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in ... */
-static void C_ccall f_3625(C_word c,C_word *av){
+/* k3626 in k3622 in k3607 in k3604 in k3601 in k3681 in k3685 in k3574 in k3689 in k3693 in k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in ... */
+static void C_ccall f_3628(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -3974,10 +3974,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_3625,2,av);}
+C_save_and_reclaim((void *)f_3628,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:449: chicken.compiler.support#make-node */
+/* c-platform.scm:450: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -3992,8 +3992,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k3635 in k3619 in k3604 in k3601 in k3598 in k3678 in k3682 in k3571 in k3686 in k3690 in k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in ... */
-static void C_ccall f_3637(C_word c,C_word *av){
+/* k3638 in k3622 in k3607 in k3604 in k3601 in k3681 in k3685 in k3574 in k3689 in k3693 in k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in ... */
+static void C_ccall f_3640(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -4001,10 +4001,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_3637,2,av);}
+C_save_and_reclaim((void *)f_3640,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:457: chicken.compiler.support#make-node */
+/* c-platform.scm:458: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -4019,8 +4019,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k3647 in k3663 in k3604 in k3601 in k3598 in k3678 in k3682 in k3571 in k3686 in k3690 in k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in ... */
-static void C_ccall f_3649(C_word c,C_word *av){
+/* k3650 in k3666 in k3607 in k3604 in k3601 in k3681 in k3685 in k3574 in k3689 in k3693 in k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in ... */
+static void C_ccall f_3652(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -4028,10 +4028,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,4)))){
-C_save_and_reclaim((void *)f_3649,2,av);}
+C_save_and_reclaim((void *)f_3652,2,av);}
 a=C_alloc(3);
 t2=C_a_i_list1(&a,1,t1);
-/* c-platform.scm:451: chicken.compiler.support#make-node */
+/* c-platform.scm:452: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -4046,8 +4046,8 @@ av2[3]=((C_word*)t0)[3];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k3659 in k3663 in k3604 in k3601 in k3598 in k3678 in k3682 in k3571 in k3686 in k3690 in k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in ... */
-static void C_ccall f_3661(C_word c,C_word *av){
+/* k3662 in k3666 in k3607 in k3604 in k3601 in k3681 in k3685 in k3574 in k3689 in k3693 in k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in ... */
+static void C_ccall f_3664(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -4055,10 +4055,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(9,c,4)))){
-C_save_and_reclaim((void *)f_3661,2,av);}
+C_save_and_reclaim((void *)f_3664,2,av);}
 a=C_alloc(9);
 t2=C_a_i_list3(&a,3,((C_word*)t0)[2],((C_word*)t0)[3],t1);
-/* c-platform.scm:454: chicken.compiler.support#make-node */
+/* c-platform.scm:455: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -4073,8 +4073,8 @@ av2[3]=((C_word*)t0)[5];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k3663 in k3604 in k3601 in k3598 in k3678 in k3682 in k3571 in k3686 in k3690 in k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in ... */
-static void C_ccall f_3665(C_word c,C_word *av){
+/* k3666 in k3607 in k3604 in k3601 in k3681 in k3685 in k3574 in k3689 in k3693 in k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in ... */
+static void C_ccall f_3668(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -4088,16 +4088,16 @@ C_word t8;
 C_word t9;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(28,c,2)))){
-C_save_and_reclaim((void *)f_3665,2,av);}
+C_save_and_reclaim((void *)f_3668,2,av);}
 a=C_alloc(28);
 t2=C_a_i_list1(&a,1,((C_word*)t0)[2]);
 t3=C_a_i_list4(&a,4,t1,C_SCHEME_FALSE,t2,C_fix(0));
 t4=t3;
-t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3649,a[2]=((C_word*)t0)[3],a[3]=t4,tmp=(C_word)a,a+=4,tmp);
+t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3652,a[2]=((C_word*)t0)[3],a[3]=t4,tmp=(C_word)a,a+=4,tmp);
 t6=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t7=t6;
-t8=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3661,a[2]=((C_word*)t0)[4],a[3]=((C_word*)t0)[5],a[4]=t5,a[5]=t7,tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:456: chicken.compiler.support#varnode */
+t8=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3664,a[2]=((C_word*)t0)[4],a[3]=((C_word*)t0)[5],a[4]=t5,a[5]=t7,tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:457: chicken.compiler.support#varnode */
 t9=*((C_word*)lf[49]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -4110,16 +4110,16 @@ av2[1]=t8;
 av2[2]=((C_word*)t0)[2];
 ((C_proc)(void*)(*((C_word*)t9+1)))(3,av2);}}
 
-/* k3671 in k3601 in k3598 in k3678 in k3682 in k3571 in k3686 in k3690 in k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in ... */
-static void C_ccall f_3673(C_word c,C_word *av){
+/* k3674 in k3604 in k3601 in k3681 in k3685 in k3574 in k3689 in k3693 in k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in ... */
+static void C_ccall f_3676(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
-C_save_and_reclaim((void *)f_3673,2,av);}
-/* c-platform.scm:448: chicken.compiler.support#debugging */
+C_save_and_reclaim((void *)f_3676,2,av);}
+/* c-platform.scm:449: chicken.compiler.support#debugging */
 t2=*((C_word*)lf[52]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -4134,8 +4134,8 @@ av2[3]=lf[54];
 av2[4]=t1;
 ((C_proc)(void*)(*((C_word*)t2+1)))(5,av2);}}
 
-/* k3678 in k3682 in k3571 in k3686 in k3690 in k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in ... */
-static void C_ccall f_3680(C_word c,C_word *av){
+/* k3681 in k3685 in k3574 in k3689 in k3693 in k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in ... */
+static void C_ccall f_3683(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -4146,15 +4146,15 @@ C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
-C_save_and_reclaim((void *)f_3680,2,av);}
+C_save_and_reclaim((void *)f_3683,2,av);}
 a=C_alloc(7);
 t2=C_i_caddr(t1);
 if(C_truep(C_i_listp(t2))){
 t3=C_u_i_length(t2);
 t4=C_eqp(C_fix(2),t3);
 if(C_truep(t4)){
-t5=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3600,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
-/* c-platform.scm:446: chicken.base#gensym */
+t5=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3603,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
+/* c-platform.scm:447: chicken.base#gensym */
 t6=*((C_word*)lf[50]+1);{
 C_word *av2=av;
 av2[0]=t6;
@@ -4173,8 +4173,8 @@ av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* k3682 in k3571 in k3686 in k3690 in k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in ... */
-static void C_ccall f_3684(C_word c,C_word *av){
+/* k3685 in k3574 in k3689 in k3693 in k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in ... */
+static void C_ccall f_3687(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -4183,12 +4183,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
-C_save_and_reclaim((void *)f_3684,2,av);}
+C_save_and_reclaim((void *)f_3687,2,av);}
 a=C_alloc(7);
 t2=C_eqp(lf[47],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3680,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
-/* c-platform.scm:443: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3683,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
+/* c-platform.scm:444: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -4207,8 +4207,8 @@ av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* k3686 in k3690 in k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in ... */
-static void C_ccall f_3688(C_word c,C_word *av){
+/* k3689 in k3693 in k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in ... */
+static void C_ccall f_3691(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -4217,12 +4217,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_3688,2,av);}
+C_save_and_reclaim((void *)f_3691,2,av);}
 a=C_alloc(6);
 t2=C_i_car(t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3573,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:441: chicken.compiler.support#db-get */
+t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3576,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:442: chicken.compiler.support#db-get */
 t4=*((C_word*)lf[56]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -4243,8 +4243,8 @@ av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* k3690 in k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in ... */
-static void C_ccall f_3692(C_word c,C_word *av){
+/* k3693 in k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in ... */
+static void C_ccall f_3695(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -4253,12 +4253,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
-C_save_and_reclaim((void *)f_3692,2,av);}
+C_save_and_reclaim((void *)f_3695,2,av);}
 a=C_alloc(7);
 t2=C_eqp(lf[35],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3688,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
-/* c-platform.scm:440: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3691,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
+/* c-platform.scm:441: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -4277,8 +4277,8 @@ av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* k3694 in rewrite-c-w-v in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in ... */
-static void C_ccall f_3696(C_word c,C_word *av){
+/* k3697 in rewrite-c-w-v in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in ... */
+static void C_ccall f_3699(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -4287,12 +4287,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
-C_save_and_reclaim((void *)f_3696,2,av);}
+C_save_and_reclaim((void *)f_3699,2,av);}
 a=C_alloc(7);
 t2=C_eqp(lf[35],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3692,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
-/* c-platform.scm:439: chicken.compiler.support#node-class */
+t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3695,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
+/* c-platform.scm:440: chicken.compiler.support#node-class */
 t4=*((C_word*)lf[34]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -4311,8 +4311,8 @@ av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in ... */
-static void C_ccall f_3704(C_word c,C_word *av){
+/* k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in ... */
+static void C_ccall f_3707(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -4320,10 +4320,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,4)))){
-C_save_and_reclaim((void *)f_3704,2,av);}
+C_save_and_reclaim((void *)f_3707,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3707,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:461: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3710,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:462: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -4338,36 +4338,7 @@ av2[3]=C_fix(8);
 av2[4]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in ... */
-static void C_ccall f_3707(C_word c,C_word *av){
-C_word tmp;
-C_word t0=av[0];
-C_word t1=av[1];
-C_word t2;
-C_word t3;
-C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_3707,2,av);}
-a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3710,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:463: chicken.compiler.optimizer#rewrite */
-t3=*((C_word*)lf[46]+1);{
-C_word *av2;
-if(c >= 7) {
-  av2=av;
-} else {
-  av2=C_alloc(7);
-}
-av2[0]=t3;
-av2[1]=t2;
-av2[2]=lf[898];
-av2[3]=C_fix(13);
-av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[899];
-av2[6]=C_SCHEME_TRUE;
-((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
-
-/* k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in ... */
+/* k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in ... */
 static void C_ccall f_3710(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4389,14 +4360,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[42];
+av2[2]=lf[898];
 av2[3]=C_fix(13);
 av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[897];
+av2[5]=lf[899];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in ... */
+/* k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in ... */
 static void C_ccall f_3713(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4418,14 +4389,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[894];
+av2[2]=lf[42];
 av2[3]=C_fix(13);
-av2[4]=C_fix(2);
-av2[5]=lf[896];
-av2[6]=C_SCHEME_FALSE;
+av2[4]=C_SCHEME_FALSE;
+av2[5]=lf[897];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in ... */
+/* k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in ... */
 static void C_ccall f_3716(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4450,11 +4421,11 @@ av2[1]=t2;
 av2[2]=lf[894];
 av2[3]=C_fix(13);
 av2[4]=C_fix(2);
-av2[5]=lf[895];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[896];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in k3005 in ... */
+/* k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in ... */
 static void C_ccall f_3719(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4476,14 +4447,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[891];
+av2[2]=lf[894];
 av2[3]=C_fix(13);
 av2[4]=C_fix(2);
-av2[5]=lf[893];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[895];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in k3072 in ... */
+/* k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in k3008 in ... */
 static void C_ccall f_3722(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4508,11 +4479,11 @@ av2[1]=t2;
 av2[2]=lf[891];
 av2[3]=C_fix(13);
 av2[4]=C_fix(2);
-av2[5]=lf[892];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[893];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in k3075 in ... */
+/* k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in k3075 in ... */
 static void C_ccall f_3725(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4534,14 +4505,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[889];
+av2[2]=lf[891];
 av2[3]=C_fix(13);
 av2[4]=C_fix(2);
-av2[5]=lf[890];
+av2[5]=lf[892];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in k3231 in ... */
+/* k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in k3078 in ... */
 static void C_ccall f_3728(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4553,7 +4524,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_3728,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3731,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:471: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:470: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -4563,14 +4534,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[842];
-av2[3]=C_fix(2);
-av2[4]=C_fix(1);
-av2[5]=lf[888];
-av2[6]=C_SCHEME_FALSE;
+av2[2]=lf[889];
+av2[3]=C_fix(13);
+av2[4]=C_fix(2);
+av2[5]=lf[890];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in k3234 in ... */
+/* k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in k3234 in ... */
 static void C_ccall f_3731(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4592,14 +4563,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[840];
+av2[2]=lf[842];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[887];
+av2[5]=lf[888];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in k3237 in ... */
+/* k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in k3237 in ... */
 static void C_ccall f_3734(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4621,14 +4592,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[838];
+av2[2]=lf[840];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[886];
+av2[5]=lf[887];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in k3417 in ... */
+/* k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in k3240 in ... */
 static void C_ccall f_3737(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4650,14 +4621,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[884];
+av2[2]=lf[838];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[885];
+av2[5]=lf[886];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in k3420 in ... */
+/* k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in k3420 in ... */
 static void C_ccall f_3740(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4679,14 +4650,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[882];
+av2[2]=lf[884];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[883];
+av2[5]=lf[885];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in k3490 in ... */
+/* k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in k3423 in ... */
 static void C_ccall f_3743(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4708,14 +4679,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[880];
+av2[2]=lf[882];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[881];
+av2[5]=lf[883];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in k3493 in ... */
+/* k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in k3493 in ... */
 static void C_ccall f_3746(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4737,14 +4708,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[878];
+av2[2]=lf[880];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[879];
+av2[5]=lf[881];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3747 in k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in k3496 in ... */
+/* k3747 in k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in k3496 in ... */
 static void C_ccall f_3749(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4766,14 +4737,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[876];
+av2[2]=lf[878];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[877];
+av2[5]=lf[879];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3750 in k3747 in k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in k3499 in ... */
+/* k3750 in k3747 in k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in k3499 in ... */
 static void C_ccall f_3752(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4795,14 +4766,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[874];
+av2[2]=lf[876];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[875];
+av2[5]=lf[877];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3753 in k3750 in k3747 in k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in k3502 in ... */
+/* k3753 in k3750 in k3747 in k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in k3502 in ... */
 static void C_ccall f_3755(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4824,14 +4795,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[836];
+av2[2]=lf[874];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[873];
+av2[5]=lf[875];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3756 in k3753 in k3750 in k3747 in k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in k3505 in ... */
+/* k3756 in k3753 in k3750 in k3747 in k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in k3505 in ... */
 static void C_ccall f_3758(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4853,14 +4824,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[871];
+av2[2]=lf[836];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[872];
+av2[5]=lf[873];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3759 in k3756 in k3753 in k3750 in k3747 in k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in k3532 in ... */
+/* k3759 in k3756 in k3753 in k3750 in k3747 in k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in k3508 in ... */
 static void C_ccall f_3761(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4882,14 +4853,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[869];
+av2[2]=lf[871];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[870];
+av2[5]=lf[872];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3762 in k3759 in k3756 in k3753 in k3750 in k3747 in k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in k3535 in ... */
+/* k3762 in k3759 in k3756 in k3753 in k3750 in k3747 in k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in k3535 in ... */
 static void C_ccall f_3764(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4911,14 +4882,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[867];
+av2[2]=lf[869];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[868];
+av2[5]=lf[870];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k3765 in k3762 in k3759 in k3756 in k3753 in k3750 in k3747 in k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3702 in ... */
+/* k3765 in k3762 in k3759 in k3756 in k3753 in k3750 in k3747 in k3744 in k3741 in k3738 in k3735 in k3732 in k3729 in k3726 in k3723 in k3720 in k3717 in k3714 in k3711 in k3708 in k3705 in k3538 in ... */
 static void C_ccall f_3767(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -4940,10 +4911,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[865];
+av2[2]=lf[867];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[866];
+av2[5]=lf[868];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -4969,10 +4940,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[863];
+av2[2]=lf[865];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[864];
+av2[5]=lf[866];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -4998,10 +4969,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[861];
+av2[2]=lf[863];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[862];
+av2[5]=lf[864];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5027,10 +4998,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[859];
+av2[2]=lf[861];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[860];
+av2[5]=lf[862];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5056,10 +5027,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[857];
+av2[2]=lf[859];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[858];
+av2[5]=lf[860];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5085,10 +5056,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[855];
+av2[2]=lf[857];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[856];
+av2[5]=lf[858];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5114,10 +5085,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[853];
+av2[2]=lf[855];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[854];
+av2[5]=lf[856];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5143,10 +5114,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[851];
+av2[2]=lf[853];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[852];
+av2[5]=lf[854];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5172,10 +5143,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[849];
+av2[2]=lf[851];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[850];
+av2[5]=lf[852];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5201,10 +5172,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[847];
+av2[2]=lf[849];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[848];
+av2[5]=lf[850];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5230,10 +5201,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[845];
+av2[2]=lf[847];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[846];
+av2[5]=lf[848];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5259,10 +5230,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[834];
+av2[2]=lf[845];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[844];
+av2[5]=lf[846];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5278,7 +5249,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_3803,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3806,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:497: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:496: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -5288,11 +5259,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[842];
+av2[2]=lf[834];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[843];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[844];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k3804 in k3801 in k3798 in k3795 in k3792 in k3789 in k3786 in k3783 in k3780 in k3777 in k3774 in k3771 in k3768 in k3765 in k3762 in k3759 in k3756 in k3753 in k3750 in k3747 in k3744 in k3741 in ... */
@@ -5317,10 +5288,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[840];
+av2[2]=lf[842];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[841];
+av2[5]=lf[843];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5346,10 +5317,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[838];
+av2[2]=lf[840];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[839];
+av2[5]=lf[841];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5375,10 +5346,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[836];
+av2[2]=lf[838];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[837];
+av2[5]=lf[839];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5404,10 +5375,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[834];
+av2[2]=lf[836];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[835];
+av2[5]=lf[837];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5419,27 +5390,26 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
 C_save_and_reclaim((void *)f_3818,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3821,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:503: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:502: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 8) {
+if(c >= 7) {
   av2=av;
 } else {
-  av2=C_alloc(8);
+  av2=C_alloc(7);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[831];
-av2[3]=C_fix(7);
+av2[2]=lf[834];
+av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[833];
-av2[6]=C_fix(1);
-av2[7]=C_SCHEME_FALSE;
-((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
+av2[5]=lf[835];
+av2[6]=C_SCHEME_TRUE;
+((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k3819 in k3816 in k3813 in k3810 in k3807 in k3804 in k3801 in k3798 in k3795 in k3792 in k3789 in k3786 in k3783 in k3780 in k3777 in k3774 in k3771 in k3768 in k3765 in k3762 in k3759 in k3756 in ... */
 static void C_ccall f_3821(C_word c,C_word *av){
@@ -5449,26 +5419,27 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
 C_save_and_reclaim((void *)f_3821,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3824,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
 /* c-platform.scm:504: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 7) {
+if(c >= 8) {
   av2=av;
 } else {
-  av2=C_alloc(7);
+  av2=C_alloc(8);
 }
 av2[0]=t3;
 av2[1]=t2;
 av2[2]=lf[831];
-av2[3]=C_fix(2);
+av2[3]=C_fix(7);
 av2[4]=C_fix(1);
-av2[5]=lf[832];
-av2[6]=C_SCHEME_TRUE;
-((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
+av2[5]=lf[833];
+av2[6]=C_fix(1);
+av2[7]=C_SCHEME_FALSE;
+((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k3822 in k3819 in k3816 in k3813 in k3810 in k3807 in k3804 in k3801 in k3798 in k3795 in k3792 in k3789 in k3786 in k3783 in k3780 in k3777 in k3774 in k3771 in k3768 in k3765 in k3762 in k3759 in ... */
 static void C_ccall f_3824(C_word c,C_word *av){
@@ -5478,25 +5449,26 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
 C_save_and_reclaim((void *)f_3824,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3827,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:506: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:505: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 6) {
+if(c >= 7) {
   av2=av;
 } else {
-  av2=C_alloc(6);
+  av2=C_alloc(7);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[829];
-av2[3]=C_fix(1);
-av2[4]=C_fix(2);
-av2[5]=lf[830];
-((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
+av2[2]=lf[831];
+av2[3]=C_fix(2);
+av2[4]=C_fix(1);
+av2[5]=lf[832];
+av2[6]=C_SCHEME_TRUE;
+((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k3825 in k3822 in k3819 in k3816 in k3813 in k3810 in k3807 in k3804 in k3801 in k3798 in k3795 in k3792 in k3789 in k3786 in k3783 in k3780 in k3777 in k3774 in k3771 in k3768 in k3765 in k3762 in ... */
 static void C_ccall f_3827(C_word c,C_word *av){
@@ -5520,10 +5492,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[827];
+av2[2]=lf[829];
 av2[3]=C_fix(1);
 av2[4]=C_fix(2);
-av2[5]=lf[828];
+av2[5]=lf[830];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k3828 in k3825 in k3822 in k3819 in k3816 in k3813 in k3810 in k3807 in k3804 in k3801 in k3798 in k3795 in k3792 in k3789 in k3786 in k3783 in k3780 in k3777 in k3774 in k3771 in k3768 in k3765 in ... */
@@ -5548,10 +5520,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[825];
+av2[2]=lf[827];
 av2[3]=C_fix(1);
 av2[4]=C_fix(2);
-av2[5]=lf[826];
+av2[5]=lf[828];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k3831 in k3828 in k3825 in k3822 in k3819 in k3816 in k3813 in k3810 in k3807 in k3804 in k3801 in k3798 in k3795 in k3792 in k3789 in k3786 in k3783 in k3780 in k3777 in k3774 in k3771 in k3768 in ... */
@@ -5576,10 +5548,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[823];
+av2[2]=lf[825];
 av2[3]=C_fix(1);
 av2[4]=C_fix(2);
-av2[5]=lf[824];
+av2[5]=lf[826];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k3834 in k3831 in k3828 in k3825 in k3822 in k3819 in k3816 in k3813 in k3810 in k3807 in k3804 in k3801 in k3798 in k3795 in k3792 in k3789 in k3786 in k3783 in k3780 in k3777 in k3774 in k3771 in ... */
@@ -5590,26 +5562,25 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
 C_save_and_reclaim((void *)f_3836,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3839,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:511: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:510: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 7) {
+if(c >= 6) {
   av2=av;
 } else {
-  av2=C_alloc(7);
+  av2=C_alloc(6);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[820];
-av2[3]=C_fix(2);
+av2[2]=lf[823];
+av2[3]=C_fix(1);
 av2[4]=C_fix(2);
-av2[5]=lf[822];
-av2[6]=C_SCHEME_FALSE;
-((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
+av2[5]=lf[824];
+((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k3837 in k3834 in k3831 in k3828 in k3825 in k3822 in k3819 in k3816 in k3813 in k3810 in k3807 in k3804 in k3801 in k3798 in k3795 in k3792 in k3789 in k3786 in k3783 in k3780 in k3777 in k3774 in ... */
 static void C_ccall f_3839(C_word c,C_word *av){
@@ -5636,8 +5607,8 @@ av2[1]=t2;
 av2[2]=lf[820];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[821];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[822];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k3840 in k3837 in k3834 in k3831 in k3828 in k3825 in k3822 in k3819 in k3816 in k3813 in k3810 in k3807 in k3804 in k3801 in k3798 in k3795 in k3792 in k3789 in k3786 in k3783 in k3780 in k3777 in ... */
@@ -5662,10 +5633,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[818];
+av2[2]=lf[820];
 av2[3]=C_fix(2);
-av2[4]=C_fix(1);
-av2[5]=lf[819];
+av2[4]=C_fix(2);
+av2[5]=lf[821];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5691,10 +5662,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[816];
+av2[2]=lf[818];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[817];
+av2[5]=lf[819];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5720,10 +5691,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[814];
+av2[2]=lf[816];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[815];
+av2[5]=lf[817];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5749,10 +5720,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[812];
+av2[2]=lf[814];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[813];
+av2[5]=lf[815];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5778,10 +5749,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[810];
+av2[2]=lf[812];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[811];
+av2[5]=lf[813];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5807,10 +5778,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[808];
+av2[2]=lf[810];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[809];
+av2[5]=lf[811];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5836,10 +5807,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[806];
+av2[2]=lf[808];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[807];
+av2[5]=lf[809];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5865,10 +5836,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[804];
+av2[2]=lf[806];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[805];
+av2[5]=lf[807];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5894,10 +5865,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[802];
+av2[2]=lf[804];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[803];
+av2[5]=lf[805];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5923,10 +5894,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[800];
+av2[2]=lf[802];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[801];
+av2[5]=lf[803];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5952,10 +5923,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[798];
+av2[2]=lf[800];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[799];
+av2[5]=lf[801];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -5981,10 +5952,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[796];
+av2[2]=lf[798];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[797];
+av2[5]=lf[799];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6010,10 +5981,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[794];
+av2[2]=lf[796];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[795];
+av2[5]=lf[797];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6039,10 +6010,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[792];
+av2[2]=lf[794];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[793];
+av2[5]=lf[795];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6068,10 +6039,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[790];
+av2[2]=lf[792];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[791];
+av2[5]=lf[793];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6097,10 +6068,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[788];
+av2[2]=lf[790];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[789];
+av2[5]=lf[791];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6126,10 +6097,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[786];
+av2[2]=lf[788];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[787];
+av2[5]=lf[789];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6155,10 +6126,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[784];
+av2[2]=lf[786];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[785];
+av2[5]=lf[787];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6184,10 +6155,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[782];
+av2[2]=lf[784];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[783];
+av2[5]=lf[785];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6213,10 +6184,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[780];
+av2[2]=lf[782];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[781];
+av2[5]=lf[783];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6242,10 +6213,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[778];
+av2[2]=lf[780];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[779];
+av2[5]=lf[781];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6271,10 +6242,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[776];
+av2[2]=lf[778];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[777];
+av2[5]=lf[779];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6300,10 +6271,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[774];
+av2[2]=lf[776];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[775];
+av2[5]=lf[777];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6329,10 +6300,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[772];
+av2[2]=lf[774];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[773];
+av2[5]=lf[775];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6358,10 +6329,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[770];
+av2[2]=lf[772];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[771];
+av2[5]=lf[773];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6387,10 +6358,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[768];
+av2[2]=lf[770];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[769];
+av2[5]=lf[771];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6416,10 +6387,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[766];
+av2[2]=lf[768];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[767];
+av2[5]=lf[769];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6445,10 +6416,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[764];
+av2[2]=lf[766];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[765];
+av2[5]=lf[767];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6474,10 +6445,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[762];
+av2[2]=lf[764];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[763];
+av2[5]=lf[765];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6503,10 +6474,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[760];
+av2[2]=lf[762];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[761];
+av2[5]=lf[763];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6532,10 +6503,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[758];
+av2[2]=lf[760];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[759];
+av2[5]=lf[761];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6561,10 +6532,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[756];
+av2[2]=lf[758];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[757];
+av2[5]=lf[759];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6590,10 +6561,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[754];
+av2[2]=lf[756];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[755];
+av2[5]=lf[757];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6619,10 +6590,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[752];
+av2[2]=lf[754];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[753];
+av2[5]=lf[755];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6648,10 +6619,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[750];
+av2[2]=lf[752];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[751];
+av2[5]=lf[753];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6677,10 +6648,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[748];
+av2[2]=lf[750];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[749];
+av2[5]=lf[751];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6706,10 +6677,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[746];
+av2[2]=lf[748];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[747];
+av2[5]=lf[749];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6735,11 +6706,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[744];
+av2[2]=lf[746];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[745];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[747];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k3954 in k3951 in k3948 in k3945 in k3942 in k3939 in k3936 in k3933 in k3930 in k3927 in k3924 in k3921 in k3918 in k3915 in k3912 in k3909 in k3906 in k3903 in k3900 in k3897 in k3894 in k3891 in ... */
@@ -6764,10 +6735,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[742];
+av2[2]=lf[744];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[743];
+av2[5]=lf[745];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6793,10 +6764,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[740];
+av2[2]=lf[742];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[741];
+av2[5]=lf[743];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6822,10 +6793,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[738];
+av2[2]=lf[740];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[739];
+av2[5]=lf[741];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6851,11 +6822,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[736];
+av2[2]=lf[738];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[737];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[739];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k3966 in k3963 in k3960 in k3957 in k3954 in k3951 in k3948 in k3945 in k3942 in k3939 in k3936 in k3933 in k3930 in k3927 in k3924 in k3921 in k3918 in k3915 in k3912 in k3909 in k3906 in k3903 in ... */
@@ -6880,10 +6851,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[734];
+av2[2]=lf[736];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[735];
+av2[5]=lf[737];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6909,10 +6880,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[732];
+av2[2]=lf[734];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[733];
+av2[5]=lf[735];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6938,10 +6909,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[729];
+av2[2]=lf[732];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[731];
+av2[5]=lf[733];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -6970,8 +6941,8 @@ av2[1]=t2;
 av2[2]=lf[729];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[730];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[731];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in k3960 in k3957 in k3954 in k3951 in k3948 in k3945 in k3942 in k3939 in k3936 in k3933 in k3930 in k3927 in k3924 in k3921 in k3918 in k3915 in ... */
@@ -6996,11 +6967,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[726];
+av2[2]=lf[729];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[728];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[730];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in k3960 in k3957 in k3954 in k3951 in k3948 in k3945 in k3942 in k3939 in k3936 in k3933 in k3930 in k3927 in k3924 in k3921 in k3918 in ... */
@@ -7028,8 +6999,8 @@ av2[1]=t2;
 av2[2]=lf[726];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[727];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[728];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in k3960 in k3957 in k3954 in k3951 in k3948 in k3945 in k3942 in k3939 in k3936 in k3933 in k3930 in k3927 in k3924 in k3921 in ... */
@@ -7054,11 +7025,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[724];
+av2[2]=lf[726];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[725];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[727];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in k3960 in k3957 in k3954 in k3951 in k3948 in k3945 in k3942 in k3939 in k3936 in k3933 in k3930 in k3927 in k3924 in ... */
@@ -7083,10 +7054,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[722];
+av2[2]=lf[724];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[723];
+av2[5]=lf[725];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -7112,11 +7083,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[719];
+av2[2]=lf[722];
 av2[3]=C_fix(2);
-av2[4]=C_fix(2);
-av2[5]=lf[721];
-av2[6]=C_SCHEME_FALSE;
+av2[4]=C_fix(1);
+av2[5]=lf[723];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in k3960 in k3957 in k3954 in k3951 in k3948 in k3945 in k3942 in k3939 in k3936 in k3933 in k3930 in ... */
@@ -7144,8 +7115,8 @@ av2[1]=t2;
 av2[2]=lf[719];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[720];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[721];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k3996 in k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in k3960 in k3957 in k3954 in k3951 in k3948 in k3945 in k3942 in k3939 in k3936 in k3933 in ... */
@@ -7170,11 +7141,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[716];
+av2[2]=lf[719];
 av2[3]=C_fix(2);
-av2[4]=C_fix(3);
-av2[5]=lf[718];
-av2[6]=C_SCHEME_FALSE;
+av2[4]=C_fix(2);
+av2[5]=lf[720];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k3999 in k3996 in k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in k3960 in k3957 in k3954 in k3951 in k3948 in k3945 in k3942 in k3939 in k3936 in ... */
@@ -7202,8 +7173,8 @@ av2[1]=t2;
 av2[2]=lf[716];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[717];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[718];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4002 in k3999 in k3996 in k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in k3960 in k3957 in k3954 in k3951 in k3948 in k3945 in k3942 in k3939 in ... */
@@ -7228,11 +7199,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[713];
+av2[2]=lf[716];
 av2[3]=C_fix(2);
-av2[4]=C_fix(2);
-av2[5]=lf[715];
-av2[6]=C_SCHEME_FALSE;
+av2[4]=C_fix(3);
+av2[5]=lf[717];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4005 in k4002 in k3999 in k3996 in k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in k3960 in k3957 in k3954 in k3951 in k3948 in k3945 in k3942 in ... */
@@ -7260,8 +7231,8 @@ av2[1]=t2;
 av2[2]=lf[713];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[714];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[715];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4008 in k4005 in k4002 in k3999 in k3996 in k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in k3960 in k3957 in k3954 in k3951 in k3948 in k3945 in ... */
@@ -7286,11 +7257,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[710];
+av2[2]=lf[713];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[712];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[714];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4011 in k4008 in k4005 in k4002 in k3999 in k3996 in k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in k3960 in k3957 in k3954 in k3951 in k3948 in ... */
@@ -7318,8 +7289,8 @@ av2[1]=t2;
 av2[2]=lf[710];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[711];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[712];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4014 in k4011 in k4008 in k4005 in k4002 in k3999 in k3996 in k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in k3960 in k3957 in k3954 in k3951 in ... */
@@ -7344,11 +7315,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[707];
+av2[2]=lf[710];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[709];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[711];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4017 in k4014 in k4011 in k4008 in k4005 in k4002 in k3999 in k3996 in k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in k3960 in k3957 in k3954 in ... */
@@ -7376,8 +7347,8 @@ av2[1]=t2;
 av2[2]=lf[707];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[708];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[709];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4020 in k4017 in k4014 in k4011 in k4008 in k4005 in k4002 in k3999 in k3996 in k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in k3960 in k3957 in ... */
@@ -7402,11 +7373,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[704];
+av2[2]=lf[707];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[706];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[708];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4023 in k4020 in k4017 in k4014 in k4011 in k4008 in k4005 in k4002 in k3999 in k3996 in k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in k3960 in ... */
@@ -7434,8 +7405,8 @@ av2[1]=t2;
 av2[2]=lf[704];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[705];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[706];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4026 in k4023 in k4020 in k4017 in k4014 in k4011 in k4008 in k4005 in k4002 in k3999 in k3996 in k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in k3963 in ... */
@@ -7460,11 +7431,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[701];
+av2[2]=lf[704];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[703];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[705];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4029 in k4026 in k4023 in k4020 in k4017 in k4014 in k4011 in k4008 in k4005 in k4002 in k3999 in k3996 in k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in k3966 in ... */
@@ -7492,8 +7463,8 @@ av2[1]=t2;
 av2[2]=lf[701];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[702];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[703];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4032 in k4029 in k4026 in k4023 in k4020 in k4017 in k4014 in k4011 in k4008 in k4005 in k4002 in k3999 in k3996 in k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in k3969 in ... */
@@ -7518,11 +7489,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[698];
+av2[2]=lf[701];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[700];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[702];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4035 in k4032 in k4029 in k4026 in k4023 in k4020 in k4017 in k4014 in k4011 in k4008 in k4005 in k4002 in k3999 in k3996 in k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in k3972 in ... */
@@ -7550,8 +7521,8 @@ av2[1]=t2;
 av2[2]=lf[698];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[699];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[700];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4038 in k4035 in k4032 in k4029 in k4026 in k4023 in k4020 in k4017 in k4014 in k4011 in k4008 in k4005 in k4002 in k3999 in k3996 in k3993 in k3990 in k3987 in k3984 in k3981 in k3978 in k3975 in ... */
@@ -7576,10 +7547,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[696];
+av2[2]=lf[698];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[697];
+av2[5]=lf[699];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -7605,10 +7576,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[694];
+av2[2]=lf[696];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[695];
+av2[5]=lf[697];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -7634,10 +7605,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[692];
+av2[2]=lf[694];
 av2[3]=C_fix(2);
-av2[4]=C_fix(1);
-av2[5]=lf[693];
+av2[4]=C_fix(2);
+av2[5]=lf[695];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -7663,10 +7634,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[690];
+av2[2]=lf[692];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[691];
+av2[5]=lf[693];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -7692,10 +7663,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[688];
+av2[2]=lf[690];
 av2[3]=C_fix(2);
-av2[4]=C_fix(2);
-av2[5]=lf[689];
+av2[4]=C_fix(1);
+av2[5]=lf[691];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -7721,10 +7692,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[686];
+av2[2]=lf[688];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[687];
+av2[5]=lf[689];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -7750,10 +7721,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[684];
+av2[2]=lf[686];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[685];
+av2[5]=lf[687];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -7779,10 +7750,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[682];
+av2[2]=lf[684];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[683];
+av2[5]=lf[685];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -7808,10 +7779,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[680];
+av2[2]=lf[682];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[681];
+av2[5]=lf[683];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -7837,10 +7808,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[678];
+av2[2]=lf[680];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[679];
+av2[5]=lf[681];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -7866,10 +7837,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[676];
+av2[2]=lf[678];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[677];
+av2[5]=lf[679];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -7895,10 +7866,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[674];
+av2[2]=lf[676];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[675];
+av2[5]=lf[677];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -7924,10 +7895,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[672];
+av2[2]=lf[674];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[673];
+av2[5]=lf[675];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -7953,10 +7924,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[670];
+av2[2]=lf[672];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[671];
+av2[5]=lf[673];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -7982,11 +7953,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[668];
+av2[2]=lf[670];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[669];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[671];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4083 in k4080 in k4077 in k4074 in k4071 in k4068 in k4065 in k4062 in k4059 in k4056 in k4053 in k4050 in k4047 in k4044 in k4041 in k4038 in k4035 in k4032 in k4029 in k4026 in k4023 in k4020 in ... */
@@ -8011,10 +7982,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[666];
+av2[2]=lf[668];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[667];
+av2[5]=lf[669];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8040,10 +8011,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[664];
+av2[2]=lf[666];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[665];
+av2[5]=lf[667];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8069,10 +8040,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[662];
+av2[2]=lf[664];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[663];
+av2[5]=lf[665];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8098,10 +8069,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[660];
+av2[2]=lf[662];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[661];
+av2[5]=lf[663];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8127,11 +8098,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[658];
+av2[2]=lf[660];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[659];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[661];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4098 in k4095 in k4092 in k4089 in k4086 in k4083 in k4080 in k4077 in k4074 in k4071 in k4068 in k4065 in k4062 in k4059 in k4056 in k4053 in k4050 in k4047 in k4044 in k4041 in k4038 in k4035 in ... */
@@ -8156,10 +8127,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[656];
+av2[2]=lf[658];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[657];
+av2[5]=lf[659];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8185,11 +8156,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[654];
+av2[2]=lf[656];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[655];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[657];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4104 in k4101 in k4098 in k4095 in k4092 in k4089 in k4086 in k4083 in k4080 in k4077 in k4074 in k4071 in k4068 in k4065 in k4062 in k4059 in k4056 in k4053 in k4050 in k4047 in k4044 in k4041 in ... */
@@ -8214,10 +8185,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[652];
+av2[2]=lf[654];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[653];
+av2[5]=lf[655];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8243,11 +8214,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[650];
+av2[2]=lf[652];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[651];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[653];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4110 in k4107 in k4104 in k4101 in k4098 in k4095 in k4092 in k4089 in k4086 in k4083 in k4080 in k4077 in k4074 in k4071 in k4068 in k4065 in k4062 in k4059 in k4056 in k4053 in k4050 in k4047 in ... */
@@ -8272,10 +8243,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[648];
+av2[2]=lf[650];
 av2[3]=C_fix(2);
-av2[4]=C_fix(1);
-av2[5]=lf[649];
+av2[4]=C_fix(2);
+av2[5]=lf[651];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8301,10 +8272,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[646];
+av2[2]=lf[648];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[647];
+av2[5]=lf[649];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8330,10 +8301,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[644];
+av2[2]=lf[646];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[645];
+av2[5]=lf[647];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8359,10 +8330,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[642];
+av2[2]=lf[644];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[643];
+av2[5]=lf[645];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8388,10 +8359,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[640];
+av2[2]=lf[642];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[641];
+av2[5]=lf[643];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8417,10 +8388,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[638];
+av2[2]=lf[640];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[639];
+av2[5]=lf[641];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8446,10 +8417,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[636];
+av2[2]=lf[638];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[637];
+av2[5]=lf[639];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8475,10 +8446,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[634];
+av2[2]=lf[636];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[635];
+av2[5]=lf[637];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8504,10 +8475,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[632];
+av2[2]=lf[634];
 av2[3]=C_fix(2);
-av2[4]=C_fix(2);
-av2[5]=lf[633];
+av2[4]=C_fix(1);
+av2[5]=lf[635];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8533,10 +8504,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[630];
+av2[2]=lf[632];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[631];
+av2[5]=lf[633];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8562,10 +8533,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[628];
+av2[2]=lf[630];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[629];
+av2[5]=lf[631];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8591,11 +8562,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[626];
+av2[2]=lf[628];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[627];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[629];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in k4107 in k4104 in k4101 in k4098 in k4095 in k4092 in k4089 in k4086 in k4083 in ... */
@@ -8620,10 +8591,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[624];
+av2[2]=lf[626];
 av2[3]=C_fix(2);
-av2[4]=C_fix(1);
-av2[5]=lf[625];
+av2[4]=C_fix(2);
+av2[5]=lf[627];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -8635,11 +8606,40 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
 C_save_and_reclaim((void *)f_4151,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4154,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:617: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:616: chicken.compiler.optimizer#rewrite */
+t3=*((C_word*)lf[46]+1);{
+C_word *av2;
+if(c >= 7) {
+  av2=av;
+} else {
+  av2=C_alloc(7);
+}
+av2[0]=t3;
+av2[1]=t2;
+av2[2]=lf[624];
+av2[3]=C_fix(2);
+av2[4]=C_fix(1);
+av2[5]=lf[625];
+av2[6]=C_SCHEME_FALSE;
+((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
+
+/* k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in k4107 in k4104 in k4101 in k4098 in k4095 in k4092 in k4089 in ... */
+static void C_ccall f_4154(C_word c,C_word *av){
+C_word tmp;
+C_word t0=av[0];
+C_word t1=av[1];
+C_word t2;
+C_word t3;
+C_word *a;
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
+C_save_and_reclaim((void *)f_4154,2,av);}
+a=C_alloc(3);
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4157,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:618: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -8657,8 +8657,8 @@ av2[6]=lf[622];
 av2[7]=lf[623];
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
-/* k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in k4107 in k4104 in k4101 in k4098 in k4095 in k4092 in k4089 in ... */
-static void C_ccall f_4154(C_word c,C_word *av){
+/* k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in k4107 in k4104 in k4101 in k4098 in k4095 in k4092 in ... */
+static void C_ccall f_4157(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -8666,10 +8666,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4154,2,av);}
+C_save_and_reclaim((void *)f_4157,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4157,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:618: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4160,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:619: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -8686,8 +8686,8 @@ av2[5]=lf[621];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in k4107 in k4104 in k4101 in k4098 in k4095 in k4092 in ... */
-static void C_ccall f_4157(C_word c,C_word *av){
+/* k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in k4107 in k4104 in k4101 in k4098 in k4095 in ... */
+static void C_ccall f_4160(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -8695,10 +8695,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
-C_save_and_reclaim((void *)f_4157,2,av);}
+C_save_and_reclaim((void *)f_4160,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4160,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:619: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4163,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:620: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -8716,8 +8716,8 @@ av2[6]=lf[618];
 av2[7]=lf[619];
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
-/* k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in k4107 in k4104 in k4101 in k4098 in k4095 in ... */
-static void C_ccall f_4160(C_word c,C_word *av){
+/* k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in k4107 in k4104 in k4101 in k4098 in ... */
+static void C_ccall f_4163(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -8725,10 +8725,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4160,2,av);}
+C_save_and_reclaim((void *)f_4163,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4163,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:620: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4166,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:621: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -8745,8 +8745,8 @@ av2[5]=lf[617];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in k4107 in k4104 in k4101 in k4098 in ... */
-static void C_ccall f_4163(C_word c,C_word *av){
+/* k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in k4107 in k4104 in k4101 in ... */
+static void C_ccall f_4166(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -8754,10 +8754,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4163,2,av);}
+C_save_and_reclaim((void *)f_4166,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4166,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:621: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4169,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:622: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -8774,8 +8774,8 @@ av2[5]=lf[614];
 av2[6]=lf[615];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in k4107 in k4104 in k4101 in ... */
-static void C_ccall f_4166(C_word c,C_word *av){
+/* k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in k4107 in k4104 in ... */
+static void C_ccall f_4169(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -8783,10 +8783,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4166,2,av);}
+C_save_and_reclaim((void *)f_4169,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4169,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:622: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4172,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:623: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -8803,8 +8803,8 @@ av2[5]=lf[611];
 av2[6]=lf[612];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in k4107 in k4104 in ... */
-static void C_ccall f_4169(C_word c,C_word *av){
+/* k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in k4107 in ... */
+static void C_ccall f_4172(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -8812,10 +8812,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4169,2,av);}
+C_save_and_reclaim((void *)f_4172,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4172,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:623: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4175,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:624: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -8832,8 +8832,8 @@ av2[5]=lf[609];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in k4107 in ... */
-static void C_ccall f_4172(C_word c,C_word *av){
+/* k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in ... */
+static void C_ccall f_4175(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -8841,10 +8841,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4172,2,av);}
+C_save_and_reclaim((void *)f_4175,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4175,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:624: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4178,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:625: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -8861,8 +8861,8 @@ av2[5]=lf[607];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in k4110 in ... */
-static void C_ccall f_4175(C_word c,C_word *av){
+/* k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in ... */
+static void C_ccall f_4178(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -8870,10 +8870,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
-C_save_and_reclaim((void *)f_4175,2,av);}
+C_save_and_reclaim((void *)f_4178,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4178,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:626: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4181,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:627: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -8889,8 +8889,8 @@ av2[4]=lf[297];
 av2[5]=C_fix(0);
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
-/* k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in k4113 in ... */
-static void C_ccall f_4178(C_word c,C_word *av){
+/* k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in ... */
+static void C_ccall f_4181(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -8898,10 +8898,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
-C_save_and_reclaim((void *)f_4178,2,av);}
+C_save_and_reclaim((void *)f_4181,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4181,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:627: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4184,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:628: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -8917,8 +8917,8 @@ av2[4]=lf[297];
 av2[5]=C_fix(1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
-/* k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in k4116 in ... */
-static void C_ccall f_4181(C_word c,C_word *av){
+/* k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in ... */
+static void C_ccall f_4184(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -8926,10 +8926,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4181,2,av);}
+C_save_and_reclaim((void *)f_4184,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4184,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:628: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4187,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:629: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -8946,8 +8946,8 @@ av2[5]=lf[604];
 av2[6]=lf[605];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in k4119 in ... */
-static void C_ccall f_4184(C_word c,C_word *av){
+/* k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in ... */
+static void C_ccall f_4187(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -8955,10 +8955,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4184,2,av);}
+C_save_and_reclaim((void *)f_4187,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4187,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:629: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4190,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:630: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -8975,8 +8975,8 @@ av2[5]=lf[601];
 av2[6]=lf[602];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in k4122 in ... */
-static void C_ccall f_4187(C_word c,C_word *av){
+/* k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in ... */
+static void C_ccall f_4190(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -8984,10 +8984,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
-C_save_and_reclaim((void *)f_4187,2,av);}
+C_save_and_reclaim((void *)f_4190,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4190,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:631: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4193,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:632: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -9005,8 +9005,8 @@ av2[6]=lf[598];
 av2[7]=lf[599];
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
-/* k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in k4125 in ... */
-static void C_ccall f_4190(C_word c,C_word *av){
+/* k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in ... */
+static void C_ccall f_4193(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -9014,10 +9014,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,3)))){
-C_save_and_reclaim((void *)f_4190,2,av);}
+C_save_and_reclaim((void *)f_4193,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4193,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:633: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4196,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:634: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 4) {
@@ -9031,8 +9031,8 @@ av2[2]=lf[593];
 av2[3]=C_fix(19);
 ((C_proc)(void*)(*((C_word*)t3+1)))(4,av2);}}
 
-/* k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in k4128 in ... */
-static void C_ccall f_4193(C_word c,C_word *av){
+/* k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in ... */
+static void C_ccall f_4196(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -9040,10 +9040,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,3)))){
-C_save_and_reclaim((void *)f_4193,2,av);}
+C_save_and_reclaim((void *)f_4196,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4196,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:634: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4199,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:635: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 4) {
@@ -9057,8 +9057,8 @@ av2[2]=lf[589];
 av2[3]=C_fix(19);
 ((C_proc)(void*)(*((C_word*)t3+1)))(4,av2);}}
 
-/* k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in k4131 in ... */
-static void C_ccall f_4196(C_word c,C_word *av){
+/* k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in ... */
+static void C_ccall f_4199(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -9066,10 +9066,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,3)))){
-C_save_and_reclaim((void *)f_4196,2,av);}
+C_save_and_reclaim((void *)f_4199,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4199,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:635: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4202,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:636: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 4) {
@@ -9083,8 +9083,8 @@ av2[2]=lf[585];
 av2[3]=C_fix(19);
 ((C_proc)(void*)(*((C_word*)t3+1)))(4,av2);}}
 
-/* k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in k4134 in ... */
-static void C_ccall f_4199(C_word c,C_word *av){
+/* k4200 in k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in ... */
+static void C_ccall f_4202(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -9092,10 +9092,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,8)))){
-C_save_and_reclaim((void *)f_4199,2,av);}
+C_save_and_reclaim((void *)f_4202,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4202,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:637: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4205,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:638: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 9) {
@@ -9114,8 +9114,8 @@ av2[7]=lf[596];
 av2[8]=C_fix(5);
 ((C_proc)(void*)(*((C_word*)t3+1)))(9,av2);}}
 
-/* k4200 in k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in k4137 in ... */
-static void C_ccall f_4202(C_word c,C_word *av){
+/* k4203 in k4200 in k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in ... */
+static void C_ccall f_4205(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -9123,10 +9123,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,8)))){
-C_save_and_reclaim((void *)f_4202,2,av);}
+C_save_and_reclaim((void *)f_4205,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4205,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:638: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4208,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:639: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 9) {
@@ -9145,8 +9145,8 @@ av2[7]=lf[592];
 av2[8]=C_fix(5);
 ((C_proc)(void*)(*((C_word*)t3+1)))(9,av2);}}
 
-/* k4203 in k4200 in k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in k4140 in ... */
-static void C_ccall f_4205(C_word c,C_word *av){
+/* k4206 in k4203 in k4200 in k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in ... */
+static void C_ccall f_4208(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -9154,10 +9154,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,8)))){
-C_save_and_reclaim((void *)f_4205,2,av);}
+C_save_and_reclaim((void *)f_4208,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4208,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:639: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4211,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:640: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 9) {
@@ -9176,8 +9176,8 @@ av2[7]=lf[588];
 av2[8]=C_fix(5);
 ((C_proc)(void*)(*((C_word*)t3+1)))(9,av2);}}
 
-/* k4206 in k4203 in k4200 in k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in k4143 in ... */
-static void C_ccall f_4208(C_word c,C_word *av){
+/* k4209 in k4206 in k4203 in k4200 in k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in ... */
+static void C_ccall f_4211(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -9185,10 +9185,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,8)))){
-C_save_and_reclaim((void *)f_4208,2,av);}
+C_save_and_reclaim((void *)f_4211,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4211,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:641: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4214,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:642: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 9) {
@@ -9207,36 +9207,6 @@ av2[7]=C_fix(5);
 av2[8]=lf[584];
 ((C_proc)(void*)(*((C_word*)t3+1)))(9,av2);}}
 
-/* k4209 in k4206 in k4203 in k4200 in k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in k4146 in ... */
-static void C_ccall f_4211(C_word c,C_word *av){
-C_word tmp;
-C_word t0=av[0];
-C_word t1=av[1];
-C_word t2;
-C_word t3;
-C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
-C_save_and_reclaim((void *)f_4211,2,av);}
-a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4214,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:643: chicken.compiler.optimizer#rewrite */
-t3=*((C_word*)lf[46]+1);{
-C_word *av2;
-if(c >= 8) {
-  av2=av;
-} else {
-  av2=C_alloc(8);
-}
-av2[0]=t3;
-av2[1]=t2;
-av2[2]=lf[580];
-av2[3]=C_fix(16);
-av2[4]=C_fix(2);
-av2[5]=lf[581];
-av2[6]=C_SCHEME_FALSE;
-av2[7]=*((C_word*)lf[11]+1);
-((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
-
 /* k4212 in k4209 in k4206 in k4203 in k4200 in k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in k4167 in k4164 in k4161 in k4158 in k4155 in k4152 in k4149 in ... */
 static void C_ccall f_4214(C_word c,C_word *av){
 C_word tmp;
@@ -9259,10 +9229,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[578];
+av2[2]=lf[580];
 av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[579];
+av2[5]=lf[581];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -9289,10 +9259,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[576];
+av2[2]=lf[578];
 av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[577];
+av2[5]=lf[579];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -9319,10 +9289,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[574];
+av2[2]=lf[576];
 av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[575];
+av2[5]=lf[577];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -9349,10 +9319,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[572];
+av2[2]=lf[574];
 av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[573];
+av2[5]=lf[575];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -9379,10 +9349,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[570];
+av2[2]=lf[572];
 av2[3]=C_fix(16);
-av2[4]=C_fix(1);
-av2[5]=lf[571];
+av2[4]=C_fix(2);
+av2[5]=lf[573];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -9409,10 +9379,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[568];
+av2[2]=lf[570];
 av2[3]=C_fix(16);
-av2[4]=C_fix(2);
-av2[5]=lf[569];
+av2[4]=C_fix(1);
+av2[5]=lf[571];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -9425,26 +9395,27 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
 C_save_and_reclaim((void *)f_4232,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4235,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:651: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:650: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 7) {
+if(c >= 8) {
   av2=av;
 } else {
-  av2=C_alloc(7);
+  av2=C_alloc(8);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[564];
-av2[3]=C_fix(5);
-av2[4]=lf[567];
-av2[5]=C_fix(0);
-av2[6]=lf[24];
-((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
+av2[2]=lf[568];
+av2[3]=C_fix(16);
+av2[4]=C_fix(2);
+av2[5]=lf[569];
+av2[6]=C_SCHEME_FALSE;
+av2[7]=*((C_word*)lf[11]+1);
+((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4233 in k4230 in k4227 in k4224 in k4221 in k4218 in k4215 in k4212 in k4209 in k4206 in k4203 in k4200 in k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in k4170 in ... */
 static void C_ccall f_4235(C_word c,C_word *av){
@@ -9469,10 +9440,10 @@ if(c >= 7) {
 av2[0]=t3;
 av2[1]=t2;
 av2[2]=lf[564];
-av2[3]=C_fix(2);
-av2[4]=C_fix(1);
-av2[5]=lf[566];
-av2[6]=C_SCHEME_FALSE;
+av2[3]=C_fix(5);
+av2[4]=lf[567];
+av2[5]=C_fix(0);
+av2[6]=lf[24];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4236 in k4233 in k4230 in k4227 in k4224 in k4221 in k4218 in k4215 in k4212 in k4209 in k4206 in k4203 in k4200 in k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in k4173 in ... */
@@ -9500,8 +9471,8 @@ av2[1]=t2;
 av2[2]=lf[564];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[565];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[566];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4239 in k4236 in k4233 in k4230 in k4227 in k4224 in k4221 in k4218 in k4215 in k4212 in k4209 in k4206 in k4203 in k4200 in k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in k4176 in ... */
@@ -9526,11 +9497,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[560];
-av2[3]=C_fix(5);
-av2[4]=lf[563];
-av2[5]=C_fix(0);
-av2[6]=lf[24];
+av2[2]=lf[564];
+av2[3]=C_fix(2);
+av2[4]=C_fix(1);
+av2[5]=lf[565];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4242 in k4239 in k4236 in k4233 in k4230 in k4227 in k4224 in k4221 in k4218 in k4215 in k4212 in k4209 in k4206 in k4203 in k4200 in k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in k4179 in ... */
@@ -9557,9 +9528,9 @@ av2[0]=t3;
 av2[1]=t2;
 av2[2]=lf[560];
 av2[3]=C_fix(5);
-av2[4]=lf[562];
+av2[4]=lf[563];
 av2[5]=C_fix(0);
-av2[6]=lf[388];
+av2[6]=lf[24];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4245 in k4242 in k4239 in k4236 in k4233 in k4230 in k4227 in k4224 in k4221 in k4218 in k4215 in k4212 in k4209 in k4206 in k4203 in k4200 in k4197 in k4194 in k4191 in k4188 in k4185 in k4182 in ... */
@@ -9585,10 +9556,10 @@ if(c >= 7) {
 av2[0]=t3;
 av2[1]=t2;
 av2[2]=lf[560];
-av2[3]=C_fix(2);
-av2[4]=C_fix(1);
-av2[5]=lf[561];
-av2[6]=C_SCHEME_TRUE;
+av2[3]=C_fix(5);
+av2[4]=lf[562];
+av2[5]=C_fix(0);
+av2[6]=lf[388];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4248 in k4245 in k4242 in k4239 in k4236 in k4233 in k4230 in k4227 in k4224 in k4221 in k4218 in k4215 in k4212 in k4209 in k4206 in k4203 in k4200 in k4197 in k4194 in k4191 in k4188 in k4185 in ... */
@@ -9613,11 +9584,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[556];
-av2[3]=C_fix(5);
-av2[4]=lf[559];
-av2[5]=C_fix(0);
-av2[6]=lf[24];
+av2[2]=lf[560];
+av2[3]=C_fix(2);
+av2[4]=C_fix(1);
+av2[5]=lf[561];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4251 in k4248 in k4245 in k4242 in k4239 in k4236 in k4233 in k4230 in k4227 in k4224 in k4221 in k4218 in k4215 in k4212 in k4209 in k4206 in k4203 in k4200 in k4197 in k4194 in k4191 in k4188 in ... */
@@ -9644,9 +9615,9 @@ av2[0]=t3;
 av2[1]=t2;
 av2[2]=lf[556];
 av2[3]=C_fix(5);
-av2[4]=lf[558];
+av2[4]=lf[559];
 av2[5]=C_fix(0);
-av2[6]=lf[388];
+av2[6]=lf[24];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4254 in k4251 in k4248 in k4245 in k4242 in k4239 in k4236 in k4233 in k4230 in k4227 in k4224 in k4221 in k4218 in k4215 in k4212 in k4209 in k4206 in k4203 in k4200 in k4197 in k4194 in k4191 in ... */
@@ -9672,10 +9643,10 @@ if(c >= 7) {
 av2[0]=t3;
 av2[1]=t2;
 av2[2]=lf[556];
-av2[3]=C_fix(2);
-av2[4]=C_fix(1);
-av2[5]=lf[557];
-av2[6]=C_SCHEME_TRUE;
+av2[3]=C_fix(5);
+av2[4]=lf[558];
+av2[5]=C_fix(0);
+av2[6]=lf[388];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4257 in k4254 in k4251 in k4248 in k4245 in k4242 in k4239 in k4236 in k4233 in k4230 in k4227 in k4224 in k4221 in k4218 in k4215 in k4212 in k4209 in k4206 in k4203 in k4200 in k4197 in k4194 in ... */
@@ -9690,7 +9661,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4259,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4262,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:661: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:660: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -9700,11 +9671,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[544];
-av2[3]=C_fix(6);
-av2[4]=lf[554];
-av2[5]=lf[555];
-av2[6]=C_SCHEME_FALSE;
+av2[2]=lf[556];
+av2[3]=C_fix(2);
+av2[4]=C_fix(1);
+av2[5]=lf[557];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4260 in k4257 in k4254 in k4251 in k4248 in k4245 in k4242 in k4239 in k4236 in k4233 in k4230 in k4227 in k4224 in k4221 in k4218 in k4215 in k4212 in k4209 in k4206 in k4203 in k4200 in k4197 in ... */
@@ -9729,10 +9700,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[540];
+av2[2]=lf[544];
 av2[3]=C_fix(6);
-av2[4]=lf[552];
-av2[5]=lf[553];
+av2[4]=lf[554];
+av2[5]=lf[555];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -9758,11 +9729,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[549];
+av2[2]=lf[540];
 av2[3]=C_fix(6);
-av2[4]=lf[550];
-av2[5]=lf[551];
-av2[6]=C_SCHEME_TRUE;
+av2[4]=lf[552];
+av2[5]=lf[553];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4266 in k4263 in k4260 in k4257 in k4254 in k4251 in k4248 in k4245 in k4242 in k4239 in k4236 in k4233 in k4230 in k4227 in k4224 in k4221 in k4218 in k4215 in k4212 in k4209 in k4206 in k4203 in ... */
@@ -9787,10 +9758,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[546];
+av2[2]=lf[549];
 av2[3]=C_fix(6);
-av2[4]=lf[547];
-av2[5]=lf[548];
+av2[4]=lf[550];
+av2[5]=lf[551];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -9806,7 +9777,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4271,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4274,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:666: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:665: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -9816,10 +9787,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[544];
-av2[3]=C_fix(2);
-av2[4]=C_fix(1);
-av2[5]=lf[545];
+av2[2]=lf[546];
+av2[3]=C_fix(6);
+av2[4]=lf[547];
+av2[5]=lf[548];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -9845,10 +9816,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[542];
+av2[2]=lf[544];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[543];
+av2[5]=lf[545];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -9874,10 +9845,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[540];
+av2[2]=lf[542];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[541];
+av2[5]=lf[543];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -9893,7 +9864,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4280,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4283,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:670: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:669: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -9903,10 +9874,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[525];
+av2[2]=lf[540];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[539];
+av2[5]=lf[541];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -9932,10 +9903,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[523];
+av2[2]=lf[525];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[538];
+av2[5]=lf[539];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -9961,10 +9932,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[521];
+av2[2]=lf[523];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[537];
+av2[5]=lf[538];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -9990,10 +9961,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[519];
+av2[2]=lf[521];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[536];
+av2[5]=lf[537];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10019,10 +9990,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[517];
+av2[2]=lf[519];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[535];
+av2[5]=lf[536];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10048,10 +10019,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[515];
+av2[2]=lf[517];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[534];
+av2[5]=lf[535];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10077,10 +10048,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[513];
+av2[2]=lf[515];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[533];
+av2[5]=lf[534];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10106,10 +10077,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[511];
+av2[2]=lf[513];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[532];
+av2[5]=lf[533];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10135,10 +10106,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[509];
+av2[2]=lf[511];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[531];
+av2[5]=lf[532];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10164,10 +10135,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[507];
+av2[2]=lf[509];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[530];
+av2[5]=lf[531];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10193,10 +10164,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[505];
+av2[2]=lf[507];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[529];
+av2[5]=lf[530];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10222,10 +10193,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[503];
+av2[2]=lf[505];
 av2[3]=C_fix(2);
-av2[4]=C_fix(2);
-av2[5]=lf[528];
+av2[4]=C_fix(1);
+av2[5]=lf[529];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10251,10 +10222,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[501];
+av2[2]=lf[503];
 av2[3]=C_fix(2);
-av2[4]=C_fix(1);
-av2[5]=lf[527];
+av2[4]=C_fix(2);
+av2[5]=lf[528];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10280,10 +10251,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[525];
+av2[2]=lf[501];
 av2[3]=C_fix(2);
-av2[4]=C_fix(2);
-av2[5]=lf[526];
+av2[4]=C_fix(1);
+av2[5]=lf[527];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10309,10 +10280,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[523];
+av2[2]=lf[525];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[524];
+av2[5]=lf[526];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10338,10 +10309,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[521];
+av2[2]=lf[523];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[522];
+av2[5]=lf[524];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10367,10 +10338,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[519];
+av2[2]=lf[521];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[520];
+av2[5]=lf[522];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10396,10 +10367,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[517];
+av2[2]=lf[519];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[518];
+av2[5]=lf[520];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10425,10 +10396,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[515];
+av2[2]=lf[517];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[516];
+av2[5]=lf[518];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10454,10 +10425,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[513];
+av2[2]=lf[515];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[514];
+av2[5]=lf[516];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10483,10 +10454,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[511];
+av2[2]=lf[513];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[512];
+av2[5]=lf[514];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10512,10 +10483,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[509];
+av2[2]=lf[511];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[510];
+av2[5]=lf[512];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10541,10 +10512,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[507];
+av2[2]=lf[509];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[508];
+av2[5]=lf[510];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10570,10 +10541,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[505];
+av2[2]=lf[507];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[506];
+av2[5]=lf[508];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10599,10 +10570,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[503];
+av2[2]=lf[505];
 av2[3]=C_fix(2);
-av2[4]=C_fix(3);
-av2[5]=lf[504];
+av2[4]=C_fix(2);
+av2[5]=lf[506];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10628,10 +10599,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[501];
+av2[2]=lf[503];
 av2[3]=C_fix(2);
-av2[4]=C_fix(2);
-av2[5]=lf[502];
+av2[4]=C_fix(3);
+av2[5]=lf[504];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10643,27 +10614,26 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
 C_save_and_reclaim((void *)f_4358,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4361,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:697: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:696: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 8) {
+if(c >= 7) {
   av2=av;
 } else {
-  av2=C_alloc(8);
+  av2=C_alloc(7);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[439];
-av2[3]=C_fix(9);
-av2[4]=lf[499];
-av2[5]=lf[500];
+av2[2]=lf[501];
+av2[3]=C_fix(2);
+av2[4]=C_fix(2);
+av2[5]=lf[502];
 av2[6]=C_SCHEME_TRUE;
-av2[7]=C_SCHEME_TRUE;
-((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
+((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4359 in k4356 in k4353 in k4350 in k4347 in k4344 in k4341 in k4338 in k4335 in k4332 in k4329 in k4326 in k4323 in k4320 in k4317 in k4314 in k4311 in k4308 in k4305 in k4302 in k4299 in k4296 in ... */
 static void C_ccall f_4361(C_word c,C_word *av){
@@ -10687,12 +10657,12 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[437];
+av2[2]=lf[439];
 av2[3]=C_fix(9);
-av2[4]=lf[497];
-av2[5]=lf[498];
+av2[4]=lf[499];
+av2[5]=lf[500];
 av2[6]=C_SCHEME_TRUE;
-av2[7]=C_SCHEME_FALSE;
+av2[7]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4362 in k4359 in k4356 in k4353 in k4350 in k4347 in k4344 in k4341 in k4338 in k4335 in k4332 in k4329 in k4326 in k4323 in k4320 in k4317 in k4314 in k4311 in k4308 in k4305 in k4302 in k4299 in ... */
@@ -10717,10 +10687,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[435];
+av2[2]=lf[437];
 av2[3]=C_fix(9);
-av2[4]=lf[495];
-av2[5]=lf[496];
+av2[4]=lf[497];
+av2[5]=lf[498];
 av2[6]=C_SCHEME_TRUE;
 av2[7]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -10747,10 +10717,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[433];
+av2[2]=lf[435];
 av2[3]=C_fix(9);
-av2[4]=lf[493];
-av2[5]=lf[494];
+av2[4]=lf[495];
+av2[5]=lf[496];
 av2[6]=C_SCHEME_TRUE;
 av2[7]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -10777,10 +10747,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[431];
+av2[2]=lf[433];
 av2[3]=C_fix(9);
-av2[4]=lf[491];
-av2[5]=lf[492];
+av2[4]=lf[493];
+av2[5]=lf[494];
 av2[6]=C_SCHEME_TRUE;
 av2[7]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -10793,26 +10763,27 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
 C_save_and_reclaim((void *)f_4373,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4376,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:703: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:702: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 7) {
+if(c >= 8) {
   av2=av;
 } else {
-  av2=C_alloc(7);
+  av2=C_alloc(8);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[490];
-av2[3]=C_fix(11);
-av2[4]=C_fix(1);
-av2[5]=lf[99];
+av2[2]=lf[431];
+av2[3]=C_fix(9);
+av2[4]=lf[491];
+av2[5]=lf[492];
 av2[6]=C_SCHEME_TRUE;
-((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
+av2[7]=C_SCHEME_FALSE;
+((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4374 in k4371 in k4368 in k4365 in k4362 in k4359 in k4356 in k4353 in k4350 in k4347 in k4344 in k4341 in k4338 in k4335 in k4332 in k4329 in k4326 in k4323 in k4320 in k4317 in k4314 in k4311 in ... */
 static void C_ccall f_4376(C_word c,C_word *av){
@@ -10836,10 +10807,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[488];
+av2[2]=lf[490];
 av2[3]=C_fix(11);
-av2[4]=C_fix(2);
-av2[5]=lf[489];
+av2[4]=C_fix(1);
+av2[5]=lf[99];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10865,10 +10836,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[486];
+av2[2]=lf[488];
 av2[3]=C_fix(11);
 av2[4]=C_fix(2);
-av2[5]=lf[487];
+av2[5]=lf[489];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10894,10 +10865,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[485];
+av2[2]=lf[486];
 av2[3]=C_fix(11);
-av2[4]=C_fix(3);
-av2[5]=lf[297];
+av2[4]=C_fix(2);
+av2[5]=lf[487];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10923,11 +10894,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[484];
+av2[2]=lf[485];
 av2[3]=C_fix(11);
 av2[4]=C_fix(3);
 av2[5]=lf[297];
-av2[6]=C_SCHEME_FALSE;
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4386 in k4383 in k4380 in k4377 in k4374 in k4371 in k4368 in k4365 in k4362 in k4359 in k4356 in k4353 in k4350 in k4347 in k4344 in k4341 in k4338 in k4335 in k4332 in k4329 in k4326 in k4323 in ... */
@@ -10952,10 +10923,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[483];
+av2[2]=lf[484];
 av2[3]=C_fix(11);
-av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[340];
+av2[4]=C_fix(3);
+av2[5]=lf[297];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -10981,10 +10952,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[481];
+av2[2]=lf[483];
 av2[3]=C_fix(11);
-av2[4]=C_fix(3);
-av2[5]=lf[482];
+av2[4]=C_SCHEME_FALSE;
+av2[5]=lf[340];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -11010,10 +10981,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[479];
+av2[2]=lf[481];
 av2[3]=C_fix(11);
-av2[4]=C_fix(2);
-av2[5]=lf[480];
+av2[4]=C_fix(3);
+av2[5]=lf[482];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -11039,11 +11010,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[477];
+av2[2]=lf[479];
 av2[3]=C_fix(11);
-av2[4]=C_fix(1);
-av2[5]=lf[478];
-av2[6]=C_SCHEME_TRUE;
+av2[4]=C_fix(2);
+av2[5]=lf[480];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in k4374 in k4371 in k4368 in k4365 in k4362 in k4359 in k4356 in k4353 in k4350 in k4347 in k4344 in k4341 in k4338 in k4335 in ... */
@@ -11068,10 +11039,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[475];
+av2[2]=lf[477];
 av2[3]=C_fix(11);
 av2[4]=C_fix(1);
-av2[5]=lf[476];
+av2[5]=lf[478];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -11087,7 +11058,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4403,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4406,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:714: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:713: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -11097,11 +11068,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[473];
+av2[2]=lf[475];
 av2[3]=C_fix(11);
-av2[4]=C_fix(3);
-av2[5]=lf[297];
-av2[6]=C_SCHEME_FALSE;
+av2[4]=C_fix(1);
+av2[5]=lf[476];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in k4374 in k4371 in k4368 in k4365 in k4362 in k4359 in k4356 in k4353 in k4350 in k4347 in k4344 in k4341 in ... */
@@ -11127,10 +11098,10 @@ if(c >= 7) {
 av2[0]=t3;
 av2[1]=t2;
 av2[2]=lf[473];
-av2[3]=C_fix(2);
+av2[3]=C_fix(11);
 av2[4]=C_fix(3);
-av2[5]=lf[474];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[297];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in k4374 in k4371 in k4368 in k4365 in k4362 in k4359 in k4356 in k4353 in k4350 in k4347 in k4344 in ... */
@@ -11145,7 +11116,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4409,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4412,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:717: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:716: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -11155,11 +11126,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[469];
-av2[3]=C_fix(12);
-av2[4]=lf[472];
-av2[5]=C_SCHEME_TRUE;
-av2[6]=C_fix(2);
+av2[2]=lf[473];
+av2[3]=C_fix(2);
+av2[4]=C_fix(3);
+av2[5]=lf[474];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in k4374 in k4371 in k4368 in k4365 in k4362 in k4359 in k4356 in k4353 in k4350 in k4347 in ... */
@@ -11184,9 +11155,9 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[468];
+av2[2]=lf[469];
 av2[3]=C_fix(12);
-av2[4]=lf[471];
+av2[4]=lf[472];
 av2[5]=C_SCHEME_TRUE;
 av2[6]=C_fix(2);
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
@@ -11213,11 +11184,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[470];
+av2[2]=lf[468];
 av2[3]=C_fix(12);
-av2[4]=C_SCHEME_FALSE;
+av2[4]=lf[471];
 av2[5]=C_SCHEME_TRUE;
-av2[6]=C_fix(1);
+av2[6]=C_fix(2);
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in k4374 in k4371 in k4368 in k4365 in k4362 in k4359 in k4356 in k4353 in ... */
@@ -11228,23 +11199,26 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,3)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
 C_save_and_reclaim((void *)f_4418,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4421,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:721: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:720: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 4) {
+if(c >= 7) {
   av2=av;
 } else {
-  av2=C_alloc(4);
+  av2=C_alloc(7);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[469];
-av2[3]=C_fix(19);
-((C_proc)(void*)(*((C_word*)t3+1)))(4,av2);}}
+av2[2]=lf[470];
+av2[3]=C_fix(12);
+av2[4]=C_SCHEME_FALSE;
+av2[5]=C_SCHEME_TRUE;
+av2[6]=C_fix(1);
+((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in k4374 in k4371 in k4368 in k4365 in k4362 in k4359 in k4356 in ... */
 static void C_ccall f_4421(C_word c,C_word *av){
@@ -11268,7 +11242,7 @@ if(c >= 4) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[468];
+av2[2]=lf[469];
 av2[3]=C_fix(19);
 ((C_proc)(void*)(*((C_word*)t3+1)))(4,av2);}}
 
@@ -11280,24 +11254,23 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,4)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,3)))){
 C_save_and_reclaim((void *)f_4424,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4427,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:724: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:723: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 5) {
+if(c >= 4) {
   av2=av;
 } else {
-  av2=C_alloc(5);
+  av2=C_alloc(4);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[469];
-av2[3]=C_fix(18);
-av2[4]=C_fix(0);
-((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
+av2[2]=lf[468];
+av2[3]=C_fix(19);
+((C_proc)(void*)(*((C_word*)t3+1)))(4,av2);}}
 
 /* k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in k4374 in k4371 in k4368 in k4365 in k4362 in ... */
 static void C_ccall f_4427(C_word c,C_word *av){
@@ -11321,9 +11294,9 @@ if(c >= 5) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[468];
+av2[2]=lf[469];
 av2[3]=C_fix(18);
-av2[4]=C_fix(1);
+av2[4]=C_fix(0);
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
 /* k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in k4374 in k4371 in k4368 in k4365 in ... */
@@ -11348,9 +11321,9 @@ if(c >= 5) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[349];
+av2[2]=lf[468];
 av2[3]=C_fix(18);
-av2[4]=C_SCHEME_END_OF_LIST;
+av2[4]=C_fix(1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
 /* k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in k4374 in k4371 in k4368 in ... */
@@ -11360,27 +11333,25 @@ C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word t3;
-C_word t4;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(5,c,6)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,4)))){
 C_save_and_reclaim((void *)f_4433,2,av);}
-a=C_alloc(5);
+a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4436,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_6084,tmp=(C_word)a,a+=2,tmp);
-/* c-platform.scm:728: chicken.compiler.optimizer#rewrite */
-t4=*((C_word*)lf[46]+1);{
+/* c-platform.scm:727: chicken.compiler.optimizer#rewrite */
+t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
   av2=av;
 } else {
   av2=C_alloc(5);
 }
-av2[0]=t4;
+av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[429];
-av2[3]=C_fix(8);
-av2[4]=t3;
-((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
+av2[2]=lf[349];
+av2[3]=C_fix(18);
+av2[4]=C_SCHEME_END_OF_LIST;
+((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
 /* k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in k4374 in k4371 in ... */
 static void C_ccall f_4436(C_word c,C_word *av){
@@ -11395,8 +11366,8 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4436,2,av);}
 a=C_alloc(5);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4439,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5960,tmp=(C_word)a,a+=2,tmp);
-/* c-platform.scm:758: chicken.compiler.optimizer#rewrite */
+t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_6087,tmp=(C_word)a,a+=2,tmp);
+/* c-platform.scm:729: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -11406,7 +11377,7 @@ if(c >= 5) {
 }
 av2[0]=t4;
 av2[1]=t2;
-av2[2]=lf[427];
+av2[2]=lf[429];
 av2[3]=C_fix(8);
 av2[4]=t3;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
@@ -11424,8 +11395,8 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4439,2,av);}
 a=C_alloc(5);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4442,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5836,tmp=(C_word)a,a+=2,tmp);
-/* c-platform.scm:794: chicken.compiler.optimizer#rewrite */
+t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5963,tmp=(C_word)a,a+=2,tmp);
+/* c-platform.scm:759: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -11435,7 +11406,7 @@ if(c >= 5) {
 }
 av2[0]=t4;
 av2[1]=t2;
-av2[2]=lf[424];
+av2[2]=lf[427];
 av2[3]=C_fix(8);
 av2[4]=t3;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
@@ -11449,12 +11420,41 @@ C_word t2;
 C_word t3;
 C_word t4;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(6,c,6)))){
+if(C_unlikely(!C_demand(C_calculate_demand(5,c,6)))){
 C_save_and_reclaim((void *)f_4442,2,av);}
+a=C_alloc(5);
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4445,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5839,tmp=(C_word)a,a+=2,tmp);
+/* c-platform.scm:795: chicken.compiler.optimizer#rewrite */
+t4=*((C_word*)lf[46]+1);{
+C_word *av2;
+if(c >= 5) {
+  av2=av;
+} else {
+  av2=C_alloc(5);
+}
+av2[0]=t4;
+av2[1]=t2;
+av2[2]=lf[424];
+av2[3]=C_fix(8);
+av2[4]=t3;
+((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
+
+/* k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
+static void C_ccall f_4445(C_word c,C_word *av){
+C_word tmp;
+C_word t0=av[0];
+C_word t1=av[1];
+C_word t2;
+C_word t3;
+C_word t4;
+C_word *a;
+if(C_unlikely(!C_demand(C_calculate_demand(6,c,6)))){
+C_save_and_reclaim((void *)f_4445,2,av);}
 a=C_alloc(6);
-t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_4444,tmp=(C_word)a,a+=2,tmp);
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_4577,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:856: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_4447,tmp=(C_word)a,a+=2,tmp);
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_4580,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:857: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -11469,8 +11469,8 @@ av2[3]=C_fix(8);
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* rewrite-div in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
-static void C_ccall f_4444(C_word c,C_word *av){
+/* rewrite-div in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
+static void C_ccall f_4447(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -11489,7 +11489,7 @@ C_word t13;
 C_word t14;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(7,c,3)))){
-C_save_and_reclaim((void *)f_4444,6,av);}
+C_save_and_reclaim((void *)f_4447,6,av);}
 a=C_alloc(7);
 t6=C_eqp(*((C_word*)lf[25]+1),lf[24]);
 if(C_truep(t6)){
@@ -11497,12 +11497,12 @@ t7=C_i_length(t5);
 if(C_truep(C_fixnum_greater_or_equal_p(t7,C_fix(2)))){
 t8=C_i_car(t5);
 t9=t8;
-t10=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_4539,a[2]=t9,a[3]=t4,a[4]=t1,tmp=(C_word)a,a+=5,tmp);
-t11=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_4541,tmp=(C_word)a,a+=2,tmp);
+t10=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_4542,a[2]=t9,a[3]=t4,a[4]=t1,tmp=(C_word)a,a+=5,tmp);
+t11=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_4544,tmp=(C_word)a,a+=2,tmp);
 t12=t5;
 t13=C_u_i_cdr(t12);
-/* c-platform.scm:840: filter */
-f_2293(t10,t11,t13);}
+/* c-platform.scm:841: filter */
+f_2295(t10,t11,t13);}
 else{
 t8=t1;{
 C_word *av2=av;
@@ -11516,8 +11516,8 @@ av2[0]=t7;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t7+1)))(2,av2);}}}
 
-/* k4479 in k4537 in rewrite-div in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
-static void C_ccall f_4481(C_word c,C_word *av){
+/* k4482 in k4540 in rewrite-div in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
+static void C_ccall f_4484(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -11525,10 +11525,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_4481,2,av);}
+C_save_and_reclaim((void *)f_4484,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:846: chicken.compiler.support#make-node */
+/* c-platform.scm:847: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -11543,8 +11543,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* a4482 in k4537 in rewrite-div in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
-static void C_ccall f_4483(C_word c,C_word *av){
+/* a4485 in k4540 in rewrite-div in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
+static void C_ccall f_4486(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -11555,11 +11555,11 @@ C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(9,c,2)))){
-C_save_and_reclaim((void *)f_4483,4,av);}
+C_save_and_reclaim((void *)f_4486,4,av);}
 a=C_alloc(9);
-t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_4490,a[2]=t2,a[3]=t1,a[4]=t3,tmp=(C_word)a,a+=5,tmp);
-t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_4526,a[2]=t4,a[3]=t3,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:852: chicken.compiler.support#node-class */
+t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_4493,a[2]=t2,a[3]=t1,a[4]=t3,tmp=(C_word)a,a+=5,tmp);
+t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_4529,a[2]=t4,a[3]=t3,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:853: chicken.compiler.support#node-class */
 t6=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t6;
@@ -11567,18 +11567,18 @@ av2[1]=t5;
 av2[2]=t3;
 ((C_proc)(void*)(*((C_word*)t6+1)))(3,av2);}}
 
-/* k4488 in a4482 in k4537 in rewrite-div in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
-static void C_fcall f_4490(C_word t0,C_word t1){
+/* k4491 in a4485 in k4540 in rewrite-div in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in ... */
+static void C_fcall f_4493(C_word t0,C_word t1){
 C_word tmp;
 C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,0,4)))){
-C_save_and_reclaim_args((void *)trf_4490,2,t0,t1);}
+C_save_and_reclaim_args((void *)trf_4493,2,t0,t1);}
 a=C_alloc(6);
 if(C_truep(t1)){
-t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_4501,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:853: chicken.compiler.support#qnode */
+t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_4504,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:854: chicken.compiler.support#qnode */
 t3=*((C_word*)lf[29]+1);{
 C_word av2[3];
 av2[0]=t3;
@@ -11587,7 +11587,7 @@ av2[2]=C_fix(1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(3,av2);}}
 else{
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],((C_word*)t0)[4]);
-/* c-platform.scm:854: chicken.compiler.support#make-node */
+/* c-platform.scm:855: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word av2[5];
 av2[0]=t3;
@@ -11597,8 +11597,8 @@ av2[3]=lf[59];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}}
 
-/* k4499 in k4488 in a4482 in k4537 in rewrite-div in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in ... */
-static void C_ccall f_4501(C_word c,C_word *av){
+/* k4502 in k4491 in a4485 in k4540 in rewrite-div in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in ... */
+static void C_ccall f_4504(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -11606,10 +11606,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_4501,2,av);}
+C_save_and_reclaim((void *)f_4504,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:853: chicken.compiler.support#make-node */
+/* c-platform.scm:854: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -11624,8 +11624,8 @@ av2[3]=lf[58];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k4520 in k4524 in a4482 in k4537 in rewrite-div in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in ... */
-static void C_ccall f_4522(C_word c,C_word *av){
+/* k4523 in k4527 in a4485 in k4540 in rewrite-div in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in ... */
+static void C_ccall f_4525(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -11633,13 +11633,13 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
-C_save_and_reclaim((void *)f_4522,2,av);}
+C_save_and_reclaim((void *)f_4525,2,av);}
 t2=C_i_car(t1);
 t3=((C_word*)t0)[2];
-f_4490(t3,C_eqp(C_fix(2),t2));}
+f_4493(t3,C_eqp(C_fix(2),t2));}
 
-/* k4524 in a4482 in k4537 in rewrite-div in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
-static void C_ccall f_4526(C_word c,C_word *av){
+/* k4527 in a4485 in k4540 in rewrite-div in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in ... */
+static void C_ccall f_4529(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -11648,12 +11648,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_4526,2,av);}
+C_save_and_reclaim((void *)f_4529,2,av);}
 a=C_alloc(3);
 t2=C_eqp(lf[31],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4522,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:852: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4525,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:853: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -11667,10 +11667,10 @@ av2[2]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}
 else{
 t3=((C_word*)t0)[2];
-f_4490(t3,C_SCHEME_FALSE);}}
+f_4493(t3,C_SCHEME_FALSE);}}
 
-/* k4537 in rewrite-div in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
-static void C_ccall f_4539(C_word c,C_word *av){
+/* k4540 in rewrite-div in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
+static void C_ccall f_4542(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -11683,16 +11683,16 @@ C_word t7;
 C_word t8;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(13,c,4)))){
-C_save_and_reclaim((void *)f_4539,2,av);}
+C_save_and_reclaim((void *)f_4542,2,av);}
 a=C_alloc(13);
 t2=C_a_i_cons(&a,2,((C_word*)t0)[2],t1);
 t3=C_i_length(t2);
 if(C_truep(C_fixnum_greater_or_equal_p(t3,C_fix(2)))){
 t4=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t5=t4;
-t6=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_4481,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t5,tmp=(C_word)a,a+=5,tmp);
-t7=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_4483,tmp=(C_word)a,a+=2,tmp);
-/* c-platform.scm:850: chicken.compiler.support#fold-inner */
+t6=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_4484,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t5,tmp=(C_word)a,a+=5,tmp);
+t7=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_4486,tmp=(C_word)a,a+=2,tmp);
+/* c-platform.scm:851: chicken.compiler.support#fold-inner */
 t8=*((C_word*)lf[60]+1);{
 C_word *av2;
 if(c >= 4) {
@@ -11712,8 +11712,8 @@ av2[0]=t4;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}}
 
-/* a4540 in rewrite-div in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
-static void C_ccall f_4541(C_word c,C_word *av){
+/* a4543 in rewrite-div in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
+static void C_ccall f_4544(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -11722,10 +11722,10 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
-C_save_and_reclaim((void *)f_4541,3,av);}
+C_save_and_reclaim((void *)f_4544,3,av);}
 a=C_alloc(4);
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_4567,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:842: chicken.compiler.support#node-class */
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_4570,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:843: chicken.compiler.support#node-class */
 t4=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t4;
@@ -11733,8 +11733,8 @@ av2[1]=t3;
 av2[2]=t2;
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}
 
-/* k4561 in k4565 in a4540 in rewrite-div in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
-static void C_ccall f_4563(C_word c,C_word *av){
+/* k4564 in k4568 in a4543 in rewrite-div in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in ... */
+static void C_ccall f_4566(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -11743,7 +11743,7 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
-C_save_and_reclaim((void *)f_4563,2,av);}
+C_save_and_reclaim((void *)f_4566,2,av);}
 t2=C_i_car(t1);
 t3=C_eqp(C_fix(1),t2);
 t4=((C_word*)t0)[2];{
@@ -11752,8 +11752,8 @@ av2[0]=t4;
 av2[1]=C_i_not(t3);
 ((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}
 
-/* k4565 in a4540 in rewrite-div in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
-static void C_ccall f_4567(C_word c,C_word *av){
+/* k4568 in a4543 in rewrite-div in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
+static void C_ccall f_4570(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -11762,12 +11762,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_4567,2,av);}
+C_save_and_reclaim((void *)f_4570,2,av);}
 a=C_alloc(3);
 t2=C_eqp(lf[31],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4563,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:843: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4566,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:844: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -11786,8 +11786,8 @@ av2[0]=t3;
 av2[1]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
-static void C_ccall f_4577(C_word c,C_word *av){
+/* k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
+static void C_ccall f_4580(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -11795,10 +11795,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,4)))){
-C_save_and_reclaim((void *)f_4577,2,av);}
+C_save_and_reclaim((void *)f_4580,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4580,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:857: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4583,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:858: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -11813,8 +11813,8 @@ av2[3]=C_fix(8);
 av2[4]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
-static void C_ccall f_4580(C_word c,C_word *av){
+/* k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
+static void C_ccall f_4583(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -11823,11 +11823,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,6)))){
-C_save_and_reclaim((void *)f_4580,2,av);}
+C_save_and_reclaim((void *)f_4583,2,av);}
 a=C_alloc(5);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4583,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5759,tmp=(C_word)a,a+=2,tmp);
-/* c-platform.scm:859: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4586,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5762,tmp=(C_word)a,a+=2,tmp);
+/* c-platform.scm:860: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -11842,33 +11842,7 @@ av2[3]=C_fix(8);
 av2[4]=t3;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
-static void C_ccall f_4583(C_word c,C_word *av){
-C_word tmp;
-C_word t0=av[0];
-C_word t1=av[1];
-C_word t2;
-C_word t3;
-C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,3)))){
-C_save_and_reclaim((void *)f_4583,2,av);}
-a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4586,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:877: chicken.compiler.optimizer#rewrite */
-t3=*((C_word*)lf[46]+1);{
-C_word *av2;
-if(c >= 4) {
-  av2=av;
-} else {
-  av2=C_alloc(4);
-}
-av2[0]=t3;
-av2[1]=t2;
-av2[2]=lf[427];
-av2[3]=C_fix(19);
-((C_proc)(void*)(*((C_word*)t3+1)))(4,av2);}}
-
-/* k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
+/* k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
 static void C_ccall f_4586(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -11890,11 +11864,11 @@ if(c >= 4) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[424];
+av2[2]=lf[427];
 av2[3]=C_fix(19);
 ((C_proc)(void*)(*((C_word*)t3+1)))(4,av2);}}
 
-/* k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in ... */
+/* k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in ... */
 static void C_ccall f_4589(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -11916,11 +11890,11 @@ if(c >= 4) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[429];
+av2[2]=lf[424];
 av2[3]=C_fix(19);
 ((C_proc)(void*)(*((C_word*)t3+1)))(4,av2);}}
 
-/* k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in ... */
+/* k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in ... */
 static void C_ccall f_4592(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -11942,11 +11916,11 @@ if(c >= 4) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[454];
+av2[2]=lf[429];
 av2[3]=C_fix(19);
 ((C_proc)(void*)(*((C_word*)t3+1)))(4,av2);}}
 
-/* k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in ... */
+/* k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in ... */
 static void C_ccall f_4595(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -11954,29 +11928,25 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,3)))){
 C_save_and_reclaim((void *)f_4595,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4598,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:882: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:881: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 8) {
+if(c >= 4) {
   av2=av;
 } else {
-  av2=C_alloc(8);
+  av2=C_alloc(4);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[427];
-av2[3]=C_fix(16);
-av2[4]=C_fix(2);
-av2[5]=lf[453];
-av2[6]=C_SCHEME_TRUE;
-av2[7]=C_fix(29);
-((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
+av2[2]=lf[454];
+av2[3]=C_fix(19);
+((C_proc)(void*)(*((C_word*)t3+1)))(4,av2);}}
 
-/* k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in ... */
+/* k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in ... */
 static void C_ccall f_4598(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -11998,15 +11968,15 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[424];
+av2[2]=lf[427];
 av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[452];
+av2[5]=lf[453];
 av2[6]=C_SCHEME_TRUE;
 av2[7]=C_fix(29);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
-/* k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in ... */
+/* k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in ... */
 static void C_ccall f_4601(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -12028,15 +11998,15 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[429];
+av2[2]=lf[424];
 av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[451];
+av2[5]=lf[452];
 av2[6]=C_SCHEME_TRUE;
-av2[7]=C_fix(33);
+av2[7]=C_fix(29);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
-/* k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in ... */
+/* k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in ... */
 static void C_ccall f_4604(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -12058,15 +12028,15 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[449];
+av2[2]=lf[429];
 av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[450];
+av2[5]=lf[451];
 av2[6]=C_SCHEME_TRUE;
-av2[7]=C_fix(5);
+av2[7]=C_fix(33);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
-/* k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in ... */
+/* k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in ... */
 static void C_ccall f_4607(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -12088,15 +12058,15 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[400];
+av2[2]=lf[449];
 av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[448];
+av2[5]=lf[450];
 av2[6]=C_SCHEME_TRUE;
 av2[7]=C_fix(5);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
-/* k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in ... */
+/* k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in ... */
 static void C_ccall f_4610(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -12118,15 +12088,15 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[446];
+av2[2]=lf[400];
 av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[447];
+av2[5]=lf[448];
 av2[6]=C_SCHEME_TRUE;
 av2[7]=C_fix(5);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
-/* k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in ... */
+/* k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in ... */
 static void C_ccall f_4613(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -12134,27 +12104,29 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
 C_save_and_reclaim((void *)f_4613,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4616,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:889: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:888: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 6) {
+if(c >= 8) {
   av2=av;
 } else {
-  av2=C_alloc(6);
+  av2=C_alloc(8);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[439];
-av2[3]=C_fix(17);
+av2[2]=lf[446];
+av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[445];
-((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
+av2[5]=lf[447];
+av2[6]=C_SCHEME_TRUE;
+av2[7]=C_fix(5);
+((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
-/* k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in ... */
+/* k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in ... */
 static void C_ccall f_4616(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -12176,13 +12148,13 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[437];
+av2[2]=lf[439];
 av2[3]=C_fix(17);
 av2[4]=C_fix(2);
-av2[5]=lf[444];
+av2[5]=lf[445];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
-/* k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in ... */
+/* k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in ... */
 static void C_ccall f_4619(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -12204,13 +12176,13 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[435];
+av2[2]=lf[437];
 av2[3]=C_fix(17);
 av2[4]=C_fix(2);
-av2[5]=lf[443];
+av2[5]=lf[444];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
-/* k4620 in k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in ... */
+/* k4620 in k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in ... */
 static void C_ccall f_4622(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -12232,13 +12204,13 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[433];
+av2[2]=lf[435];
 av2[3]=C_fix(17);
 av2[4]=C_fix(2);
-av2[5]=lf[442];
+av2[5]=lf[443];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
-/* k4623 in k4620 in k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in ... */
+/* k4623 in k4620 in k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in ... */
 static void C_ccall f_4625(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -12260,13 +12232,13 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[431];
+av2[2]=lf[433];
 av2[3]=C_fix(17);
 av2[4]=C_fix(2);
-av2[5]=lf[441];
+av2[5]=lf[442];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
-/* k4626 in k4623 in k4620 in k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in ... */
+/* k4626 in k4623 in k4620 in k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in ... */
 static void C_ccall f_4628(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -12274,28 +12246,27 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
 C_save_and_reclaim((void *)f_4628,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4631,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:895: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:894: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 7) {
+if(c >= 6) {
   av2=av;
 } else {
-  av2=C_alloc(7);
+  av2=C_alloc(6);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[439];
-av2[3]=C_fix(13);
-av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[440];
-av2[6]=C_SCHEME_TRUE;
-((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
+av2[2]=lf[431];
+av2[3]=C_fix(17);
+av2[4]=C_fix(2);
+av2[5]=lf[441];
+((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
-/* k4629 in k4626 in k4623 in k4620 in k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in k4434 in ... */
+/* k4629 in k4626 in k4623 in k4620 in k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in ... */
 static void C_ccall f_4631(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -12317,14 +12288,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[437];
+av2[2]=lf[439];
 av2[3]=C_fix(13);
 av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[438];
+av2[5]=lf[440];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4632 in k4629 in k4626 in k4623 in k4620 in k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in k4437 in ... */
+/* k4632 in k4629 in k4626 in k4623 in k4620 in k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in k4437 in ... */
 static void C_ccall f_4634(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -12346,14 +12317,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[435];
+av2[2]=lf[437];
 av2[3]=C_fix(13);
 av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[436];
+av2[5]=lf[438];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4635 in k4632 in k4629 in k4626 in k4623 in k4620 in k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in k4440 in ... */
+/* k4635 in k4632 in k4629 in k4626 in k4623 in k4620 in k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in k4440 in ... */
 static void C_ccall f_4637(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -12375,14 +12346,14 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[433];
+av2[2]=lf[435];
 av2[3]=C_fix(13);
 av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[434];
+av2[5]=lf[436];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4638 in k4635 in k4632 in k4629 in k4626 in k4623 in k4620 in k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4575 in ... */
+/* k4638 in k4635 in k4632 in k4629 in k4626 in k4623 in k4620 in k4617 in k4614 in k4611 in k4608 in k4605 in k4602 in k4599 in k4596 in k4593 in k4590 in k4587 in k4584 in k4581 in k4578 in k4443 in ... */
 static void C_ccall f_4640(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
@@ -12404,10 +12375,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[431];
+av2[2]=lf[433];
 av2[3]=C_fix(13);
 av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[432];
+av2[5]=lf[434];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -12423,7 +12394,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4643,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4646,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:901: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:900: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -12433,10 +12404,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[429];
+av2[2]=lf[431];
 av2[3]=C_fix(13);
 av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[430];
+av2[5]=lf[432];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -12462,10 +12433,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[427];
+av2[2]=lf[429];
 av2[3]=C_fix(13);
 av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[428];
+av2[5]=lf[430];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -12491,10 +12462,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[424];
+av2[2]=lf[427];
 av2[3]=C_fix(13);
-av2[4]=lf[425];
-av2[5]=lf[426];
+av2[4]=C_SCHEME_FALSE;
+av2[5]=lf[428];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -12510,7 +12481,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4652,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4655,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:905: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:904: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -12520,10 +12491,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[421];
+av2[2]=lf[424];
 av2[3]=C_fix(13);
-av2[4]=lf[422];
-av2[5]=lf[423];
+av2[4]=lf[425];
+av2[5]=lf[426];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -12549,10 +12520,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[419];
+av2[2]=lf[421];
 av2[3]=C_fix(13);
-av2[4]=C_fix(1);
-av2[5]=lf[420];
+av2[4]=lf[422];
+av2[5]=lf[423];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -12578,10 +12549,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[417];
+av2[2]=lf[419];
 av2[3]=C_fix(13);
-av2[4]=C_fix(4);
-av2[5]=lf[418];
+av2[4]=C_fix(1);
+av2[5]=lf[420];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -12607,10 +12578,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[415];
+av2[2]=lf[417];
 av2[3]=C_fix(13);
-av2[4]=C_fix(1);
-av2[5]=lf[416];
+av2[4]=C_fix(4);
+av2[5]=lf[418];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -12636,10 +12607,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[413];
+av2[2]=lf[415];
 av2[3]=C_fix(13);
-av2[4]=C_fix(0);
-av2[5]=lf[414];
+av2[4]=C_fix(1);
+av2[5]=lf[416];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -12665,10 +12636,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[411];
+av2[2]=lf[413];
 av2[3]=C_fix(13);
-av2[4]=C_fix(1);
-av2[5]=lf[412];
+av2[4]=C_fix(0);
+av2[5]=lf[414];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -12694,10 +12665,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[409];
+av2[2]=lf[411];
 av2[3]=C_fix(13);
 av2[4]=C_fix(1);
-av2[5]=lf[410];
+av2[5]=lf[412];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -12723,10 +12694,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[407];
+av2[2]=lf[409];
 av2[3]=C_fix(13);
 av2[4]=C_fix(1);
-av2[5]=lf[408];
+av2[5]=lf[410];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -12738,27 +12709,26 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
 C_save_and_reclaim((void *)f_4676,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4679,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:914: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:913: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 8) {
+if(c >= 7) {
   av2=av;
 } else {
-  av2=C_alloc(8);
+  av2=C_alloc(7);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[398];
-av2[3]=C_fix(14);
-av2[4]=lf[24];
-av2[5]=C_fix(1);
-av2[6]=lf[405];
-av2[7]=lf[406];
-((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
+av2[2]=lf[407];
+av2[3]=C_fix(13);
+av2[4]=C_fix(1);
+av2[5]=lf[408];
+av2[6]=C_SCHEME_TRUE;
+((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4677 in k4674 in k4671 in k4668 in k4665 in k4662 in k4659 in k4656 in k4653 in k4650 in k4647 in k4644 in k4641 in k4638 in k4635 in k4632 in k4629 in k4626 in k4623 in k4620 in k4617 in k4614 in ... */
 static void C_ccall f_4679(C_word c,C_word *av){
@@ -12782,12 +12752,12 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[396];
+av2[2]=lf[398];
 av2[3]=C_fix(14);
 av2[4]=lf[24];
 av2[5]=C_fix(1);
-av2[6]=lf[403];
-av2[7]=lf[404];
+av2[6]=lf[405];
+av2[7]=lf[406];
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4680 in k4677 in k4674 in k4671 in k4668 in k4665 in k4662 in k4659 in k4656 in k4653 in k4650 in k4647 in k4644 in k4641 in k4638 in k4635 in k4632 in k4629 in k4626 in k4623 in k4620 in k4617 in ... */
@@ -12812,12 +12782,12 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[400];
+av2[2]=lf[396];
 av2[3]=C_fix(14);
 av2[4]=lf[24];
-av2[5]=C_fix(2);
-av2[6]=lf[401];
-av2[7]=lf[402];
+av2[5]=C_fix(1);
+av2[6]=lf[403];
+av2[7]=lf[404];
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4683 in k4680 in k4677 in k4674 in k4671 in k4668 in k4665 in k4662 in k4659 in k4656 in k4653 in k4650 in k4647 in k4644 in k4641 in k4638 in k4635 in k4632 in k4629 in k4626 in k4623 in k4620 in ... */
@@ -12828,25 +12798,27 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
 C_save_and_reclaim((void *)f_4685,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4688,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:918: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:917: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 6) {
+if(c >= 8) {
   av2=av;
 } else {
-  av2=C_alloc(6);
+  av2=C_alloc(8);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[398];
-av2[3]=C_fix(17);
-av2[4]=C_fix(1);
-av2[5]=lf[399];
-((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
+av2[2]=lf[400];
+av2[3]=C_fix(14);
+av2[4]=lf[24];
+av2[5]=C_fix(2);
+av2[6]=lf[401];
+av2[7]=lf[402];
+((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4686 in k4683 in k4680 in k4677 in k4674 in k4671 in k4668 in k4665 in k4662 in k4659 in k4656 in k4653 in k4650 in k4647 in k4644 in k4641 in k4638 in k4635 in k4632 in k4629 in k4626 in k4623 in ... */
 static void C_ccall f_4688(C_word c,C_word *av){
@@ -12870,10 +12842,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[396];
+av2[2]=lf[398];
 av2[3]=C_fix(17);
 av2[4]=C_fix(1);
-av2[5]=lf[397];
+av2[5]=lf[399];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4689 in k4686 in k4683 in k4680 in k4677 in k4674 in k4671 in k4668 in k4665 in k4662 in k4659 in k4656 in k4653 in k4650 in k4647 in k4644 in k4641 in k4638 in k4635 in k4632 in k4629 in k4626 in ... */
@@ -12884,26 +12856,25 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
 C_save_and_reclaim((void *)f_4691,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4694,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:921: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:920: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 7) {
+if(c >= 6) {
   av2=av;
 } else {
-  av2=C_alloc(7);
+  av2=C_alloc(6);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[394];
-av2[3]=C_fix(2);
+av2[2]=lf[396];
+av2[3]=C_fix(17);
 av2[4]=C_fix(1);
-av2[5]=lf[395];
-av2[6]=C_SCHEME_TRUE;
-((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
+av2[5]=lf[397];
+((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4692 in k4689 in k4686 in k4683 in k4680 in k4677 in k4674 in k4671 in k4668 in k4665 in k4662 in k4659 in k4656 in k4653 in k4650 in k4647 in k4644 in k4641 in k4638 in k4635 in k4632 in k4629 in ... */
 static void C_ccall f_4694(C_word c,C_word *av){
@@ -12927,10 +12898,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[392];
+av2[2]=lf[394];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[393];
+av2[5]=lf[395];
 av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -12942,27 +12913,26 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
 C_save_and_reclaim((void *)f_4697,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4700,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:924: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:923: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 8) {
+if(c >= 7) {
   av2=av;
 } else {
-  av2=C_alloc(8);
+  av2=C_alloc(7);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[390];
-av2[3]=C_fix(15);
-av2[4]=lf[388];
-av2[5]=lf[24];
-av2[6]=lf[391];
-av2[7]=C_SCHEME_FALSE;
-((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
+av2[2]=lf[392];
+av2[3]=C_fix(2);
+av2[4]=C_fix(1);
+av2[5]=lf[393];
+av2[6]=C_SCHEME_TRUE;
+((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4698 in k4695 in k4692 in k4689 in k4686 in k4683 in k4680 in k4677 in k4674 in k4671 in k4668 in k4665 in k4662 in k4659 in k4656 in k4653 in k4650 in k4647 in k4644 in k4641 in k4638 in k4635 in ... */
 static void C_ccall f_4700(C_word c,C_word *av){
@@ -12986,11 +12956,11 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[389];
+av2[2]=lf[390];
 av2[3]=C_fix(15);
 av2[4]=lf[388];
 av2[5]=lf[24];
-av2[6]=lf[358];
+av2[6]=lf[391];
 av2[7]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
@@ -13016,11 +12986,11 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[387];
+av2[2]=lf[389];
 av2[3]=C_fix(15);
 av2[4]=lf[388];
 av2[5]=lf[24];
-av2[6]=lf[361];
+av2[6]=lf[358];
 av2[7]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
@@ -13036,7 +13006,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4706,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4709,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:928: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:927: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -13046,12 +13016,12 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[385];
-av2[3]=C_fix(16);
-av2[4]=C_fix(1);
-av2[5]=lf[386];
-av2[6]=C_SCHEME_FALSE;
-av2[7]=*((C_word*)lf[11]+1);
+av2[2]=lf[387];
+av2[3]=C_fix(15);
+av2[4]=lf[388];
+av2[5]=lf[24];
+av2[6]=lf[361];
+av2[7]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4707 in k4704 in k4701 in k4698 in k4695 in k4692 in k4689 in k4686 in k4683 in k4680 in k4677 in k4674 in k4671 in k4668 in k4665 in k4662 in k4659 in k4656 in k4653 in k4650 in k4647 in k4644 in ... */
@@ -13076,10 +13046,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[383];
+av2[2]=lf[385];
 av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[384];
+av2[5]=lf[386];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13106,10 +13076,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[381];
+av2[2]=lf[383];
 av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[382];
+av2[5]=lf[384];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13136,10 +13106,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[379];
+av2[2]=lf[381];
 av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[380];
+av2[5]=lf[382];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13166,10 +13136,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[377];
+av2[2]=lf[379];
 av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[378];
+av2[5]=lf[380];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13196,10 +13166,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[375];
+av2[2]=lf[377];
 av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[376];
+av2[5]=lf[378];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13226,10 +13196,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[373];
+av2[2]=lf[375];
 av2[3]=C_fix(16);
-av2[4]=C_fix(2);
-av2[5]=lf[374];
+av2[4]=C_fix(1);
+av2[5]=lf[376];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13256,10 +13226,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[371];
+av2[2]=lf[373];
 av2[3]=C_fix(16);
-av2[4]=C_fix(1);
-av2[5]=lf[372];
+av2[4]=C_fix(2);
+av2[5]=lf[374];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13286,10 +13256,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[369];
+av2[2]=lf[371];
 av2[3]=C_fix(16);
-av2[4]=C_fix(2);
-av2[5]=lf[370];
+av2[4]=C_fix(1);
+av2[5]=lf[372];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13316,10 +13286,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[367];
+av2[2]=lf[369];
 av2[3]=C_fix(16);
-av2[4]=C_fix(1);
-av2[5]=lf[368];
+av2[4]=C_fix(2);
+av2[5]=lf[370];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13346,10 +13316,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[365];
+av2[2]=lf[367];
 av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[366];
+av2[5]=lf[368];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13376,10 +13346,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[363];
+av2[2]=lf[365];
 av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[364];
+av2[5]=lf[366];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13406,10 +13376,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[361];
+av2[2]=lf[363];
 av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[362];
+av2[5]=lf[364];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13436,10 +13406,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[356];
+av2[2]=lf[361];
 av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[360];
+av2[5]=lf[362];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13466,10 +13436,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[358];
+av2[2]=lf[356];
 av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[359];
+av2[5]=lf[360];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13496,10 +13466,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[356];
+av2[2]=lf[358];
 av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[357];
+av2[5]=lf[359];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13516,7 +13486,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4754,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4757,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:945: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:944: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -13526,12 +13496,12 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[354];
+av2[2]=lf[356];
 av2[3]=C_fix(16);
-av2[4]=C_fix(2);
-av2[5]=lf[355];
-av2[6]=C_SCHEME_TRUE;
-av2[7]=C_fix(3);
+av2[4]=C_fix(1);
+av2[5]=lf[357];
+av2[6]=C_SCHEME_FALSE;
+av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4755 in k4752 in k4749 in k4746 in k4743 in k4740 in k4737 in k4734 in k4731 in k4728 in k4725 in k4722 in k4719 in k4716 in k4713 in k4710 in k4707 in k4704 in k4701 in k4698 in k4695 in k4692 in ... */
@@ -13556,10 +13526,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[352];
+av2[2]=lf[354];
 av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[353];
+av2[5]=lf[355];
 av2[6]=C_SCHEME_TRUE;
 av2[7]=C_fix(3);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -13572,28 +13542,27 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,8)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
 C_save_and_reclaim((void *)f_4760,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4763,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
 /* c-platform.scm:947: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 9) {
+if(c >= 8) {
   av2=av;
 } else {
-  av2=C_alloc(9);
+  av2=C_alloc(8);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[349];
+av2[2]=lf[352];
 av2[3]=C_fix(16);
-av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[350];
+av2[4]=C_fix(2);
+av2[5]=lf[353];
 av2[6]=C_SCHEME_TRUE;
-av2[7]=lf[351];
-av2[8]=C_SCHEME_TRUE;
-((C_proc)(void*)(*((C_word*)t3+1)))(9,av2);}}
+av2[7]=C_fix(3);
+((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4761 in k4758 in k4755 in k4752 in k4749 in k4746 in k4743 in k4740 in k4737 in k4734 in k4731 in k4728 in k4725 in k4722 in k4719 in k4716 in k4713 in k4710 in k4707 in k4704 in k4701 in k4698 in ... */
 static void C_ccall f_4763(C_word c,C_word *av){
@@ -13603,27 +13572,28 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,8)))){
 C_save_and_reclaim((void *)f_4763,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4766,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
 /* c-platform.scm:948: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 8) {
+if(c >= 9) {
   av2=av;
 } else {
-  av2=C_alloc(8);
+  av2=C_alloc(9);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[346];
+av2[2]=lf[349];
 av2[3]=C_fix(16);
 av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[347];
+av2[5]=lf[350];
 av2[6]=C_SCHEME_TRUE;
-av2[7]=lf[348];
-((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
+av2[7]=lf[351];
+av2[8]=C_SCHEME_TRUE;
+((C_proc)(void*)(*((C_word*)t3+1)))(9,av2);}}
 
 /* k4764 in k4761 in k4758 in k4755 in k4752 in k4749 in k4746 in k4743 in k4740 in k4737 in k4734 in k4731 in k4728 in k4725 in k4722 in k4719 in k4716 in k4713 in k4710 in k4707 in k4704 in k4701 in ... */
 static void C_ccall f_4766(C_word c,C_word *av){
@@ -13633,28 +13603,27 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,8)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
 C_save_and_reclaim((void *)f_4766,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4769,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
 /* c-platform.scm:949: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 9) {
+if(c >= 8) {
   av2=av;
 } else {
-  av2=C_alloc(9);
+  av2=C_alloc(8);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[344];
+av2[2]=lf[346];
 av2[3]=C_fix(16);
 av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[345];
+av2[5]=lf[347];
 av2[6]=C_SCHEME_TRUE;
-av2[7]=C_SCHEME_TRUE;
-av2[8]=C_SCHEME_TRUE;
-((C_proc)(void*)(*((C_word*)t3+1)))(9,av2);}}
+av2[7]=lf[348];
+((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4767 in k4764 in k4761 in k4758 in k4755 in k4752 in k4749 in k4746 in k4743 in k4740 in k4737 in k4734 in k4731 in k4728 in k4725 in k4722 in k4719 in k4716 in k4713 in k4710 in k4707 in k4704 in ... */
 static void C_ccall f_4769(C_word c,C_word *av){
@@ -13664,27 +13633,28 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,8)))){
 C_save_and_reclaim((void *)f_4769,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4772,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
 /* c-platform.scm:950: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 8) {
+if(c >= 9) {
   av2=av;
 } else {
-  av2=C_alloc(8);
+  av2=C_alloc(9);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[342];
+av2[2]=lf[344];
 av2[3]=C_fix(16);
 av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[343];
+av2[5]=lf[345];
 av2[6]=C_SCHEME_TRUE;
 av2[7]=C_SCHEME_TRUE;
-((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
+av2[8]=C_SCHEME_TRUE;
+((C_proc)(void*)(*((C_word*)t3+1)))(9,av2);}}
 
 /* k4770 in k4767 in k4764 in k4761 in k4758 in k4755 in k4752 in k4749 in k4746 in k4743 in k4740 in k4737 in k4734 in k4731 in k4728 in k4725 in k4722 in k4719 in k4716 in k4713 in k4710 in k4707 in ... */
 static void C_ccall f_4772(C_word c,C_word *av){
@@ -13694,28 +13664,27 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,8)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
 C_save_and_reclaim((void *)f_4772,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4775,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
 /* c-platform.scm:951: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 9) {
+if(c >= 8) {
   av2=av;
 } else {
-  av2=C_alloc(9);
+  av2=C_alloc(8);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[340];
+av2[2]=lf[342];
 av2[3]=C_fix(16);
 av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[341];
+av2[5]=lf[343];
 av2[6]=C_SCHEME_TRUE;
 av2[7]=C_SCHEME_TRUE;
-av2[8]=C_SCHEME_TRUE;
-((C_proc)(void*)(*((C_word*)t3+1)))(9,av2);}}
+((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4773 in k4770 in k4767 in k4764 in k4761 in k4758 in k4755 in k4752 in k4749 in k4746 in k4743 in k4740 in k4737 in k4734 in k4731 in k4728 in k4725 in k4722 in k4719 in k4716 in k4713 in k4710 in ... */
 static void C_ccall f_4775(C_word c,C_word *av){
@@ -13725,27 +13694,28 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,8)))){
 C_save_and_reclaim((void *)f_4775,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4778,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
 /* c-platform.scm:952: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 8) {
+if(c >= 9) {
   av2=av;
 } else {
-  av2=C_alloc(8);
+  av2=C_alloc(9);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[338];
+av2[2]=lf[340];
 av2[3]=C_fix(16);
 av2[4]=C_SCHEME_FALSE;
-av2[5]=lf[339];
+av2[5]=lf[341];
 av2[6]=C_SCHEME_TRUE;
 av2[7]=C_SCHEME_TRUE;
-((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
+av2[8]=C_SCHEME_TRUE;
+((C_proc)(void*)(*((C_word*)t3+1)))(9,av2);}}
 
 /* k4776 in k4773 in k4770 in k4767 in k4764 in k4761 in k4758 in k4755 in k4752 in k4749 in k4746 in k4743 in k4740 in k4737 in k4734 in k4731 in k4728 in k4725 in k4722 in k4719 in k4716 in k4713 in ... */
 static void C_ccall f_4778(C_word c,C_word *av){
@@ -13769,12 +13739,12 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[336];
+av2[2]=lf[338];
 av2[3]=C_fix(16);
-av2[4]=C_fix(1);
-av2[5]=lf[337];
-av2[6]=C_SCHEME_FALSE;
-av2[7]=C_fix(2);
+av2[4]=C_SCHEME_FALSE;
+av2[5]=lf[339];
+av2[6]=C_SCHEME_TRUE;
+av2[7]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4779 in k4776 in k4773 in k4770 in k4767 in k4764 in k4761 in k4758 in k4755 in k4752 in k4749 in k4746 in k4743 in k4740 in k4737 in k4734 in k4731 in k4728 in k4725 in k4722 in k4719 in k4716 in ... */
@@ -13799,12 +13769,12 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[334];
+av2[2]=lf[336];
 av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[335];
+av2[5]=lf[337];
 av2[6]=C_SCHEME_FALSE;
-av2[7]=*((C_word*)lf[11]+1);
+av2[7]=C_fix(2);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4782 in k4779 in k4776 in k4773 in k4770 in k4767 in k4764 in k4761 in k4758 in k4755 in k4752 in k4749 in k4746 in k4743 in k4740 in k4737 in k4734 in k4731 in k4728 in k4725 in k4722 in k4719 in ... */
@@ -13829,12 +13799,12 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[332];
+av2[2]=lf[334];
 av2[3]=C_fix(16);
-av2[4]=C_fix(2);
-av2[5]=lf[333];
+av2[4]=C_fix(1);
+av2[5]=lf[335];
 av2[6]=C_SCHEME_FALSE;
-av2[7]=C_fix(2);
+av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4785 in k4782 in k4779 in k4776 in k4773 in k4770 in k4767 in k4764 in k4761 in k4758 in k4755 in k4752 in k4749 in k4746 in k4743 in k4740 in k4737 in k4734 in k4731 in k4728 in k4725 in k4722 in ... */
@@ -13859,12 +13829,12 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[330];
+av2[2]=lf[332];
 av2[3]=C_fix(16);
-av2[4]=C_fix(1);
-av2[5]=lf[331];
-av2[6]=C_SCHEME_TRUE;
-av2[7]=C_fix(6);
+av2[4]=C_fix(2);
+av2[5]=lf[333];
+av2[6]=C_SCHEME_FALSE;
+av2[7]=C_fix(2);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4788 in k4785 in k4782 in k4779 in k4776 in k4773 in k4770 in k4767 in k4764 in k4761 in k4758 in k4755 in k4752 in k4749 in k4746 in k4743 in k4740 in k4737 in k4734 in k4731 in k4728 in k4725 in ... */
@@ -13875,26 +13845,27 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
 C_save_and_reclaim((void *)f_4790,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4793,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:958: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:957: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 7) {
+if(c >= 8) {
   av2=av;
 } else {
-  av2=C_alloc(7);
+  av2=C_alloc(8);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[328];
-av2[3]=C_fix(2);
+av2[2]=lf[330];
+av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[329];
-av2[6]=C_SCHEME_FALSE;
-((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
+av2[5]=lf[331];
+av2[6]=C_SCHEME_TRUE;
+av2[7]=C_fix(6);
+((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4791 in k4788 in k4785 in k4782 in k4779 in k4776 in k4773 in k4770 in k4767 in k4764 in k4761 in k4758 in k4755 in k4752 in k4749 in k4746 in k4743 in k4740 in k4737 in k4734 in k4731 in k4728 in ... */
 static void C_ccall f_4793(C_word c,C_word *av){
@@ -13918,10 +13889,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[326];
+av2[2]=lf[328];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[327];
+av2[5]=lf[329];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -13947,10 +13918,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[324];
+av2[2]=lf[326];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[325];
+av2[5]=lf[327];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -13976,10 +13947,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[322];
+av2[2]=lf[324];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[323];
+av2[5]=lf[325];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -14005,10 +13976,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[320];
+av2[2]=lf[322];
 av2[3]=C_fix(2);
-av2[4]=C_fix(2);
-av2[5]=lf[321];
+av2[4]=C_fix(1);
+av2[5]=lf[323];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -14034,10 +14005,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[318];
+av2[2]=lf[320];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[319];
+av2[5]=lf[321];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -14063,10 +14034,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[316];
+av2[2]=lf[318];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[317];
+av2[5]=lf[319];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -14092,10 +14063,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[314];
+av2[2]=lf[316];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[315];
+av2[5]=lf[317];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -14121,10 +14092,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[312];
+av2[2]=lf[314];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[313];
+av2[5]=lf[315];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -14150,10 +14121,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[310];
+av2[2]=lf[312];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[311];
+av2[5]=lf[313];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -14179,10 +14150,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[308];
+av2[2]=lf[310];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[309];
+av2[5]=lf[311];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -14208,10 +14179,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[306];
+av2[2]=lf[308];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[307];
+av2[5]=lf[309];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -14223,27 +14194,26 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
 C_save_and_reclaim((void *)f_4826,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4829,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:971: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:970: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 8) {
+if(c >= 7) {
   av2=av;
 } else {
-  av2=C_alloc(8);
+  av2=C_alloc(7);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[304];
-av2[3]=C_fix(16);
-av2[4]=C_fix(1);
-av2[5]=lf[305];
+av2[2]=lf[306];
+av2[3]=C_fix(2);
+av2[4]=C_fix(2);
+av2[5]=lf[307];
 av2[6]=C_SCHEME_FALSE;
-av2[7]=*((C_word*)lf[11]+1);
-((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
+((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in k4779 in k4776 in k4773 in k4770 in k4767 in k4764 in ... */
 static void C_ccall f_4829(C_word c,C_word *av){
@@ -14257,7 +14227,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4829,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4832,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:972: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:974: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -14267,12 +14237,12 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[302];
+av2[2]=lf[304];
 av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[303];
+av2[5]=lf[305];
 av2[6]=C_SCHEME_FALSE;
-av2[7]=*((C_word*)lf[11]+1);
+av2[7]=C_fix(5);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in k4779 in k4776 in k4773 in k4770 in k4767 in ... */
@@ -14287,7 +14257,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4832,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4835,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:973: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:975: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -14297,12 +14267,12 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[300];
+av2[2]=lf[302];
 av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[301];
+av2[5]=lf[303];
 av2[6]=C_SCHEME_FALSE;
-av2[7]=*((C_word*)lf[11]+1);
+av2[7]=C_fix(5);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in k4779 in k4776 in k4773 in k4770 in ... */
@@ -14317,7 +14287,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4835,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4838,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:974: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:977: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -14327,10 +14297,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[298];
+av2[2]=lf[300];
 av2[3]=C_fix(16);
 av2[4]=C_fix(1);
-av2[5]=lf[299];
+av2[5]=lf[301];
 av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -14342,14 +14312,44 @@ C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word t3;
+C_word *a;
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
+C_save_and_reclaim((void *)f_4838,2,av);}
+a=C_alloc(3);
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4841,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:978: chicken.compiler.optimizer#rewrite */
+t3=*((C_word*)lf[46]+1);{
+C_word *av2;
+if(c >= 8) {
+  av2=av;
+} else {
+  av2=C_alloc(8);
+}
+av2[0]=t3;
+av2[1]=t2;
+av2[2]=lf[298];
+av2[3]=C_fix(16);
+av2[4]=C_fix(1);
+av2[5]=lf[299];
+av2[6]=C_SCHEME_FALSE;
+av2[7]=*((C_word*)lf[11]+1);
+((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
+
+/* k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in k4779 in k4776 in ... */
+static void C_ccall f_4841(C_word c,C_word *av){
+C_word tmp;
+C_word t0=av[0];
+C_word t1=av[1];
+C_word t2;
+C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,6)))){
-C_save_and_reclaim((void *)f_4838,2,av);}
+C_save_and_reclaim((void *)f_4841,2,av);}
 a=C_alloc(5);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4841,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5702,tmp=(C_word)a,a+=2,tmp);
-/* c-platform.scm:976: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4844,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5705,tmp=(C_word)a,a+=2,tmp);
+/* c-platform.scm:980: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -14364,8 +14364,8 @@ av2[3]=C_fix(8);
 av2[4]=t3;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in k4779 in k4776 in ... */
-static void C_ccall f_4841(C_word c,C_word *av){
+/* k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in k4779 in ... */
+static void C_ccall f_4844(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -14373,10 +14373,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4841,2,av);}
+C_save_and_reclaim((void *)f_4844,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4844,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:994: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4847,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:998: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -14393,8 +14393,8 @@ av2[5]=lf[293];
 av2[6]=lf[294];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in k4779 in ... */
-static void C_ccall f_4844(C_word c,C_word *av){
+/* k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in ... */
+static void C_ccall f_4847(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -14402,10 +14402,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4844,2,av);}
+C_save_and_reclaim((void *)f_4847,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4847,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:995: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4850,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:999: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -14422,8 +14422,8 @@ av2[5]=lf[290];
 av2[6]=lf[291];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in ... */
-static void C_ccall f_4847(C_word c,C_word *av){
+/* k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in ... */
+static void C_ccall f_4850(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -14431,10 +14431,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
-C_save_and_reclaim((void *)f_4847,2,av);}
+C_save_and_reclaim((void *)f_4850,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4850,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:996: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4853,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1000: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -14450,8 +14450,8 @@ av2[4]=C_fix(2);
 av2[5]=lf[288];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
-/* k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in ... */
-static void C_ccall f_4850(C_word c,C_word *av){
+/* k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in ... */
+static void C_ccall f_4853(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -14459,10 +14459,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
-C_save_and_reclaim((void *)f_4850,2,av);}
+C_save_and_reclaim((void *)f_4853,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4853,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:997: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4856,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1001: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -14478,8 +14478,8 @@ av2[4]=C_fix(2);
 av2[5]=lf[286];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
-/* k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in ... */
-static void C_ccall f_4853(C_word c,C_word *av){
+/* k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in ... */
+static void C_ccall f_4856(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -14487,10 +14487,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4853,2,av);}
+C_save_and_reclaim((void *)f_4856,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4856,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:998: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4859,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1002: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -14507,8 +14507,8 @@ av2[5]=lf[283];
 av2[6]=lf[284];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in ... */
-static void C_ccall f_4856(C_word c,C_word *av){
+/* k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in ... */
+static void C_ccall f_4859(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -14516,10 +14516,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4856,2,av);}
+C_save_and_reclaim((void *)f_4859,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4859,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:999: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4862,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1003: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -14536,8 +14536,8 @@ av2[5]=lf[280];
 av2[6]=lf[281];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in ... */
-static void C_ccall f_4859(C_word c,C_word *av){
+/* k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in ... */
+static void C_ccall f_4862(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -14545,10 +14545,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4859,2,av);}
+C_save_and_reclaim((void *)f_4862,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4862,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1000: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4865,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1004: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -14565,8 +14565,8 @@ av2[5]=lf[277];
 av2[6]=lf[278];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in ... */
-static void C_ccall f_4862(C_word c,C_word *av){
+/* k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in ... */
+static void C_ccall f_4865(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -14574,10 +14574,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4862,2,av);}
+C_save_and_reclaim((void *)f_4865,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4865,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1001: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4868,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1005: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -14594,8 +14594,8 @@ av2[5]=lf[274];
 av2[6]=lf[275];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in ... */
-static void C_ccall f_4865(C_word c,C_word *av){
+/* k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in ... */
+static void C_ccall f_4868(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -14603,10 +14603,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4865,2,av);}
+C_save_and_reclaim((void *)f_4868,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4868,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1002: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4871,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1006: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -14623,8 +14623,8 @@ av2[5]=lf[271];
 av2[6]=lf[272];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in ... */
-static void C_ccall f_4868(C_word c,C_word *av){
+/* k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in ... */
+static void C_ccall f_4871(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -14632,10 +14632,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_4868,2,av);}
+C_save_and_reclaim((void *)f_4871,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4871,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1003: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4874,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1007: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -14652,8 +14652,8 @@ av2[5]=lf[268];
 av2[6]=lf[269];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in ... */
-static void C_ccall f_4871(C_word c,C_word *av){
+/* k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in ... */
+static void C_ccall f_4874(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -14661,10 +14661,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
-C_save_and_reclaim((void *)f_4871,2,av);}
+C_save_and_reclaim((void *)f_4874,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4874,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1004: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4877,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1008: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -14680,8 +14680,8 @@ av2[4]=C_fix(2);
 av2[5]=lf[266];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
-/* k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in ... */
-static void C_ccall f_4874(C_word c,C_word *av){
+/* k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in ... */
+static void C_ccall f_4877(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -14690,11 +14690,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,6)))){
-C_save_and_reclaim((void *)f_4874,2,av);}
+C_save_and_reclaim((void *)f_4877,2,av);}
 a=C_alloc(5);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4877,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5580,tmp=(C_word)a,a+=2,tmp);
-/* c-platform.scm:1006: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4880,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5583,tmp=(C_word)a,a+=2,tmp);
+/* c-platform.scm:1010: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -14709,34 +14709,6 @@ av2[3]=C_fix(8);
 av2[4]=t3;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in ... */
-static void C_ccall f_4877(C_word c,C_word *av){
-C_word tmp;
-C_word t0=av[0];
-C_word t1=av[1];
-C_word t2;
-C_word t3;
-C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
-C_save_and_reclaim((void *)f_4877,2,av);}
-a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4880,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1040: chicken.compiler.optimizer#rewrite */
-t3=*((C_word*)lf[46]+1);{
-C_word *av2;
-if(c >= 6) {
-  av2=av;
-} else {
-  av2=C_alloc(6);
-}
-av2[0]=t3;
-av2[1]=t2;
-av2[2]=lf[257];
-av2[3]=C_fix(17);
-av2[4]=C_fix(2);
-av2[5]=lf[258];
-((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
-
 /* k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in ... */
 static void C_ccall f_4880(C_word c,C_word *av){
 C_word tmp;
@@ -14749,7 +14721,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4880,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4883,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1041: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1044: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -14759,10 +14731,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[255];
+av2[2]=lf[257];
 av2[3]=C_fix(17);
-av2[4]=C_fix(3);
-av2[5]=lf[256];
+av2[4]=C_fix(2);
+av2[5]=lf[258];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in ... */
@@ -14777,7 +14749,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4883,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4886,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1042: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1045: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -14787,10 +14759,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[253];
+av2[2]=lf[255];
 av2[3]=C_fix(17);
-av2[4]=C_fix(2);
-av2[5]=lf[254];
+av2[4]=C_fix(3);
+av2[5]=lf[256];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in ... */
@@ -14805,7 +14777,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4886,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4889,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1043: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1046: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -14815,10 +14787,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[251];
+av2[2]=lf[253];
 av2[3]=C_fix(17);
 av2[4]=C_fix(2);
-av2[5]=lf[252];
+av2[5]=lf[254];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in ... */
@@ -14833,7 +14805,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4889,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4892,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1044: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1047: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -14843,10 +14815,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[249];
+av2[2]=lf[251];
 av2[3]=C_fix(17);
 av2[4]=C_fix(2);
-av2[5]=lf[250];
+av2[5]=lf[252];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in ... */
@@ -14861,7 +14833,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4892,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4895,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1045: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1048: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -14871,10 +14843,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[247];
+av2[2]=lf[249];
 av2[3]=C_fix(17);
-av2[4]=C_fix(3);
-av2[5]=lf[248];
+av2[4]=C_fix(2);
+av2[5]=lf[250];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in ... */
@@ -14889,7 +14861,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4895,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4898,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1046: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1049: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -14899,10 +14871,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[245];
+av2[2]=lf[247];
 av2[3]=C_fix(17);
 av2[4]=C_fix(3);
-av2[5]=lf[246];
+av2[5]=lf[248];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in ... */
@@ -14917,7 +14889,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4898,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4901,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1047: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1050: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -14927,10 +14899,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[243];
+av2[2]=lf[245];
 av2[3]=C_fix(17);
 av2[4]=C_fix(3);
-av2[5]=lf[244];
+av2[5]=lf[246];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in ... */
@@ -14941,26 +14913,25 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
 C_save_and_reclaim((void *)f_4901,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4904,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1048: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1051: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 7) {
+if(c >= 6) {
   av2=av;
 } else {
-  av2=C_alloc(7);
+  av2=C_alloc(6);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[240];
+av2[2]=lf[243];
 av2[3]=C_fix(17);
-av2[4]=C_fix(2);
-av2[5]=lf[241];
-av2[6]=lf[242];
-((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
+av2[4]=C_fix(3);
+av2[5]=lf[244];
+((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in ... */
 static void C_ccall f_4904(C_word c,C_word *av){
@@ -14970,25 +14941,26 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
 C_save_and_reclaim((void *)f_4904,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4907,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1049: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1052: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 6) {
+if(c >= 7) {
   av2=av;
 } else {
-  av2=C_alloc(6);
+  av2=C_alloc(7);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[238];
+av2[2]=lf[240];
 av2[3]=C_fix(17);
 av2[4]=C_fix(2);
-av2[5]=lf[239];
-((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
+av2[5]=lf[241];
+av2[6]=lf[242];
+((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in ... */
 static void C_ccall f_4907(C_word c,C_word *av){
@@ -15002,7 +14974,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4907,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4910,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1050: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1053: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -15012,10 +14984,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[236];
+av2[2]=lf[238];
 av2[3]=C_fix(17);
-av2[4]=C_fix(1);
-av2[5]=lf[237];
+av2[4]=C_fix(2);
+av2[5]=lf[239];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in ... */
@@ -15026,26 +14998,25 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
 C_save_and_reclaim((void *)f_4910,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4913,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1051: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1054: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 7) {
+if(c >= 6) {
   av2=av;
 } else {
-  av2=C_alloc(7);
+  av2=C_alloc(6);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[233];
+av2[2]=lf[236];
 av2[3]=C_fix(17);
 av2[4]=C_fix(1);
-av2[5]=lf[234];
-av2[6]=lf[235];
-((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
+av2[5]=lf[237];
+((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in ... */
 static void C_ccall f_4913(C_word c,C_word *av){
@@ -15055,25 +15026,26 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
 C_save_and_reclaim((void *)f_4913,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4916,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1052: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1055: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 6) {
+if(c >= 7) {
   av2=av;
 } else {
-  av2=C_alloc(6);
+  av2=C_alloc(7);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[231];
+av2[2]=lf[233];
 av2[3]=C_fix(17);
 av2[4]=C_fix(1);
-av2[5]=lf[232];
-((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
+av2[5]=lf[234];
+av2[6]=lf[235];
+((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in ... */
 static void C_ccall f_4916(C_word c,C_word *av){
@@ -15087,7 +15059,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4916,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4919,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1053: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1056: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -15097,10 +15069,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[229];
+av2[2]=lf[231];
 av2[3]=C_fix(17);
 av2[4]=C_fix(1);
-av2[5]=lf[230];
+av2[5]=lf[232];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in ... */
@@ -15115,7 +15087,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4919,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4922,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1054: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1057: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -15125,10 +15097,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[227];
+av2[2]=lf[229];
 av2[3]=C_fix(17);
-av2[4]=C_fix(2);
-av2[5]=lf[228];
+av2[4]=C_fix(1);
+av2[5]=lf[230];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in ... */
@@ -15143,7 +15115,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4922,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4925,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1055: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1058: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -15153,10 +15125,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[225];
+av2[2]=lf[227];
 av2[3]=C_fix(17);
-av2[4]=C_fix(1);
-av2[5]=lf[226];
+av2[4]=C_fix(2);
+av2[5]=lf[228];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in ... */
@@ -15171,7 +15143,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4925,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4928,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1056: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1059: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -15181,10 +15153,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[223];
+av2[2]=lf[225];
 av2[3]=C_fix(17);
 av2[4]=C_fix(1);
-av2[5]=lf[224];
+av2[5]=lf[226];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in k4863 in ... */
@@ -15199,7 +15171,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4928,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4931,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1057: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1060: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -15209,10 +15181,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[221];
+av2[2]=lf[223];
 av2[3]=C_fix(17);
 av2[4]=C_fix(1);
-av2[5]=lf[222];
+av2[5]=lf[224];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in k4866 in ... */
@@ -15227,7 +15199,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4931,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4934,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1058: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1061: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -15237,10 +15209,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[219];
+av2[2]=lf[221];
 av2[3]=C_fix(17);
 av2[4]=C_fix(1);
-av2[5]=lf[220];
+av2[5]=lf[222];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in k4869 in ... */
@@ -15255,7 +15227,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4934,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4937,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1059: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1062: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -15265,10 +15237,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[217];
+av2[2]=lf[219];
 av2[3]=C_fix(17);
-av2[4]=C_fix(2);
-av2[5]=lf[218];
+av2[4]=C_fix(1);
+av2[5]=lf[220];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in k4872 in ... */
@@ -15283,7 +15255,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4937,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4940,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1060: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1063: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -15293,10 +15265,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[215];
+av2[2]=lf[217];
 av2[3]=C_fix(17);
-av2[4]=C_fix(1);
-av2[5]=lf[216];
+av2[4]=C_fix(2);
+av2[5]=lf[218];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4938 in k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in k4875 in ... */
@@ -15311,7 +15283,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4940,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4943,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1061: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1064: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -15321,10 +15293,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[213];
+av2[2]=lf[215];
 av2[3]=C_fix(17);
 av2[4]=C_fix(1);
-av2[5]=lf[214];
+av2[5]=lf[216];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4941 in k4938 in k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in k4878 in ... */
@@ -15339,7 +15311,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4943,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4946,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1062: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1065: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -15349,10 +15321,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[211];
+av2[2]=lf[213];
 av2[3]=C_fix(17);
-av2[4]=C_fix(2);
-av2[5]=lf[212];
+av2[4]=C_fix(1);
+av2[5]=lf[214];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4944 in k4941 in k4938 in k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in k4881 in ... */
@@ -15367,7 +15339,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4946,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4949,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1063: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1066: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -15377,10 +15349,10 @@ if(c >= 6) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[209];
+av2[2]=lf[211];
 av2[3]=C_fix(17);
 av2[4]=C_fix(2);
-av2[5]=lf[210];
+av2[5]=lf[212];
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4947 in k4944 in k4941 in k4938 in k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in k4884 in ... */
@@ -15391,26 +15363,25 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
 C_save_and_reclaim((void *)f_4949,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4952,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1065: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1067: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 7) {
+if(c >= 6) {
   av2=av;
 } else {
-  av2=C_alloc(7);
+  av2=C_alloc(6);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[207];
-av2[3]=C_fix(2);
-av2[4]=C_fix(1);
-av2[5]=lf[208];
-av2[6]=C_SCHEME_FALSE;
-((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
+av2[2]=lf[209];
+av2[3]=C_fix(17);
+av2[4]=C_fix(2);
+av2[5]=lf[210];
+((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k4950 in k4947 in k4944 in k4941 in k4938 in k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in k4890 in k4887 in ... */
 static void C_ccall f_4952(C_word c,C_word *av){
@@ -15424,7 +15395,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4952,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4955,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1068: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1069: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -15434,10 +15405,10 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[204];
+av2[2]=lf[207];
 av2[3]=C_fix(2);
-av2[4]=C_fix(2);
-av2[5]=lf[206];
+av2[4]=C_fix(1);
+av2[5]=lf[208];
 av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
@@ -15453,7 +15424,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4955,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4958,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1069: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1072: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -15466,8 +15437,8 @@ av2[1]=t2;
 av2[2]=lf[204];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[205];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[206];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4956 in k4953 in k4950 in k4947 in k4944 in k4941 in k4938 in k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in k4893 in ... */
@@ -15482,7 +15453,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4958,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4961,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1070: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1073: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -15492,11 +15463,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[201];
+av2[2]=lf[204];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[203];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[205];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4959 in k4956 in k4953 in k4950 in k4947 in k4944 in k4941 in k4938 in k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in k4896 in ... */
@@ -15511,7 +15482,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4961,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4964,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1071: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1074: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -15524,8 +15495,8 @@ av2[1]=t2;
 av2[2]=lf[201];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[202];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[203];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4962 in k4959 in k4956 in k4953 in k4950 in k4947 in k4944 in k4941 in k4938 in k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in k4899 in ... */
@@ -15540,7 +15511,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4964,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4967,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1072: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1075: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -15550,11 +15521,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[198];
+av2[2]=lf[201];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[200];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[202];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4965 in k4962 in k4959 in k4956 in k4953 in k4950 in k4947 in k4944 in k4941 in k4938 in k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in k4902 in ... */
@@ -15569,7 +15540,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4967,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4970,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1073: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1076: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -15582,8 +15553,8 @@ av2[1]=t2;
 av2[2]=lf[198];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[199];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[200];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4968 in k4965 in k4962 in k4959 in k4956 in k4953 in k4950 in k4947 in k4944 in k4941 in k4938 in k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in k4905 in ... */
@@ -15598,7 +15569,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4970,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4973,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1074: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1077: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -15608,11 +15579,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[195];
+av2[2]=lf[198];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[197];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[199];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4971 in k4968 in k4965 in k4962 in k4959 in k4956 in k4953 in k4950 in k4947 in k4944 in k4941 in k4938 in k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in k4908 in ... */
@@ -15627,7 +15598,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4973,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4976,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1075: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1078: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -15640,8 +15611,8 @@ av2[1]=t2;
 av2[2]=lf[195];
 av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[196];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[197];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4974 in k4971 in k4968 in k4965 in k4962 in k4959 in k4956 in k4953 in k4950 in k4947 in k4944 in k4941 in k4938 in k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in k4911 in ... */
@@ -15652,27 +15623,26 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
 C_save_and_reclaim((void *)f_4976,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4979,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1077: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1079: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 8) {
+if(c >= 7) {
   av2=av;
 } else {
-  av2=C_alloc(8);
+  av2=C_alloc(7);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[193];
-av2[3]=C_fix(16);
+av2[2]=lf[195];
+av2[3]=C_fix(2);
 av2[4]=C_fix(2);
-av2[5]=lf[194];
+av2[5]=lf[196];
 av2[6]=C_SCHEME_TRUE;
-av2[7]=*((C_word*)lf[11]+1);
-((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
+((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4977 in k4974 in k4971 in k4968 in k4965 in k4962 in k4959 in k4956 in k4953 in k4950 in k4947 in k4944 in k4941 in k4938 in k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in k4914 in ... */
 static void C_ccall f_4979(C_word c,C_word *av){
@@ -15686,7 +15656,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4979,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4982,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1078: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1081: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -15696,12 +15666,12 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[191];
+av2[2]=lf[193];
 av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[192];
+av2[5]=lf[194];
 av2[6]=C_SCHEME_TRUE;
-av2[7]=*((C_word*)lf[11]+1);
+av2[7]=C_fix(5);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4980 in k4977 in k4974 in k4971 in k4968 in k4965 in k4962 in k4959 in k4956 in k4953 in k4950 in k4947 in k4944 in k4941 in k4938 in k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in k4917 in ... */
@@ -15716,7 +15686,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4982,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4985,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1080: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1082: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -15726,12 +15696,12 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[188];
+av2[2]=lf[191];
 av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[190];
-av2[6]=C_SCHEME_FALSE;
-av2[7]=*((C_word*)lf[11]+1);
+av2[5]=lf[192];
+av2[6]=C_SCHEME_TRUE;
+av2[7]=C_fix(5);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4983 in k4980 in k4977 in k4974 in k4971 in k4968 in k4965 in k4962 in k4959 in k4956 in k4953 in k4950 in k4947 in k4944 in k4941 in k4938 in k4935 in k4932 in k4929 in k4926 in k4923 in k4920 in ... */
@@ -15746,7 +15716,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4985,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4988,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1081: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1084: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -15759,8 +15729,8 @@ av2[1]=t2;
 av2[2]=lf[188];
 av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[189];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[190];
+av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
@@ -15776,7 +15746,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4988,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4991,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1082: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1085: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -15786,11 +15756,11 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[185];
+av2[2]=lf[188];
 av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[187];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[189];
+av2[6]=C_SCHEME_TRUE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
@@ -15806,7 +15776,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4991,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4994,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1083: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1086: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -15819,8 +15789,8 @@ av2[1]=t2;
 av2[2]=lf[185];
 av2[3]=C_fix(16);
 av2[4]=C_fix(2);
-av2[5]=lf[186];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[187];
+av2[6]=C_SCHEME_FALSE;
 av2[7]=*((C_word*)lf[11]+1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
@@ -15832,26 +15802,27 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
 C_save_and_reclaim((void *)f_4994,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_4997,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1085: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1087: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 7) {
+if(c >= 8) {
   av2=av;
 } else {
-  av2=C_alloc(7);
+  av2=C_alloc(8);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[182];
-av2[3]=C_fix(2);
-av2[4]=C_fix(3);
-av2[5]=lf[184];
-av2[6]=C_SCHEME_FALSE;
-((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
+av2[2]=lf[185];
+av2[3]=C_fix(16);
+av2[4]=C_fix(2);
+av2[5]=lf[186];
+av2[6]=C_SCHEME_TRUE;
+av2[7]=*((C_word*)lf[11]+1);
+((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
 /* k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in k4974 in k4971 in k4968 in k4965 in k4962 in k4959 in k4956 in k4953 in k4950 in k4947 in k4944 in k4941 in k4938 in k4935 in k4932 in ... */
 static void C_ccall f_4997(C_word c,C_word *av){
@@ -15865,7 +15836,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_4997,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5000,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1086: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1089: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -15878,8 +15849,8 @@ av2[1]=t2;
 av2[2]=lf[182];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[183];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[184];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in k4974 in k4971 in k4968 in k4965 in k4962 in k4959 in k4956 in k4953 in k4950 in k4947 in k4944 in k4941 in k4938 in k4935 in ... */
@@ -15894,7 +15865,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5000,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5003,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1087: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1090: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -15904,11 +15875,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[179];
+av2[2]=lf[182];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[181];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[183];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in k4974 in k4971 in k4968 in k4965 in k4962 in k4959 in k4956 in k4953 in k4950 in k4947 in k4944 in k4941 in k4938 in ... */
@@ -15923,7 +15894,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5003,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5006,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1088: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1091: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -15936,8 +15907,8 @@ av2[1]=t2;
 av2[2]=lf[179];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[180];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[181];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in k4974 in k4971 in k4968 in k4965 in k4962 in k4959 in k4956 in k4953 in k4950 in k4947 in k4944 in k4941 in ... */
@@ -15952,7 +15923,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5006,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5009,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1089: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1092: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -15962,11 +15933,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[176];
+av2[2]=lf[179];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[178];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[180];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in k4974 in k4971 in k4968 in k4965 in k4962 in k4959 in k4956 in k4953 in k4950 in k4947 in k4944 in ... */
@@ -15981,7 +15952,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5009,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5012,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1090: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1093: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -15994,8 +15965,8 @@ av2[1]=t2;
 av2[2]=lf[176];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[177];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[178];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in k4974 in k4971 in k4968 in k4965 in k4962 in k4959 in k4956 in k4953 in k4950 in k4947 in ... */
@@ -16010,7 +15981,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5012,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5015,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1091: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1094: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16020,11 +15991,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[173];
+av2[2]=lf[176];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[175];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[177];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in k4974 in k4971 in k4968 in k4965 in k4962 in k4959 in k4956 in k4953 in k4950 in ... */
@@ -16039,7 +16010,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5015,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5018,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1092: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1095: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16052,8 +16023,8 @@ av2[1]=t2;
 av2[2]=lf[173];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[174];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[175];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in k4974 in k4971 in k4968 in k4965 in k4962 in k4959 in k4956 in k4953 in ... */
@@ -16068,7 +16039,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5018,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5021,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1093: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1096: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16078,11 +16049,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[170];
+av2[2]=lf[173];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[172];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[174];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in k4974 in k4971 in k4968 in k4965 in k4962 in k4959 in k4956 in ... */
@@ -16097,7 +16068,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5021,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5024,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1094: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1097: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16110,8 +16081,8 @@ av2[1]=t2;
 av2[2]=lf[170];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[171];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[172];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in k4974 in k4971 in k4968 in k4965 in k4962 in k4959 in ... */
@@ -16126,7 +16097,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5024,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5027,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1095: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1098: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16136,11 +16107,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[167];
+av2[2]=lf[170];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[169];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[171];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in k4974 in k4971 in k4968 in k4965 in k4962 in ... */
@@ -16155,7 +16126,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5027,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5030,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1096: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1099: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16168,8 +16139,8 @@ av2[1]=t2;
 av2[2]=lf[167];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[168];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[169];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in k4974 in k4971 in k4968 in k4965 in ... */
@@ -16184,7 +16155,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5030,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5033,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1097: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1100: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16194,11 +16165,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[164];
+av2[2]=lf[167];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[166];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[168];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in k4974 in k4971 in k4968 in ... */
@@ -16213,7 +16184,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5033,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5036,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1098: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1101: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16226,8 +16197,8 @@ av2[1]=t2;
 av2[2]=lf[164];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[165];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[166];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in k4974 in k4971 in ... */
@@ -16242,7 +16213,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5036,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5039,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1099: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1102: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16252,11 +16223,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[161];
+av2[2]=lf[164];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[163];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[165];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in k4974 in ... */
@@ -16271,7 +16242,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5039,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5042,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1100: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1103: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16284,8 +16255,8 @@ av2[1]=t2;
 av2[2]=lf[161];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[162];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[163];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in k4977 in ... */
@@ -16300,7 +16271,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5042,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5045,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1101: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1104: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16310,11 +16281,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[158];
+av2[2]=lf[161];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[160];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[162];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in k4980 in ... */
@@ -16329,7 +16300,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5045,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5048,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1102: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1105: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16342,8 +16313,8 @@ av2[1]=t2;
 av2[2]=lf[158];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[159];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[160];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in k4983 in ... */
@@ -16358,7 +16329,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5048,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5051,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1103: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1106: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16368,11 +16339,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[155];
+av2[2]=lf[158];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[157];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[159];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in k4986 in ... */
@@ -16387,7 +16358,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5051,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5054,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1104: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1107: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16400,8 +16371,8 @@ av2[1]=t2;
 av2[2]=lf[155];
 av2[3]=C_fix(2);
 av2[4]=C_fix(3);
-av2[5]=lf[156];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[157];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in k4989 in ... */
@@ -16416,7 +16387,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5054,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5057,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1106: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1108: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16426,11 +16397,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[152];
+av2[2]=lf[155];
 av2[3]=C_fix(2);
-av2[4]=C_fix(1);
-av2[5]=lf[154];
-av2[6]=C_SCHEME_FALSE;
+av2[4]=C_fix(3);
+av2[5]=lf[156];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in k4992 in ... */
@@ -16445,7 +16416,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5057,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5060,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1107: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1110: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16458,8 +16429,8 @@ av2[1]=t2;
 av2[2]=lf[152];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[153];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[154];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in k4995 in ... */
@@ -16474,7 +16445,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5060,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5063,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1108: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1111: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16484,11 +16455,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[149];
+av2[2]=lf[152];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[151];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[153];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in k4998 in ... */
@@ -16503,7 +16474,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5063,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5066,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1109: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1112: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16516,8 +16487,8 @@ av2[1]=t2;
 av2[2]=lf[149];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[150];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[151];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in k5001 in ... */
@@ -16532,7 +16503,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5066,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5069,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1110: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1113: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16542,11 +16513,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[146];
+av2[2]=lf[149];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[148];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[150];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in k5004 in ... */
@@ -16561,7 +16532,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5069,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5072,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1111: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1114: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16574,8 +16545,8 @@ av2[1]=t2;
 av2[2]=lf[146];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[147];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[148];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in k5007 in ... */
@@ -16590,7 +16561,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5072,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5075,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1112: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1115: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16600,11 +16571,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[143];
+av2[2]=lf[146];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[145];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[147];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in k5010 in ... */
@@ -16619,7 +16590,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5075,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5078,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1113: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1116: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16632,8 +16603,8 @@ av2[1]=t2;
 av2[2]=lf[143];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[144];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[145];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5076 in k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in k5013 in ... */
@@ -16648,7 +16619,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5078,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5081,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1114: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1117: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16658,11 +16629,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[140];
+av2[2]=lf[143];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[142];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[144];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5079 in k5076 in k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in k5016 in ... */
@@ -16677,7 +16648,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5081,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5084,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1115: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1118: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16690,8 +16661,8 @@ av2[1]=t2;
 av2[2]=lf[140];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[141];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[142];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5082 in k5079 in k5076 in k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in k5019 in ... */
@@ -16706,7 +16677,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5084,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5087,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1116: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1119: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16716,11 +16687,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[137];
+av2[2]=lf[140];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[139];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[141];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5085 in k5082 in k5079 in k5076 in k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in k5022 in ... */
@@ -16735,7 +16706,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5087,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5090,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1117: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1120: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16748,8 +16719,8 @@ av2[1]=t2;
 av2[2]=lf[137];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[138];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[139];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5088 in k5085 in k5082 in k5079 in k5076 in k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in k5025 in ... */
@@ -16764,7 +16735,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5090,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5093,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1118: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1121: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16774,11 +16745,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[134];
+av2[2]=lf[137];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[136];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[138];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5091 in k5088 in k5085 in k5082 in k5079 in k5076 in k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in k5028 in ... */
@@ -16793,7 +16764,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5093,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5096,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1119: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1122: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16806,8 +16777,8 @@ av2[1]=t2;
 av2[2]=lf[134];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[135];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[136];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5094 in k5091 in k5088 in k5085 in k5082 in k5079 in k5076 in k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in k5031 in ... */
@@ -16822,7 +16793,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5096,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5099,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1120: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1123: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16832,11 +16803,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[131];
+av2[2]=lf[134];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[133];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[135];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5097 in k5094 in k5091 in k5088 in k5085 in k5082 in k5079 in k5076 in k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in k5034 in ... */
@@ -16851,7 +16822,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5099,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5102,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1121: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1124: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16864,8 +16835,8 @@ av2[1]=t2;
 av2[2]=lf[131];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[132];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[133];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5100 in k5097 in k5094 in k5091 in k5088 in k5085 in k5082 in k5079 in k5076 in k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in k5037 in ... */
@@ -16880,7 +16851,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5102,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5105,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1122: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1125: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16890,11 +16861,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[128];
+av2[2]=lf[131];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[130];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[132];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5103 in k5100 in k5097 in k5094 in k5091 in k5088 in k5085 in k5082 in k5079 in k5076 in k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in k5040 in ... */
@@ -16909,7 +16880,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5105,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5108,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1123: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1126: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16922,8 +16893,8 @@ av2[1]=t2;
 av2[2]=lf[128];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[129];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[130];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in k5088 in k5085 in k5082 in k5079 in k5076 in k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in k5043 in ... */
@@ -16938,7 +16909,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5108,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5111,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1124: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1127: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16948,11 +16919,11 @@ if(c >= 7) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[125];
+av2[2]=lf[128];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[127];
-av2[6]=C_SCHEME_FALSE;
+av2[5]=lf[129];
+av2[6]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in k5088 in k5085 in k5082 in k5079 in k5076 in k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in k5046 in ... */
@@ -16967,7 +16938,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5111,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5114,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1125: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1128: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -16980,8 +16951,8 @@ av2[1]=t2;
 av2[2]=lf[125];
 av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[126];
-av2[6]=C_SCHEME_TRUE;
+av2[5]=lf[127];
+av2[6]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in k5088 in k5085 in k5082 in k5079 in k5076 in k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in k5049 in ... */
@@ -16992,25 +16963,26 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
 C_save_and_reclaim((void *)f_5114,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5117,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1127: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1129: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 6) {
+if(c >= 7) {
   av2=av;
 } else {
-  av2=C_alloc(6);
+  av2=C_alloc(7);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[123];
-av2[3]=C_fix(17);
+av2[2]=lf[125];
+av2[3]=C_fix(2);
 av2[4]=C_fix(1);
-av2[5]=lf[124];
-((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
+av2[5]=lf[126];
+av2[6]=C_SCHEME_TRUE;
+((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
 /* k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in k5088 in k5085 in k5082 in k5079 in k5076 in k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in k5052 in ... */
 static void C_ccall f_5117(C_word c,C_word *av){
@@ -17020,27 +16992,25 @@ C_word t1=av[1];
 C_word t2;
 C_word t3;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
 C_save_and_reclaim((void *)f_5117,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5120,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1129: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1131: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
-if(c >= 8) {
+if(c >= 6) {
   av2=av;
 } else {
-  av2=C_alloc(8);
+  av2=C_alloc(6);
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[121];
-av2[3]=C_fix(7);
+av2[2]=lf[123];
+av2[3]=C_fix(17);
 av2[4]=C_fix(1);
-av2[5]=lf[122];
-av2[6]=C_fix(1);
-av2[7]=C_SCHEME_FALSE;
-((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
+av2[5]=lf[124];
+((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
 /* k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in k5088 in k5085 in k5082 in k5079 in k5076 in k5073 in k5070 in k5067 in k5064 in k5061 in k5058 in k5055 in ... */
 static void C_ccall f_5120(C_word c,C_word *av){
@@ -17054,7 +17024,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5120,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5123,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1130: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1133: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -17064,10 +17034,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[119];
+av2[2]=lf[121];
 av2[3]=C_fix(7);
 av2[4]=C_fix(1);
-av2[5]=lf[120];
+av2[5]=lf[122];
 av2[6]=C_fix(1);
 av2[7]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -17084,7 +17054,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5123,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5126,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1131: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1134: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -17094,10 +17064,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[117];
+av2[2]=lf[119];
 av2[3]=C_fix(7);
 av2[4]=C_fix(1);
-av2[5]=lf[118];
+av2[5]=lf[120];
 av2[6]=C_fix(1);
 av2[7]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -17114,7 +17084,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5126,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5129,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1132: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1135: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -17124,10 +17094,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[115];
+av2[2]=lf[117];
 av2[3]=C_fix(7);
 av2[4]=C_fix(1);
-av2[5]=lf[116];
+av2[5]=lf[118];
 av2[6]=C_fix(1);
 av2[7]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -17144,7 +17114,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5129,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5132,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1133: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1136: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -17154,10 +17124,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[113];
+av2[2]=lf[115];
 av2[3]=C_fix(7);
 av2[4]=C_fix(1);
-av2[5]=lf[114];
+av2[5]=lf[116];
 av2[6]=C_fix(1);
 av2[7]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -17174,7 +17144,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5132,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5135,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1134: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1137: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -17184,10 +17154,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[111];
+av2[2]=lf[113];
 av2[3]=C_fix(7);
 av2[4]=C_fix(1);
-av2[5]=lf[112];
+av2[5]=lf[114];
 av2[6]=C_fix(1);
 av2[7]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -17204,7 +17174,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5135,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5138,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1135: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1138: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -17214,10 +17184,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[109];
+av2[2]=lf[111];
 av2[3]=C_fix(7);
 av2[4]=C_fix(1);
-av2[5]=lf[110];
+av2[5]=lf[112];
 av2[6]=C_fix(1);
 av2[7]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -17234,7 +17204,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5138,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5141,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1136: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1139: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -17244,10 +17214,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[107];
+av2[2]=lf[109];
 av2[3]=C_fix(7);
 av2[4]=C_fix(1);
-av2[5]=lf[108];
+av2[5]=lf[110];
 av2[6]=C_fix(1);
 av2[7]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -17264,7 +17234,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5141,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5144,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1137: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1140: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -17274,10 +17244,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[105];
+av2[2]=lf[107];
 av2[3]=C_fix(7);
 av2[4]=C_fix(1);
-av2[5]=lf[106];
+av2[5]=lf[108];
 av2[6]=C_fix(1);
 av2[7]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -17294,7 +17264,7 @@ if(C_unlikely(!C_demand(C_calculate_dema
 C_save_and_reclaim((void *)f_5144,2,av);}
 a=C_alloc(3);
 t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5147,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1138: chicken.compiler.optimizer#rewrite */
+/* c-platform.scm:1141: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -17304,10 +17274,10 @@ if(c >= 8) {
 }
 av2[0]=t3;
 av2[1]=t2;
-av2[2]=lf[103];
+av2[2]=lf[105];
 av2[3]=C_fix(7);
 av2[4]=C_fix(1);
-av2[5]=lf[104];
+av2[5]=lf[106];
 av2[6]=C_fix(1);
 av2[7]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
@@ -17319,14 +17289,44 @@ C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word t3;
+C_word *a;
+if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
+C_save_and_reclaim((void *)f_5147,2,av);}
+a=C_alloc(3);
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5150,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1142: chicken.compiler.optimizer#rewrite */
+t3=*((C_word*)lf[46]+1);{
+C_word *av2;
+if(c >= 8) {
+  av2=av;
+} else {
+  av2=C_alloc(8);
+}
+av2[0]=t3;
+av2[1]=t2;
+av2[2]=lf[103];
+av2[3]=C_fix(7);
+av2[4]=C_fix(1);
+av2[5]=lf[104];
+av2[6]=C_fix(1);
+av2[7]=C_SCHEME_FALSE;
+((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
+
+/* k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in k5088 in k5085 in ... */
+static void C_ccall f_5150(C_word c,C_word *av){
+C_word tmp;
+C_word t0=av[0];
+C_word t1=av[1];
+C_word t2;
+C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,6)))){
-C_save_and_reclaim((void *)f_5147,2,av);}
+C_save_and_reclaim((void *)f_5150,2,av);}
 a=C_alloc(6);
-t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5149,tmp=(C_word)a,a+=2,tmp);
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5254,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:1166: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5152,tmp=(C_word)a,a+=2,tmp);
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5257,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:1170: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -17341,8 +17341,8 @@ av2[3]=C_fix(8);
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* rewrite-make-vector in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in k5088 in k5085 in ... */
-static void C_ccall f_5149(C_word c,C_word *av){
+/* rewrite-make-vector in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in k5088 in ... */
+static void C_ccall f_5152(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17358,15 +17358,15 @@ C_word t10;
 C_word t11;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
-C_save_and_reclaim((void *)f_5149,6,av);}
+C_save_and_reclaim((void *)f_5152,6,av);}
 a=C_alloc(6);
 t6=C_i_length(t5);
 if(C_truep(C_i_pairp(t5))){
 t7=t5;
 t8=C_i_car(t7);
 t9=t8;
-t10=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5251,a[2]=t1,a[3]=t4,a[4]=t5,a[5]=t9,tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:1147: chicken.compiler.support#node-class */
+t10=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5254,a[2]=t1,a[3]=t4,a[4]=t5,a[5]=t9,tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:1151: chicken.compiler.support#node-class */
 t11=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t11;
@@ -17380,8 +17380,8 @@ av2[0]=t7;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t7+1)))(2,av2);}}}
 
-/* k5169 in k5249 in rewrite-make-vector in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in ... */
-static void C_ccall f_5171(C_word c,C_word *av){
+/* k5172 in k5252 in rewrite-make-vector in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in ... */
+static void C_ccall f_5174(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17390,11 +17390,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
-C_save_and_reclaim((void *)f_5171,2,av);}
+C_save_and_reclaim((void *)f_5174,2,av);}
 a=C_alloc(6);
 t2=t1;
-t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5247,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:1149: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5250,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:1153: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -17407,8 +17407,8 @@ av2[1]=t3;
 av2[2]=((C_word*)t0)[5];
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}
 
-/* k5184 in k5245 in k5169 in k5249 in rewrite-make-vector in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in ... */
-static void C_ccall f_5186(C_word c,C_word *av){
+/* k5187 in k5248 in k5172 in k5252 in rewrite-make-vector in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in ... */
+static void C_ccall f_5189(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17419,10 +17419,10 @@ C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_5186,2,av);}
+C_save_and_reclaim((void *)f_5189,2,av);}
 a=C_alloc(6);
 if(C_truep(t1)){
-t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5189,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
+t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5192,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
 t3=((C_word*)t0)[6];
 t4=C_u_i_cdr(t3);
 if(C_truep(C_i_pairp(t4))){
@@ -17431,9 +17431,9 @@ t6=t2;{
 C_word *av2=av;
 av2[0]=t6;
 av2[1]=C_i_cadr(t5);
-f_5189(2,av2);}}
+f_5192(2,av2);}}
 else{
-/* c-platform.scm:1154: chicken.compiler.support#make-node */
+/* c-platform.scm:1158: chicken.compiler.support#make-node */
 t5=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -17454,8 +17454,8 @@ av2[0]=t2;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}}
 
-/* k5187 in k5184 in k5245 in k5169 in k5249 in rewrite-make-vector in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in ... */
-static void C_ccall f_5189(C_word c,C_word *av){
+/* k5190 in k5187 in k5248 in k5172 in k5252 in rewrite-make-vector in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in ... */
+static void C_ccall f_5192(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17479,30 +17479,30 @@ C_word t18;
 C_word t19;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(41,c,3)))){
-C_save_and_reclaim((void *)f_5189,2,av);}
+C_save_and_reclaim((void *)f_5192,2,av);}
 a=C_alloc(41);
 t2=t1;
 t3=C_a_i_list1(&a,1,((C_word*)t0)[2]);
 t4=t3;
-t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5204,a[2]=t2,a[3]=((C_word*)t0)[3],a[4]=t4,tmp=(C_word)a,a+=5,tmp);
+t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5207,a[2]=t2,a[3]=((C_word*)t0)[3],a[4]=t4,tmp=(C_word)a,a+=5,tmp);
 t6=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t7=t6;
-t8=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5216,a[2]=((C_word*)t0)[4],a[3]=t5,a[4]=t7,tmp=(C_word)a,a+=5,tmp);
+t8=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5219,a[2]=((C_word*)t0)[4],a[3]=t5,a[4]=t7,tmp=(C_word)a,a+=5,tmp);
 t9=C_a_i_fixnum_plus(&a,2,((C_word*)t0)[5],C_fix(1));
 t10=C_a_i_list2(&a,2,lf[61],t9);
 t11=t10;
-t12=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5224,a[2]=t8,a[3]=t11,tmp=(C_word)a,a+=4,tmp);
-t13=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5226,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+t12=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5227,a[2]=t8,a[3]=t11,tmp=(C_word)a,a+=4,tmp);
+t13=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5229,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
 t14=((C_word*)t0)[5];
 t15=t13;
 t16=C_SCHEME_UNDEFINED;
 t17=(*a=C_VECTOR_TYPE|1,a[1]=t16,tmp=(C_word)a,a+=2,tmp);
-t18=C_set_block_item(t17,0,(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2701,a[2]=t14,a[3]=t17,a[4]=t15,tmp=(C_word)a,a+=5,tmp));
+t18=C_set_block_item(t17,0,(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2703,a[2]=t14,a[3]=t17,a[4]=t15,tmp=(C_word)a,a+=5,tmp));
 t19=((C_word*)t17)[1];
-f_2701(t19,t12,C_fix(0));}
+f_2703(t19,t12,C_fix(0));}
 
-/* k5202 in k5187 in k5184 in k5245 in k5169 in k5249 in rewrite-make-vector in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in ... */
-static void C_ccall f_5204(C_word c,C_word *av){
+/* k5205 in k5190 in k5187 in k5248 in k5172 in k5252 in rewrite-make-vector in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in ... */
+static void C_ccall f_5207(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17510,10 +17510,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_5204,2,av);}
+C_save_and_reclaim((void *)f_5207,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:1155: chicken.compiler.support#make-node */
+/* c-platform.scm:1159: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -17528,8 +17528,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k5214 in k5187 in k5184 in k5245 in k5169 in k5249 in rewrite-make-vector in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in ... */
-static void C_ccall f_5216(C_word c,C_word *av){
+/* k5217 in k5190 in k5187 in k5248 in k5172 in k5252 in rewrite-make-vector in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in ... */
+static void C_ccall f_5219(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17537,10 +17537,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_5216,2,av);}
+C_save_and_reclaim((void *)f_5219,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:1159: chicken.compiler.support#make-node */
+/* c-platform.scm:1163: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -17555,16 +17555,16 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k5222 in k5187 in k5184 in k5245 in k5169 in k5249 in rewrite-make-vector in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in ... */
-static void C_ccall f_5224(C_word c,C_word *av){
+/* k5225 in k5190 in k5187 in k5248 in k5172 in k5252 in rewrite-make-vector in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in ... */
+static void C_ccall f_5227(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
-C_save_and_reclaim((void *)f_5224,2,av);}
-/* c-platform.scm:1162: chicken.compiler.support#make-node */
+C_save_and_reclaim((void *)f_5227,2,av);}
+/* c-platform.scm:1166: chicken.compiler.support#make-node */
 t2=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -17579,8 +17579,8 @@ av2[3]=((C_word*)t0)[3];
 av2[4]=t1;
 ((C_proc)(void*)(*((C_word*)t2+1)))(5,av2);}}
 
-/* a5225 in k5187 in k5184 in k5245 in k5169 in k5249 in rewrite-make-vector in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in ... */
-static void C_ccall f_5226(C_word c,C_word *av){
+/* a5228 in k5190 in k5187 in k5248 in k5172 in k5252 in rewrite-make-vector in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in ... */
+static void C_ccall f_5229(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17588,8 +17588,8 @@ C_word t2=av[2];
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
-C_save_and_reclaim((void *)f_5226,3,av);}
-/* c-platform.scm:1165: chicken.compiler.support#varnode */
+C_save_and_reclaim((void *)f_5229,3,av);}
+/* c-platform.scm:1169: chicken.compiler.support#varnode */
 t3=*((C_word*)lf[49]+1);{
 C_word *av2=av;
 av2[0]=t3;
@@ -17597,8 +17597,8 @@ av2[1]=t1;
 av2[2]=((C_word*)t0)[2];
 ((C_proc)(void*)(*((C_word*)t3+1)))(3,av2);}}
 
-/* k5245 in k5169 in k5249 in rewrite-make-vector in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in ... */
-static void C_ccall f_5247(C_word c,C_word *av){
+/* k5248 in k5172 in k5252 in rewrite-make-vector in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in ... */
+static void C_ccall f_5250(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17608,13 +17608,13 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(7,c,4)))){
-C_save_and_reclaim((void *)f_5247,2,av);}
+C_save_and_reclaim((void *)f_5250,2,av);}
 a=C_alloc(7);
 t2=C_i_car(t1);
 t3=t2;
 if(C_truep(C_fixnump(t3))){
-t4=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_5186,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t3,a[6]=((C_word*)t0)[5],tmp=(C_word)a,a+=7,tmp);
-/* c-platform.scm:1151: scheme#<= */{
+t4=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_5189,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t3,a[6]=((C_word*)t0)[5],tmp=(C_word)a,a+=7,tmp);
+/* c-platform.scm:1155: scheme#<= */{
 C_word *av2;
 if(c >= 5) {
   av2=av;
@@ -17634,8 +17634,8 @@ av2[0]=t4;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}}
 
-/* k5249 in rewrite-make-vector in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in k5088 in ... */
-static void C_ccall f_5251(C_word c,C_word *av){
+/* k5252 in rewrite-make-vector in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in ... */
+static void C_ccall f_5254(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17644,12 +17644,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
-C_save_and_reclaim((void *)f_5251,2,av);}
+C_save_and_reclaim((void *)f_5254,2,av);}
 a=C_alloc(6);
 t2=C_eqp(lf[31],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5171,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:1148: chicken.base#gensym */
+t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5174,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:1152: chicken.base#gensym */
 t4=*((C_word*)lf[50]+1);{
 C_word *av2=av;
 av2[0]=t4;
@@ -17662,8 +17662,8 @@ av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in k5088 in k5085 in ... */
-static void C_ccall f_5254(C_word c,C_word *av){
+/* k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in k5088 in ... */
+static void C_ccall f_5257(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17671,10 +17671,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,4)))){
-C_save_and_reclaim((void *)f_5254,2,av);}
+C_save_and_reclaim((void *)f_5257,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5257,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1167: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5260,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1171: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -17689,8 +17689,8 @@ av2[3]=C_fix(8);
 av2[4]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in k5088 in ... */
-static void C_ccall f_5257(C_word c,C_word *av){
+/* k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in ... */
+static void C_ccall f_5260(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17699,11 +17699,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,6)))){
-C_save_and_reclaim((void *)f_5257,2,av);}
+C_save_and_reclaim((void *)f_5260,2,av);}
 a=C_alloc(6);
-t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5259,tmp=(C_word)a,a+=2,tmp);
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5381,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:1189: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5262,tmp=(C_word)a,a+=2,tmp);
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5384,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:1193: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -17718,8 +17718,8 @@ av2[3]=C_fix(8);
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* rewrite-call/cc in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in ... */
-static void C_ccall f_5259(C_word c,C_word *av){
+/* rewrite-call/cc in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in ... */
+static void C_ccall f_5262(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17736,7 +17736,7 @@ C_word t11;
 C_word t12;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
-C_save_and_reclaim((void *)f_5259,6,av);}
+C_save_and_reclaim((void *)f_5262,6,av);}
 a=C_alloc(6);
 t6=C_i_length(t5);
 t7=C_eqp(C_fix(1),t6);
@@ -17744,8 +17744,8 @@ if(C_truep(t7)){
 t8=t5;
 t9=C_i_car(t8);
 t10=t9;
-t11=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5373,a[2]=t10,a[3]=t4,a[4]=t2,a[5]=t1,tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:1174: chicken.compiler.support#node-class */
+t11=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5376,a[2]=t10,a[3]=t4,a[4]=t2,a[5]=t1,tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:1178: chicken.compiler.support#node-class */
 t12=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t12;
@@ -17759,8 +17759,8 @@ av2[0]=t8;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t8+1)))(2,av2);}}}
 
-/* k5276 in k5371 in rewrite-call/cc in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in ... */
-static void C_ccall f_5278(C_word c,C_word *av){
+/* k5279 in k5374 in rewrite-call/cc in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in ... */
+static void C_ccall f_5281(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17769,12 +17769,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
-C_save_and_reclaim((void *)f_5278,2,av);}
+C_save_and_reclaim((void *)f_5281,2,av);}
 a=C_alloc(7);
 t2=t1;
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_5361,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=t2,tmp=(C_word)a,a+=7,tmp);
-/* c-platform.scm:1176: chicken.compiler.support#node-class */
+t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_5364,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=t2,tmp=(C_word)a,a+=7,tmp);
+/* c-platform.scm:1180: chicken.compiler.support#node-class */
 t4=*((C_word*)lf[34]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -17793,8 +17793,8 @@ av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* a5294 in k5355 in k5359 in k5276 in k5371 in rewrite-call/cc in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in ... */
-static void C_ccall f_5295(C_word c,C_word *av){
+/* a5297 in k5358 in k5362 in k5279 in k5374 in rewrite-call/cc in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in ... */
+static void C_ccall f_5298(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17807,13 +17807,13 @@ C_word t7;
 C_word t8;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(7,c,4)))){
-C_save_and_reclaim((void *)f_5295,5,av);}
+C_save_and_reclaim((void *)f_5298,5,av);}
 a=C_alloc(7);
 if(C_truep(C_i_nequalp(t3,C_fix(2)))){
 t5=(C_truep(t4)?t4:C_i_cadr(((C_word*)t0)[2]));
 t6=t5;
-t7=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_5350,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t1,a[5]=((C_word*)t0)[5],a[6]=t6,tmp=(C_word)a,a+=7,tmp);
-/* c-platform.scm:1183: chicken.compiler.support#db-get */
+t7=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_5353,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t1,a[5]=((C_word*)t0)[5],a[6]=t6,tmp=(C_word)a,a+=7,tmp);
+/* c-platform.scm:1187: chicken.compiler.support#db-get */
 t8=*((C_word*)lf[56]+1);{
 C_word *av2=av;
 av2[0]=t8;
@@ -17829,8 +17829,8 @@ av2[0]=t5;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t5+1)))(2,av2);}}}
 
-/* k5336 in k5340 in k5344 in k5348 in a5294 in k5355 in k5359 in k5276 in k5371 in rewrite-call/cc in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in ... */
-static void C_ccall f_5338(C_word c,C_word *av){
+/* k5339 in k5343 in k5347 in k5351 in a5297 in k5358 in k5362 in k5279 in k5374 in rewrite-call/cc in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in ... */
+static void C_ccall f_5341(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17838,10 +17838,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(9,c,4)))){
-C_save_and_reclaim((void *)f_5338,2,av);}
+C_save_and_reclaim((void *)f_5341,2,av);}
 a=C_alloc(9);
 t2=C_a_i_list3(&a,3,((C_word*)t0)[2],((C_word*)t0)[3],t1);
-/* c-platform.scm:1186: chicken.compiler.support#make-node */
+/* c-platform.scm:1190: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -17856,8 +17856,8 @@ av2[3]=((C_word*)t0)[5];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k5340 in k5344 in k5348 in a5294 in k5355 in k5359 in k5276 in k5371 in rewrite-call/cc in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in ... */
-static void C_ccall f_5342(C_word c,C_word *av){
+/* k5343 in k5347 in k5351 in a5297 in k5358 in k5362 in k5279 in k5374 in rewrite-call/cc in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in ... */
+static void C_ccall f_5345(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17867,13 +17867,13 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(9,c,2)))){
-C_save_and_reclaim((void *)f_5342,2,av);}
+C_save_and_reclaim((void *)f_5345,2,av);}
 a=C_alloc(9);
 if(C_truep(C_i_not(t1))){
 t2=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5338,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t3,tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:1188: chicken.compiler.support#qnode */
+t4=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5341,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t3,tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:1192: chicken.compiler.support#qnode */
 t5=*((C_word*)lf[29]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -17892,8 +17892,8 @@ av2[0]=t2;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}}
 
-/* k5344 in k5348 in a5294 in k5355 in k5359 in k5276 in k5371 in rewrite-call/cc in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in ... */
-static void C_ccall f_5346(C_word c,C_word *av){
+/* k5347 in k5351 in a5297 in k5358 in k5362 in k5279 in k5374 in rewrite-call/cc in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in ... */
+static void C_ccall f_5349(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17901,11 +17901,11 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,4)))){
-C_save_and_reclaim((void *)f_5346,2,av);}
+C_save_and_reclaim((void *)f_5349,2,av);}
 a=C_alloc(5);
 if(C_truep(C_i_not(t1))){
-t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5342,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:1185: chicken.compiler.support#db-get */
+t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5345,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:1189: chicken.compiler.support#db-get */
 t3=*((C_word*)lf[56]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -17926,8 +17926,8 @@ av2[0]=t2;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}}
 
-/* k5348 in a5294 in k5355 in k5359 in k5276 in k5371 in rewrite-call/cc in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in ... */
-static void C_ccall f_5350(C_word c,C_word *av){
+/* k5351 in a5297 in k5358 in k5362 in k5279 in k5374 in rewrite-call/cc in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in ... */
+static void C_ccall f_5353(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17935,11 +17935,11 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(7,c,4)))){
-C_save_and_reclaim((void *)f_5350,2,av);}
+C_save_and_reclaim((void *)f_5353,2,av);}
 a=C_alloc(7);
 if(C_truep(C_i_not(t1))){
-t2=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_5346,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
-/* c-platform.scm:1184: chicken.compiler.support#db-get */
+t2=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_5349,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
+/* c-platform.scm:1188: chicken.compiler.support#db-get */
 t3=*((C_word*)lf[56]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -17960,8 +17960,8 @@ av2[0]=t2;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}}
 
-/* k5355 in k5359 in k5276 in k5371 in rewrite-call/cc in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in ... */
-static void C_ccall f_5357(C_word c,C_word *av){
+/* k5358 in k5362 in k5279 in k5374 in rewrite-call/cc in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in ... */
+static void C_ccall f_5360(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -17971,12 +17971,12 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,5)))){
-C_save_and_reclaim((void *)f_5357,2,av);}
+C_save_and_reclaim((void *)f_5360,2,av);}
 a=C_alloc(6);
 t2=C_i_caddr(t1);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5295,a[2]=t3,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:1178: ##sys#decompose-lambda-list */
+t4=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5298,a[2]=t3,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:1182: ##sys#decompose-lambda-list */
 t5=*((C_word*)lf[66]+1);{
 C_word *av2;
 if(c >= 4) {
@@ -17990,8 +17990,8 @@ av2[2]=t3;
 av2[3]=t4;
 ((C_proc)(void*)(*((C_word*)t5+1)))(4,av2);}}
 
-/* k5359 in k5276 in k5371 in rewrite-call/cc in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in ... */
-static void C_ccall f_5361(C_word c,C_word *av){
+/* k5362 in k5279 in k5374 in rewrite-call/cc in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in ... */
+static void C_ccall f_5364(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18000,12 +18000,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
-C_save_and_reclaim((void *)f_5361,2,av);}
+C_save_and_reclaim((void *)f_5364,2,av);}
 a=C_alloc(6);
 t2=C_eqp(lf[47],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5357,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:1177: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5360,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:1181: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -18024,8 +18024,8 @@ av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* k5367 in k5371 in rewrite-call/cc in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in ... */
-static void C_ccall f_5369(C_word c,C_word *av){
+/* k5370 in k5374 in rewrite-call/cc in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in ... */
+static void C_ccall f_5372(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18033,9 +18033,9 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
-C_save_and_reclaim((void *)f_5369,2,av);}
+C_save_and_reclaim((void *)f_5372,2,av);}
 t2=C_i_car(t1);
-/* c-platform.scm:1175: chicken.compiler.support#db-get */
+/* c-platform.scm:1179: chicken.compiler.support#db-get */
 t3=*((C_word*)lf[56]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -18050,8 +18050,8 @@ av2[3]=t2;
 av2[4]=lf[57];
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k5371 in rewrite-call/cc in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in ... */
-static void C_ccall f_5373(C_word c,C_word *av){
+/* k5374 in rewrite-call/cc in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in ... */
+static void C_ccall f_5376(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18061,13 +18061,13 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(10,c,2)))){
-C_save_and_reclaim((void *)f_5373,2,av);}
+C_save_and_reclaim((void *)f_5376,2,av);}
 a=C_alloc(10);
 t2=C_eqp(lf[35],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5278,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
-t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5369,a[2]=t3,a[3]=((C_word*)t0)[4],tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:1175: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5281,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
+t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5372,a[2]=t3,a[3]=((C_word*)t0)[4],tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:1179: chicken.compiler.support#node-parameters */
 t5=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -18086,8 +18086,8 @@ av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in k5091 in ... */
-static void C_ccall f_5381(C_word c,C_word *av){
+/* k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in ... */
+static void C_ccall f_5384(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18095,10 +18095,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,4)))){
-C_save_and_reclaim((void *)f_5381,2,av);}
+C_save_and_reclaim((void *)f_5384,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5384,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1190: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5387,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1194: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -18113,8 +18113,8 @@ av2[3]=C_fix(8);
 av2[4]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in k5094 in ... */
-static void C_ccall f_5384(C_word c,C_word *av){
+/* k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in ... */
+static void C_ccall f_5387(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18123,11 +18123,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,6)))){
-C_save_and_reclaim((void *)f_5384,2,av);}
+C_save_and_reclaim((void *)f_5387,2,av);}
 a=C_alloc(5);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5388,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5515,tmp=(C_word)a,a+=2,tmp);
-/* c-platform.scm:1218: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5391,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5518,tmp=(C_word)a,a+=2,tmp);
+/* c-platform.scm:1222: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -18142,8 +18142,8 @@ av2[3]=C_fix(8);
 av2[4]=t3;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in ... */
-static void C_ccall f_5388(C_word c,C_word *av){
+/* k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in ... */
+static void C_ccall f_5391(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18151,10 +18151,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
-C_save_and_reclaim((void *)f_5388,2,av);}
+C_save_and_reclaim((void *)f_5391,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5391,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1232: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5394,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1236: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -18170,8 +18170,8 @@ av2[4]=lf[96];
 av2[5]=C_fix(0);
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
-/* k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in ... */
-static void C_ccall f_5391(C_word c,C_word *av){
+/* k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in ... */
+static void C_ccall f_5394(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18179,10 +18179,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
-C_save_and_reclaim((void *)f_5391,2,av);}
+C_save_and_reclaim((void *)f_5394,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5394,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1233: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5397,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1237: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -18198,8 +18198,8 @@ av2[4]=lf[96];
 av2[5]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
-/* k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in ... */
-static void C_ccall f_5394(C_word c,C_word *av){
+/* k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in ... */
+static void C_ccall f_5397(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18207,10 +18207,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
-C_save_and_reclaim((void *)f_5394,2,av);}
+C_save_and_reclaim((void *)f_5397,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5397,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1234: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5400,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1238: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -18226,8 +18226,8 @@ av2[4]=lf[84];
 av2[5]=C_fix(0);
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
-/* k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in ... */
-static void C_ccall f_5397(C_word c,C_word *av){
+/* k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in ... */
+static void C_ccall f_5400(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18235,10 +18235,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
-C_save_and_reclaim((void *)f_5397,2,av);}
+C_save_and_reclaim((void *)f_5400,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5400,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1235: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5403,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1239: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -18254,8 +18254,8 @@ av2[4]=lf[81];
 av2[5]=C_fix(0);
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
-/* k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in ... */
-static void C_ccall f_5400(C_word c,C_word *av){
+/* k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in ... */
+static void C_ccall f_5403(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18263,10 +18263,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,5)))){
-C_save_and_reclaim((void *)f_5400,2,av);}
+C_save_and_reclaim((void *)f_5403,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5403,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1236: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5406,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1240: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 6) {
@@ -18282,8 +18282,8 @@ av2[4]=lf[92];
 av2[5]=C_fix(0);
 ((C_proc)(void*)(*((C_word*)t3+1)))(6,av2);}}
 
-/* k5401 in k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in ... */
-static void C_ccall f_5403(C_word c,C_word *av){
+/* k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in ... */
+static void C_ccall f_5406(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18292,11 +18292,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,6)))){
-C_save_and_reclaim((void *)f_5403,2,av);}
+C_save_and_reclaim((void *)f_5406,2,av);}
 a=C_alloc(5);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5406,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5475,tmp=(C_word)a,a+=2,tmp);
-/* c-platform.scm:1238: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5409,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5478,tmp=(C_word)a,a+=2,tmp);
+/* c-platform.scm:1242: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -18311,8 +18311,8 @@ av2[3]=C_fix(8);
 av2[4]=t3;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in ... */
-static void C_ccall f_5406(C_word c,C_word *av){
+/* k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in ... */
+static void C_ccall f_5409(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18321,11 +18321,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,6)))){
-C_save_and_reclaim((void *)f_5406,2,av);}
+C_save_and_reclaim((void *)f_5409,2,av);}
 a=C_alloc(5);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5409,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5435,tmp=(C_word)a,a+=2,tmp);
-/* c-platform.scm:1250: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5412,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+t3=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5438,tmp=(C_word)a,a+=2,tmp);
+/* c-platform.scm:1254: chicken.compiler.optimizer#rewrite */
 t4=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -18340,8 +18340,8 @@ av2[3]=C_fix(8);
 av2[4]=t3;
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 
-/* k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in ... */
-static void C_ccall f_5409(C_word c,C_word *av){
+/* k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in ... */
+static void C_ccall f_5412(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18349,10 +18349,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_5409,2,av);}
+C_save_and_reclaim((void *)f_5412,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5412,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1262: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5415,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1266: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -18369,8 +18369,8 @@ av2[5]=lf[83];
 av2[6]=lf[84];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in ... */
-static void C_ccall f_5412(C_word c,C_word *av){
+/* k5413 in k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in ... */
+static void C_ccall f_5415(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18378,10 +18378,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_5412,2,av);}
+C_save_and_reclaim((void *)f_5415,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5415,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1263: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5418,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1267: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -18398,8 +18398,8 @@ av2[5]=lf[80];
 av2[6]=lf[81];
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k5413 in k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in ... */
-static void C_ccall f_5415(C_word c,C_word *av){
+/* k5416 in k5413 in k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in ... */
+static void C_ccall f_5418(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18407,10 +18407,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,8)))){
-C_save_and_reclaim((void *)f_5415,2,av);}
+C_save_and_reclaim((void *)f_5418,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5418,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1264: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5421,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1268: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 9) {
@@ -18429,8 +18429,8 @@ av2[7]=C_fix(0);
 av2[8]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(9,av2);}}
 
-/* k5416 in k5413 in k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in ... */
-static void C_ccall f_5418(C_word c,C_word *av){
+/* k5419 in k5416 in k5413 in k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in ... */
+static void C_ccall f_5421(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18438,10 +18438,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,8)))){
-C_save_and_reclaim((void *)f_5418,2,av);}
+C_save_and_reclaim((void *)f_5421,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5421,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1265: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5424,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1269: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 9) {
@@ -18460,8 +18460,8 @@ av2[7]=C_fix(0);
 av2[8]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(9,av2);}}
 
-/* k5419 in k5416 in k5413 in k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in ... */
-static void C_ccall f_5421(C_word c,C_word *av){
+/* k5422 in k5419 in k5416 in k5413 in k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in ... */
+static void C_ccall f_5424(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18469,10 +18469,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_5421,2,av);}
+C_save_and_reclaim((void *)f_5424,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5424,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1266: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5427,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1270: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -18489,8 +18489,8 @@ av2[5]=lf[74];
 av2[6]=C_fix(0);
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k5422 in k5419 in k5416 in k5413 in k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in ... */
-static void C_ccall f_5424(C_word c,C_word *av){
+/* k5425 in k5422 in k5419 in k5416 in k5413 in k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in ... */
+static void C_ccall f_5427(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18498,10 +18498,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,6)))){
-C_save_and_reclaim((void *)f_5424,2,av);}
+C_save_and_reclaim((void *)f_5427,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5427,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1267: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5430,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1271: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 7) {
@@ -18518,8 +18518,8 @@ av2[5]=lf[72];
 av2[6]=C_fix(0);
 ((C_proc)(void*)(*((C_word*)t3+1)))(7,av2);}}
 
-/* k5425 in k5422 in k5419 in k5416 in k5413 in k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in ... */
-static void C_ccall f_5427(C_word c,C_word *av){
+/* k5428 in k5425 in k5422 in k5419 in k5416 in k5413 in k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in ... */
+static void C_ccall f_5430(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18527,10 +18527,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
-C_save_and_reclaim((void *)f_5427,2,av);}
+C_save_and_reclaim((void *)f_5430,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5430,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1269: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5433,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1273: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -18548,8 +18548,8 @@ av2[6]=C_SCHEME_FALSE;
 av2[7]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
-/* k5428 in k5425 in k5422 in k5419 in k5416 in k5413 in k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in ... */
-static void C_ccall f_5430(C_word c,C_word *av){
+/* k5431 in k5428 in k5425 in k5422 in k5419 in k5416 in k5413 in k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in ... */
+static void C_ccall f_5433(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18557,10 +18557,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,7)))){
-C_save_and_reclaim((void *)f_5430,2,av);}
+C_save_and_reclaim((void *)f_5433,2,av);}
 a=C_alloc(3);
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5433,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1270: chicken.compiler.optimizer#rewrite */
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5436,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1274: chicken.compiler.optimizer#rewrite */
 t3=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 8) {
@@ -18578,23 +18578,23 @@ av2[6]=C_SCHEME_FALSE;
 av2[7]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(8,av2);}}
 
-/* k5431 in k5428 in k5425 in k5422 in k5419 in k5416 in k5413 in k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in ... */
-static void C_ccall f_5433(C_word c,C_word *av){
+/* k5434 in k5431 in k5428 in k5425 in k5422 in k5419 in k5416 in k5413 in k5410 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in ... */
+static void C_ccall f_5436(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
-C_save_and_reclaim((void *)f_5433,2,av);}
+C_save_and_reclaim((void *)f_5436,2,av);}
 t2=((C_word*)t0)[2];{
 C_word *av2=av;
 av2[0]=t2;
 av2[1]=C_SCHEME_UNDEFINED;
 ((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}
 
-/* a5434 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in ... */
-static void C_ccall f_5435(C_word c,C_word *av){
+/* a5437 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in ... */
+static void C_ccall f_5438(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18612,17 +18612,17 @@ C_word t12;
 C_word t13;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(11,c,4)))){
-C_save_and_reclaim((void *)f_5435,6,av);}
+C_save_and_reclaim((void *)f_5438,6,av);}
 a=C_alloc(11);
 t6=C_i_length(t5);
 t7=C_eqp(C_fix(1),t6);
 if(C_truep(t7)){
 t8=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t9=t8;
-t10=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5457,a[2]=t4,a[3]=t1,a[4]=t9,tmp=(C_word)a,a+=5,tmp);
+t10=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5460,a[2]=t4,a[3]=t1,a[4]=t9,tmp=(C_word)a,a+=5,tmp);
 t11=C_eqp(*((C_word*)lf[25]+1),lf[24]);
 t12=(C_truep(t11)?C_a_i_list1(&a,1,lf[85]):C_a_i_list1(&a,1,lf[86]));
-/* c-platform.scm:1257: chicken.compiler.support#make-node */
+/* c-platform.scm:1261: chicken.compiler.support#make-node */
 t13=*((C_word*)lf[22]+1);{
 C_word *av2=av;
 av2[0]=t13;
@@ -18638,8 +18638,8 @@ av2[0]=t8;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t8+1)))(2,av2);}}}
 
-/* k5455 in a5434 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in ... */
-static void C_ccall f_5457(C_word c,C_word *av){
+/* k5458 in a5437 in k5407 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in ... */
+static void C_ccall f_5460(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18647,10 +18647,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_5457,2,av);}
+C_save_and_reclaim((void *)f_5460,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:1254: chicken.compiler.support#make-node */
+/* c-platform.scm:1258: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -18665,8 +18665,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* a5474 in k5401 in k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in ... */
-static void C_ccall f_5475(C_word c,C_word *av){
+/* a5477 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in ... */
+static void C_ccall f_5478(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18684,17 +18684,17 @@ C_word t12;
 C_word t13;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(11,c,4)))){
-C_save_and_reclaim((void *)f_5475,6,av);}
+C_save_and_reclaim((void *)f_5478,6,av);}
 a=C_alloc(11);
 t6=C_i_length(t5);
 t7=C_eqp(C_fix(2),t6);
 if(C_truep(t7)){
 t8=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t9=t8;
-t10=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5497,a[2]=t4,a[3]=t1,a[4]=t9,tmp=(C_word)a,a+=5,tmp);
+t10=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5500,a[2]=t4,a[3]=t1,a[4]=t9,tmp=(C_word)a,a+=5,tmp);
 t11=C_eqp(*((C_word*)lf[25]+1),lf[24]);
 t12=(C_truep(t11)?C_a_i_list1(&a,1,lf[88]):C_a_i_list1(&a,1,lf[89]));
-/* c-platform.scm:1245: chicken.compiler.support#make-node */
+/* c-platform.scm:1249: chicken.compiler.support#make-node */
 t13=*((C_word*)lf[22]+1);{
 C_word *av2=av;
 av2[0]=t13;
@@ -18710,8 +18710,8 @@ av2[0]=t8;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t8+1)))(2,av2);}}}
 
-/* k5495 in a5474 in k5401 in k5398 in k5395 in k5392 in k5389 in k5386 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in ... */
-static void C_ccall f_5497(C_word c,C_word *av){
+/* k5498 in a5477 in k5404 in k5401 in k5398 in k5395 in k5392 in k5389 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in ... */
+static void C_ccall f_5500(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18719,10 +18719,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_5497,2,av);}
+C_save_and_reclaim((void *)f_5500,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:1242: chicken.compiler.support#make-node */
+/* c-platform.scm:1246: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -18737,8 +18737,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* a5514 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in k5097 in ... */
-static void C_ccall f_5515(C_word c,C_word *av){
+/* a5517 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in ... */
+static void C_ccall f_5518(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18754,15 +18754,15 @@ C_word t10;
 C_word t11;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
-C_save_and_reclaim((void *)f_5515,6,av);}
+C_save_and_reclaim((void *)f_5518,6,av);}
 a=C_alloc(5);
 t6=C_i_length(t5);
 t7=C_eqp(C_fix(1),t6);
 if(C_truep(t7)){
 t8=C_i_car(t5);
 t9=t8;
-t10=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5573,a[2]=t4,a[3]=t1,a[4]=t9,tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:1224: chicken.compiler.support#node-class */
+t10=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5576,a[2]=t4,a[3]=t1,a[4]=t9,tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:1228: chicken.compiler.support#node-class */
 t11=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t11;
@@ -18776,8 +18776,8 @@ av2[0]=t8;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t8+1)))(2,av2);}}}
 
-/* k5538 in k5567 in k5571 in a5514 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in ... */
-static void C_ccall f_5540(C_word c,C_word *av){
+/* k5541 in k5570 in k5574 in a5517 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in ... */
+static void C_ccall f_5543(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18789,16 +18789,16 @@ C_word t6;
 C_word t7;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
-C_save_and_reclaim((void *)f_5540,2,av);}
+C_save_and_reclaim((void *)f_5543,2,av);}
 a=C_alloc(8);
 if(C_truep(t1)){
 t2=C_i_assq(((C_word*)t0)[2],lf[98]);
 if(C_truep(t2)){
 t3=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t4=t3;
-t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5561,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t4,tmp=(C_word)a,a+=5,tmp);
+t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5564,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t4,tmp=(C_word)a,a+=5,tmp);
 t6=C_i_cdr(t2);
-/* c-platform.scm:1230: chicken.compiler.support#varnode */
+/* c-platform.scm:1234: chicken.compiler.support#varnode */
 t7=*((C_word*)lf[49]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -18823,8 +18823,8 @@ av2[0]=t2;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}}
 
-/* k5559 in k5538 in k5567 in k5571 in a5514 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in ... */
-static void C_ccall f_5561(C_word c,C_word *av){
+/* k5562 in k5541 in k5570 in k5574 in a5517 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in ... */
+static void C_ccall f_5564(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18832,10 +18832,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_5561,2,av);}
+C_save_and_reclaim((void *)f_5564,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:1228: chicken.compiler.support#make-node */
+/* c-platform.scm:1232: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -18850,8 +18850,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k5567 in k5571 in a5514 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in ... */
-static void C_ccall f_5569(C_word c,C_word *av){
+/* k5570 in k5574 in a5517 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in ... */
+static void C_ccall f_5572(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18861,12 +18861,12 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
-C_save_and_reclaim((void *)f_5569,2,av);}
+C_save_and_reclaim((void *)f_5572,2,av);}
 a=C_alloc(5);
 t2=C_i_car(t1);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5540,a[2]=t3,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:1226: chicken.compiler.support#intrinsic? */
+t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5543,a[2]=t3,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:1230: chicken.compiler.support#intrinsic? */
 t5=*((C_word*)lf[44]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -18879,8 +18879,8 @@ av2[1]=t4;
 av2[2]=t3;
 ((C_proc)(void*)(*((C_word*)t5+1)))(3,av2);}}
 
-/* k5571 in a5514 in k5382 in k5379 in k5255 in k5252 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in k5100 in ... */
-static void C_ccall f_5573(C_word c,C_word *av){
+/* k5574 in a5517 in k5385 in k5382 in k5258 in k5255 in k5148 in k5145 in k5142 in k5139 in k5136 in k5133 in k5130 in k5127 in k5124 in k5121 in k5118 in k5115 in k5112 in k5109 in k5106 in k5103 in ... */
+static void C_ccall f_5576(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18889,12 +18889,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
-C_save_and_reclaim((void *)f_5573,2,av);}
+C_save_and_reclaim((void *)f_5576,2,av);}
 a=C_alloc(4);
 t2=C_eqp(lf[35],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5569,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:1225: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5572,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:1229: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -18913,8 +18913,8 @@ av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* a5579 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in ... */
-static void C_ccall f_5580(C_word c,C_word *av){
+/* a5582 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in ... */
+static void C_ccall f_5583(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18933,7 +18933,7 @@ C_word t13;
 C_word t14;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(10,c,2)))){
-C_save_and_reclaim((void *)f_5580,6,av);}
+C_save_and_reclaim((void *)f_5583,6,av);}
 a=C_alloc(10);
 t6=C_i_length(t5);
 t7=C_eqp(C_fix(2),t6);
@@ -18943,8 +18943,8 @@ t9=C_i_cadr(t8);
 t10=t9;
 t11=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t12=t11;
-t13=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_5695,a[2]=t4,a[3]=t1,a[4]=t12,a[5]=t5,a[6]=t10,tmp=(C_word)a,a+=7,tmp);
-/* c-platform.scm:1022: chicken.compiler.support#node-class */
+t13=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_5698,a[2]=t4,a[3]=t1,a[4]=t12,a[5]=t5,a[6]=t10,tmp=(C_word)a,a+=7,tmp);
+/* c-platform.scm:1026: chicken.compiler.support#node-class */
 t14=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t14;
@@ -18958,8 +18958,8 @@ av2[0]=t8;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t8+1)))(2,av2);}}}
 
-/* k5606 in k5693 in a5579 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in ... */
-static void C_ccall f_5608(C_word c,C_word *av){
+/* k5609 in k5696 in a5582 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in ... */
+static void C_ccall f_5611(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -18969,13 +18969,13 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(11,c,4)))){
-C_save_and_reclaim((void *)f_5608,2,av);}
+C_save_and_reclaim((void *)f_5611,2,av);}
 a=C_alloc(11);
-t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5611,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
+t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5614,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
 if(C_truep(t1)){
 t3=t1;
 t4=C_a_i_list2(&a,2,((C_word*)t0)[2],t3);
-/* c-platform.scm:1019: chicken.compiler.support#make-node */
+/* c-platform.scm:1023: chicken.compiler.support#make-node */
 t5=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -18992,7 +18992,7 @@ av2[4]=t4;
 else{
 t3=C_eqp(*((C_word*)lf[25]+1),lf[24]);
 if(C_truep(t3)){
-/* c-platform.scm:1034: chicken.compiler.support#make-node */
+/* c-platform.scm:1038: chicken.compiler.support#make-node */
 t4=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -19008,7 +19008,7 @@ av2[4]=((C_word*)t0)[5];
 ((C_proc)(void*)(*((C_word*)t4+1)))(5,av2);}}
 else{
 t4=C_a_i_list2(&a,2,lf[260],C_fix(5));
-/* c-platform.scm:1036: chicken.compiler.support#make-node */
+/* c-platform.scm:1040: chicken.compiler.support#make-node */
 t5=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -19023,8 +19023,8 @@ av2[3]=t4;
 av2[4]=((C_word*)t0)[5];
 ((C_proc)(void*)(*((C_word*)t5+1)))(5,av2);}}}}
 
-/* k5609 in k5606 in k5693 in a5579 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in ... */
-static void C_ccall f_5611(C_word c,C_word *av){
+/* k5612 in k5609 in k5696 in a5582 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in ... */
+static void C_ccall f_5614(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19032,10 +19032,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_5611,2,av);}
+C_save_and_reclaim((void *)f_5614,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:1019: chicken.compiler.support#make-node */
+/* c-platform.scm:1023: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -19050,8 +19050,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k5640 in k5689 in k5693 in a5579 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in ... */
-static void C_fcall f_5642(C_word t0,C_word t1){
+/* k5643 in k5692 in k5696 in a5582 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in ... */
+static void C_fcall f_5645(C_word t0,C_word t1){
 C_word tmp;
 C_word t2;
 C_word t3;
@@ -19061,16 +19061,16 @@ C_word t6;
 C_word t7;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(33,0,4)))){
-C_save_and_reclaim_args((void *)trf_5642,2,t0,t1);}
+C_save_and_reclaim_args((void *)trf_5645,2,t0,t1);}
 a=C_alloc(33);
 if(C_truep(t1)){
 if(C_truep(C_i_negativep(((C_word*)t0)[2]))){
 t2=((C_word*)t0)[3];
 t3=C_i_car(t2);
 t4=t3;
-t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5664,a[2]=t4,a[3]=((C_word*)t0)[4],tmp=(C_word)a,a+=4,tmp);
+t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5667,a[2]=t4,a[3]=((C_word*)t0)[4],tmp=(C_word)a,a+=4,tmp);
 t6=C_s_a_i_negate(&a,1,((C_word*)t0)[2]);
-/* c-platform.scm:1029: chicken.compiler.support#qnode */
+/* c-platform.scm:1033: chicken.compiler.support#qnode */
 t7=*((C_word*)lf[29]+1);{
 C_word av2[3];
 av2[0]=t7;
@@ -19081,7 +19081,7 @@ else{
 t2=((C_word*)t0)[3];
 t3=C_i_car(t2);
 t4=C_a_i_list2(&a,2,t3,((C_word*)t0)[5]);
-/* c-platform.scm:1030: chicken.compiler.support#make-node */
+/* c-platform.scm:1034: chicken.compiler.support#make-node */
 t5=*((C_word*)lf[22]+1);{
 C_word av2[5];
 av2[0]=t5;
@@ -19095,10 +19095,10 @@ t2=((C_word*)t0)[4];{
 C_word av2[2];
 av2[0]=t2;
 av2[1]=C_SCHEME_FALSE;
-f_5608(2,av2);}}}
+f_5611(2,av2);}}}
 
-/* k5662 in k5640 in k5689 in k5693 in a5579 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in ... */
-static void C_ccall f_5664(C_word c,C_word *av){
+/* k5665 in k5643 in k5692 in k5696 in a5582 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in ... */
+static void C_ccall f_5667(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19106,10 +19106,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_5664,2,av);}
+C_save_and_reclaim((void *)f_5667,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:1027: chicken.compiler.support#make-node */
+/* c-platform.scm:1031: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -19124,20 +19124,20 @@ av2[3]=lf[261];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k5685 in k5689 in k5693 in a5579 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in ... */
-static void C_ccall f_5687(C_word c,C_word *av){
+/* k5688 in k5692 in k5696 in a5582 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in ... */
+static void C_ccall f_5690(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
-C_save_and_reclaim((void *)f_5687,2,av);}
+C_save_and_reclaim((void *)f_5690,2,av);}
 t2=((C_word*)t0)[2];
-f_5642(t2,C_i_not(t1));}
+f_5645(t2,C_i_not(t1));}
 
-/* k5689 in k5693 in a5579 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in ... */
-static void C_ccall f_5691(C_word c,C_word *av){
+/* k5692 in k5696 in a5582 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in ... */
+static void C_ccall f_5694(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19148,15 +19148,15 @@ C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(9,c,2)))){
-C_save_and_reclaim((void *)f_5691,2,av);}
+C_save_and_reclaim((void *)f_5694,2,av);}
 a=C_alloc(9);
 t2=C_i_car(t1);
 t3=t2;
 if(C_truep(t3)){
-t4=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5642,a[2]=t3,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
+t4=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5645,a[2]=t3,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
 if(C_truep(C_fixnump(t3))){
-t5=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5687,a[2]=t4,tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:1025: chicken.compiler.support#big-fixnum? */
+t5=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5690,a[2]=t4,tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:1029: chicken.compiler.support#big-fixnum? */
 t6=*((C_word*)lf[263]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -19170,16 +19170,16 @@ av2[2]=t3;
 ((C_proc)(void*)(*((C_word*)t6+1)))(3,av2);}}
 else{
 t5=t4;
-f_5642(t5,C_SCHEME_FALSE);}}
+f_5645(t5,C_SCHEME_FALSE);}}
 else{
 t4=((C_word*)t0)[3];{
 C_word *av2=av;
 av2[0]=t4;
 av2[1]=C_SCHEME_FALSE;
-f_5608(2,av2);}}}
+f_5611(2,av2);}}}
 
-/* k5693 in a5579 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in ... */
-static void C_ccall f_5695(C_word c,C_word *av){
+/* k5696 in a5582 in k4875 in k4872 in k4869 in k4866 in k4863 in k4860 in k4857 in k4854 in k4851 in k4848 in k4845 in k4842 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in ... */
+static void C_ccall f_5698(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19190,15 +19190,15 @@ C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(11,c,2)))){
-C_save_and_reclaim((void *)f_5695,2,av);}
+C_save_and_reclaim((void *)f_5698,2,av);}
 a=C_alloc(11);
 t2=C_eqp(lf[31],t1);
-t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5608,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
+t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_5611,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
 if(C_truep(t2)){
 t4=C_eqp(*((C_word*)lf[25]+1),lf[24]);
 if(C_truep(t4)){
-t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5691,a[2]=((C_word*)t0)[5],a[3]=t3,a[4]=((C_word*)t0)[6],tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:1024: chicken.compiler.support#node-parameters */
+t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5694,a[2]=((C_word*)t0)[5],a[3]=t3,a[4]=((C_word*)t0)[6],tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:1028: chicken.compiler.support#node-parameters */
 t6=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -19215,16 +19215,16 @@ t5=t3;{
 C_word *av2=av;
 av2[0]=t5;
 av2[1]=C_SCHEME_FALSE;
-f_5608(2,av2);}}}
+f_5611(2,av2);}}}
 else{
 t4=t3;{
 C_word *av2=av;
 av2[0]=t4;
 av2[1]=C_SCHEME_FALSE;
-f_5608(2,av2);}}}
+f_5611(2,av2);}}}
 
-/* a5701 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in k4779 in k4776 in ... */
-static void C_ccall f_5702(C_word c,C_word *av){
+/* a5704 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in k4779 in ... */
+static void C_ccall f_5705(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19245,20 +19245,20 @@ C_word t15;
 C_word t16;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(16,c,2)))){
-C_save_and_reclaim((void *)f_5702,6,av);}
+C_save_and_reclaim((void *)f_5705,6,av);}
 a=C_alloc(16);
 t6=C_i_length(t5);
 t7=C_eqp(t6,C_fix(3));
 if(C_truep(t7)){
 t8=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t9=t8;
-t10=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5724,a[2]=t4,a[3]=t1,a[4]=t9,tmp=(C_word)a,a+=5,tmp);
+t10=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5727,a[2]=t4,a[3]=t1,a[4]=t9,tmp=(C_word)a,a+=5,tmp);
 t11=t5;
 t12=C_i_caddr(t11);
 t13=t12;
-t14=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5734,a[2]=t10,a[3]=t5,tmp=(C_word)a,a+=4,tmp);
-t15=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5752,a[2]=t14,a[3]=t13,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:988: chicken.compiler.support#node-class */
+t14=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5737,a[2]=t10,a[3]=t5,tmp=(C_word)a,a+=4,tmp);
+t15=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5755,a[2]=t14,a[3]=t13,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:992: chicken.compiler.support#node-class */
 t16=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t16;
@@ -19272,8 +19272,8 @@ av2[0]=t8;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t8+1)))(2,av2);}}}
 
-/* k5722 in a5701 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in k4779 in ... */
-static void C_ccall f_5724(C_word c,C_word *av){
+/* k5725 in a5704 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in ... */
+static void C_ccall f_5727(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19281,10 +19281,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_5724,2,av);}
+C_save_and_reclaim((void *)f_5727,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:982: chicken.compiler.support#make-node */
+/* c-platform.scm:986: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -19299,17 +19299,17 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k5732 in a5701 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in k4779 in ... */
-static void C_ccall f_5734(C_word c,C_word *av){
+/* k5735 in a5704 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in ... */
+static void C_ccall f_5737(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
-C_save_and_reclaim((void *)f_5734,2,av);}
+C_save_and_reclaim((void *)f_5737,2,av);}
 if(C_truep(t1)){
-/* c-platform.scm:985: chicken.compiler.support#make-node */
+/* c-platform.scm:989: chicken.compiler.support#make-node */
 t2=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -19324,7 +19324,7 @@ av2[3]=lf[295];
 av2[4]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t2+1)))(5,av2);}}
 else{
-/* c-platform.scm:985: chicken.compiler.support#make-node */
+/* c-platform.scm:989: chicken.compiler.support#make-node */
 t2=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -19339,8 +19339,8 @@ av2[3]=lf[296];
 av2[4]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t2+1)))(5,av2);}}}
 
-/* k5746 in k5750 in a5701 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in ... */
-static void C_ccall f_5748(C_word c,C_word *av){
+/* k5749 in k5753 in a5704 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in ... */
+static void C_ccall f_5751(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19348,9 +19348,9 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
-C_save_and_reclaim((void *)f_5748,2,av);}
+C_save_and_reclaim((void *)f_5751,2,av);}
 t2=C_i_car(t1);
-/* c-platform.scm:989: chicken.compiler.support#immediate? */
+/* c-platform.scm:993: chicken.compiler.support#immediate? */
 t3=*((C_word*)lf[32]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -19363,8 +19363,8 @@ av2[1]=((C_word*)t0)[2];
 av2[2]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(3,av2);}}
 
-/* k5750 in a5701 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in k4779 in ... */
-static void C_ccall f_5752(C_word c,C_word *av){
+/* k5753 in a5704 in k4839 in k4836 in k4833 in k4830 in k4827 in k4824 in k4821 in k4818 in k4815 in k4812 in k4809 in k4806 in k4803 in k4800 in k4797 in k4794 in k4791 in k4788 in k4785 in k4782 in ... */
+static void C_ccall f_5755(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19373,12 +19373,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_5752,2,av);}
+C_save_and_reclaim((void *)f_5755,2,av);}
 a=C_alloc(3);
 t2=C_eqp(lf[31],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5748,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:989: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5751,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:993: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -19395,10 +19395,10 @@ t3=((C_word*)t0)[2];{
 C_word *av2=av;
 av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
-f_5734(2,av2);}}}
+f_5737(2,av2);}}}
 
-/* a5758 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
-static void C_ccall f_5759(C_word c,C_word *av){
+/* a5761 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
+static void C_ccall f_5762(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19420,7 +19420,7 @@ C_word t16;
 C_word t17;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(16,c,2)))){
-C_save_and_reclaim((void *)f_5759,6,av);}
+C_save_and_reclaim((void *)f_5762,6,av);}
 a=C_alloc(16);
 t6=C_eqp(lf[24],*((C_word*)lf[25]+1));
 if(C_truep(t6)){
@@ -19432,10 +19432,10 @@ t10=t9;
 t11=t5;
 t12=C_i_cadr(t11);
 t13=t12;
-t14=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5790,a[2]=t4,a[3]=t1,a[4]=t10,tmp=(C_word)a,a+=5,tmp);
-t15=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5793,a[2]=t5,a[3]=t14,tmp=(C_word)a,a+=4,tmp);
-t16=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5829,a[2]=t15,a[3]=t13,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:870: chicken.compiler.support#node-class */
+t14=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5793,a[2]=t4,a[3]=t1,a[4]=t10,tmp=(C_word)a,a+=5,tmp);
+t15=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5796,a[2]=t5,a[3]=t14,tmp=(C_word)a,a+=4,tmp);
+t16=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5832,a[2]=t15,a[3]=t13,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:871: chicken.compiler.support#node-class */
 t17=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t17;
@@ -19455,8 +19455,8 @@ av2[0]=t7;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t7+1)))(2,av2);}}}
 
-/* k5788 in a5758 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
-static void C_ccall f_5790(C_word c,C_word *av){
+/* k5791 in a5761 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in ... */
+static void C_ccall f_5793(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19464,10 +19464,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_5790,2,av);}
+C_save_and_reclaim((void *)f_5793,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:866: chicken.compiler.support#make-node */
+/* c-platform.scm:867: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -19482,8 +19482,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k5791 in a5758 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
-static void C_fcall f_5793(C_word t0,C_word t1){
+/* k5794 in a5761 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in ... */
+static void C_fcall f_5796(C_word t0,C_word t1){
 C_word tmp;
 C_word t2;
 C_word t3;
@@ -19492,14 +19492,14 @@ C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(4,0,4)))){
-C_save_and_reclaim_args((void *)trf_5793,2,t0,t1);}
+C_save_and_reclaim_args((void *)trf_5796,2,t0,t1);}
 a=C_alloc(4);
 if(C_truep(t1)){
 t2=((C_word*)t0)[2];
 t3=C_i_car(t2);
 t4=t3;
-t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5808,a[2]=t4,a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:874: chicken.compiler.support#qnode */
+t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5811,a[2]=t4,a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:875: chicken.compiler.support#qnode */
 t6=*((C_word*)lf[29]+1);{
 C_word av2[3];
 av2[0]=t6;
@@ -19507,7 +19507,7 @@ av2[1]=t5;
 av2[2]=C_fix(1);
 ((C_proc)(void*)(*((C_word*)t6+1)))(3,av2);}}
 else{
-/* c-platform.scm:875: chicken.compiler.support#make-node */
+/* c-platform.scm:876: chicken.compiler.support#make-node */
 t2=*((C_word*)lf[22]+1);{
 C_word av2[5];
 av2[0]=t2;
@@ -19517,8 +19517,8 @@ av2[3]=lf[456];
 av2[4]=((C_word*)t0)[2];
 ((C_proc)(void*)(*((C_word*)t2+1)))(5,av2);}}}
 
-/* k5806 in k5791 in a5758 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in ... */
-static void C_ccall f_5808(C_word c,C_word *av){
+/* k5809 in k5794 in a5761 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in ... */
+static void C_ccall f_5811(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19526,10 +19526,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_5808,2,av);}
+C_save_and_reclaim((void *)f_5811,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:872: chicken.compiler.support#make-node */
+/* c-platform.scm:873: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -19544,8 +19544,8 @@ av2[3]=lf[455];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k5823 in k5827 in a5758 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in ... */
-static void C_ccall f_5825(C_word c,C_word *av){
+/* k5826 in k5830 in a5761 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in ... */
+static void C_ccall f_5828(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19553,13 +19553,13 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
-C_save_and_reclaim((void *)f_5825,2,av);}
+C_save_and_reclaim((void *)f_5828,2,av);}
 t2=C_i_car(t1);
 t3=((C_word*)t0)[2];
-f_5793(t3,C_eqp(C_fix(2),t2));}
+f_5796(t3,C_eqp(C_fix(2),t2));}
 
-/* k5827 in a5758 in k4578 in k4575 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
-static void C_ccall f_5829(C_word c,C_word *av){
+/* k5830 in a5761 in k4581 in k4578 in k4443 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in ... */
+static void C_ccall f_5832(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19568,12 +19568,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_5829,2,av);}
+C_save_and_reclaim((void *)f_5832,2,av);}
 a=C_alloc(3);
 t2=C_eqp(lf[31],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5825,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:871: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5828,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:872: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -19587,10 +19587,10 @@ av2[2]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}
 else{
 t3=((C_word*)t0)[2];
-f_5793(t3,C_SCHEME_FALSE);}}
+f_5796(t3,C_SCHEME_FALSE);}}
 
-/* a5835 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in ... */
-static void C_ccall f_5836(C_word c,C_word *av){
+/* a5838 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
+static void C_ccall f_5839(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19604,20 +19604,20 @@ C_word t8;
 C_word t9;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
-C_save_and_reclaim((void *)f_5836,6,av);}
+C_save_and_reclaim((void *)f_5839,6,av);}
 a=C_alloc(5);
 t6=C_i_nullp(t5);
-t7=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5846,a[2]=t1,a[3]=t5,a[4]=t4,tmp=(C_word)a,a+=5,tmp);
+t7=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5849,a[2]=t1,a[3]=t5,a[4]=t4,tmp=(C_word)a,a+=5,tmp);
 if(C_truep(t6)){
 t8=t7;
-f_5846(t8,t6);}
+f_5849(t8,t6);}
 else{
 t8=C_eqp(*((C_word*)lf[25]+1),lf[24]);
 t9=t7;
-f_5846(t9,C_i_not(t8));}}
+f_5849(t9,C_i_not(t8));}}
 
-/* k5844 in a5835 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
-static void C_fcall f_5846(C_word t0,C_word t1){
+/* k5847 in a5838 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
+static void C_fcall f_5849(C_word t0,C_word t1){
 C_word tmp;
 C_word t2;
 C_word t3;
@@ -19629,7 +19629,7 @@ C_word t8;
 C_word t9;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(8,0,4)))){
-C_save_and_reclaim_args((void *)trf_5846,2,t0,t1);}
+C_save_and_reclaim_args((void *)trf_5849,2,t0,t1);}
 a=C_alloc(8);
 if(C_truep(t1)){
 t2=((C_word*)t0)[2];{
@@ -19642,9 +19642,9 @@ t2=C_i_cdr(((C_word*)t0)[3]);
 if(C_truep(C_i_nullp(t2))){
 t3=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t4=t3;
-t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5867,a[2]=((C_word*)t0)[4],a[3]=((C_word*)t0)[2],a[4]=t4,tmp=(C_word)a,a+=5,tmp);
+t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5870,a[2]=((C_word*)t0)[4],a[3]=((C_word*)t0)[2],a[4]=t4,tmp=(C_word)a,a+=5,tmp);
 if(C_truep(*((C_word*)lf[26]+1))){
-/* c-platform.scm:808: chicken.compiler.support#make-node */
+/* c-platform.scm:809: chicken.compiler.support#make-node */
 t6=*((C_word*)lf[22]+1);{
 C_word av2[5];
 av2[0]=t6;
@@ -19654,7 +19654,7 @@ av2[3]=lf[458];
 av2[4]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t6+1)))(5,av2);}}
 else{
-/* c-platform.scm:808: chicken.compiler.support#make-node */
+/* c-platform.scm:809: chicken.compiler.support#make-node */
 t6=*((C_word*)lf[22]+1);{
 C_word av2[5];
 av2[0]=t6;
@@ -19666,15 +19666,15 @@ av2[4]=((C_word*)t0)[3];
 else{
 t3=((C_word*)t0)[3];
 t4=C_u_i_car(t3);
-t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5920,a[2]=t4,a[3]=((C_word*)t0)[4],a[4]=((C_word*)t0)[2],tmp=(C_word)a,a+=5,tmp);
-t6=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5922,tmp=(C_word)a,a+=2,tmp);
+t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5923,a[2]=t4,a[3]=((C_word*)t0)[4],a[4]=((C_word*)t0)[2],tmp=(C_word)a,a+=5,tmp);
+t6=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5925,tmp=(C_word)a,a+=2,tmp);
 t7=((C_word*)t0)[3];
 t8=C_u_i_cdr(t7);
-/* c-platform.scm:814: filter */
-f_2293(t5,t6,t8);}}}
+/* c-platform.scm:815: filter */
+f_2295(t5,t6,t8);}}}
 
-/* k5865 in k5844 in a5835 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
-static void C_ccall f_5867(C_word c,C_word *av){
+/* k5868 in k5847 in a5838 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
+static void C_ccall f_5870(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19682,10 +19682,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_5867,2,av);}
+C_save_and_reclaim((void *)f_5870,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:805: chicken.compiler.support#make-node */
+/* c-platform.scm:806: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -19700,8 +19700,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k5893 in k5918 in k5844 in a5835 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
-static void C_ccall f_5895(C_word c,C_word *av){
+/* k5896 in k5921 in k5847 in a5838 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
+static void C_ccall f_5898(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19709,10 +19709,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_5895,2,av);}
+C_save_and_reclaim((void *)f_5898,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:820: chicken.compiler.support#make-node */
+/* c-platform.scm:821: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -19727,8 +19727,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* a5896 in k5918 in k5844 in a5835 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
-static void C_ccall f_5897(C_word c,C_word *av){
+/* a5899 in k5921 in k5847 in a5838 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
+static void C_ccall f_5900(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19739,11 +19739,11 @@ C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_5897,4,av);}
+C_save_and_reclaim((void *)f_5900,4,av);}
 a=C_alloc(6);
 t4=(C_truep(*((C_word*)lf[26]+1))?lf[460]:lf[461]);
 t5=C_a_i_list2(&a,2,t2,t3);
-/* c-platform.scm:826: chicken.compiler.support#make-node */
+/* c-platform.scm:827: chicken.compiler.support#make-node */
 t6=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -19758,8 +19758,8 @@ av2[3]=t4;
 av2[4]=t5;
 ((C_proc)(void*)(*((C_word*)t6+1)))(5,av2);}}
 
-/* k5918 in k5844 in a5835 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
-static void C_ccall f_5920(C_word c,C_word *av){
+/* k5921 in k5847 in a5838 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
+static void C_ccall f_5923(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19772,16 +19772,16 @@ C_word t7;
 C_word t8;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(13,c,4)))){
-C_save_and_reclaim((void *)f_5920,2,av);}
+C_save_and_reclaim((void *)f_5923,2,av);}
 a=C_alloc(13);
 t2=C_a_i_cons(&a,2,((C_word*)t0)[2],t1);
 t3=C_i_length(t2);
 if(C_truep(C_fixnum_greater_or_equal_p(t3,C_fix(2)))){
 t4=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t5=t4;
-t6=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5895,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t5,tmp=(C_word)a,a+=5,tmp);
-t7=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5897,tmp=(C_word)a,a+=2,tmp);
-/* c-platform.scm:824: chicken.compiler.support#fold-inner */
+t6=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5898,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t5,tmp=(C_word)a,a+=5,tmp);
+t7=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_5900,tmp=(C_word)a,a+=2,tmp);
+/* c-platform.scm:825: chicken.compiler.support#fold-inner */
 t8=*((C_word*)lf[60]+1);{
 C_word *av2;
 if(c >= 4) {
@@ -19801,8 +19801,8 @@ av2[0]=t4;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}}
 
-/* a5921 in k5844 in a5835 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
-static void C_ccall f_5922(C_word c,C_word *av){
+/* a5924 in k5847 in a5838 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
+static void C_ccall f_5925(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19811,10 +19811,10 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
-C_save_and_reclaim((void *)f_5922,3,av);}
+C_save_and_reclaim((void *)f_5925,3,av);}
 a=C_alloc(4);
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5945,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:816: chicken.compiler.support#node-class */
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_5948,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:817: chicken.compiler.support#node-class */
 t4=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t4;
@@ -19822,8 +19822,8 @@ av2[1]=t3;
 av2[2]=t2;
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}
 
-/* k5939 in k5943 in a5921 in k5844 in a5835 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
-static void C_ccall f_5941(C_word c,C_word *av){
+/* k5942 in k5946 in a5924 in k5847 in a5838 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in ... */
+static void C_ccall f_5944(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19832,7 +19832,7 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
-C_save_and_reclaim((void *)f_5941,2,av);}
+C_save_and_reclaim((void *)f_5944,2,av);}
 t2=C_i_car(t1);
 t3=C_i_zerop(t2);
 t4=((C_word*)t0)[2];{
@@ -19841,8 +19841,8 @@ av2[0]=t4;
 av2[1]=C_i_not(t3);
 ((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}
 
-/* k5943 in a5921 in k5844 in a5835 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
-static void C_ccall f_5945(C_word c,C_word *av){
+/* k5946 in a5924 in k5847 in a5838 in k4440 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
+static void C_ccall f_5948(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19851,12 +19851,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_5945,2,av);}
+C_save_and_reclaim((void *)f_5948,2,av);}
 a=C_alloc(3);
 t2=C_eqp(lf[31],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5941,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:817: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_5944,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:818: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -19875,8 +19875,8 @@ av2[0]=t3;
 av2[1]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* a5959 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in k4374 in ... */
-static void C_ccall f_5960(C_word c,C_word *av){
+/* a5962 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in ... */
+static void C_ccall f_5963(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19890,20 +19890,20 @@ C_word t8;
 C_word t9;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
-C_save_and_reclaim((void *)f_5960,6,av);}
+C_save_and_reclaim((void *)f_5963,6,av);}
 a=C_alloc(5);
 t6=C_i_nullp(t5);
-t7=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5970,a[2]=t1,a[3]=t5,a[4]=t4,tmp=(C_word)a,a+=5,tmp);
+t7=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5973,a[2]=t1,a[3]=t5,a[4]=t4,tmp=(C_word)a,a+=5,tmp);
 if(C_truep(t6)){
 t8=t7;
-f_5970(t8,t6);}
+f_5973(t8,t6);}
 else{
 t8=C_eqp(*((C_word*)lf[25]+1),lf[24]);
 t9=t7;
-f_5970(t9,C_i_not(t8));}}
+f_5973(t9,C_i_not(t8));}}
 
-/* k5968 in a5959 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in ... */
-static void C_fcall f_5970(C_word t0,C_word t1){
+/* k5971 in a5962 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
+static void C_fcall f_5973(C_word t0,C_word t1){
 C_word tmp;
 C_word t2;
 C_word t3;
@@ -19915,7 +19915,7 @@ C_word t8;
 C_word t9;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(8,0,4)))){
-C_save_and_reclaim_args((void *)trf_5970,2,t0,t1);}
+C_save_and_reclaim_args((void *)trf_5973,2,t0,t1);}
 a=C_alloc(8);
 if(C_truep(t1)){
 t2=((C_word*)t0)[2];{
@@ -19928,9 +19928,9 @@ t2=C_i_cdr(((C_word*)t0)[3]);
 if(C_truep(C_i_nullp(t2))){
 t3=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t4=t3;
-t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5991,a[2]=((C_word*)t0)[4],a[3]=((C_word*)t0)[2],a[4]=t4,tmp=(C_word)a,a+=5,tmp);
+t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_5994,a[2]=((C_word*)t0)[4],a[3]=((C_word*)t0)[2],a[4]=t4,tmp=(C_word)a,a+=5,tmp);
 if(C_truep(*((C_word*)lf[26]+1))){
-/* c-platform.scm:771: chicken.compiler.support#make-node */
+/* c-platform.scm:772: chicken.compiler.support#make-node */
 t6=*((C_word*)lf[22]+1);{
 C_word av2[5];
 av2[0]=t6;
@@ -19940,7 +19940,7 @@ av2[3]=lf[462];
 av2[4]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t6+1)))(5,av2);}}
 else{
-/* c-platform.scm:771: chicken.compiler.support#make-node */
+/* c-platform.scm:772: chicken.compiler.support#make-node */
 t6=*((C_word*)lf[22]+1);{
 C_word av2[5];
 av2[0]=t6;
@@ -19952,15 +19952,15 @@ av2[4]=((C_word*)t0)[3];
 else{
 t3=((C_word*)t0)[3];
 t4=C_u_i_car(t3);
-t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6044,a[2]=t4,a[3]=((C_word*)t0)[4],a[4]=((C_word*)t0)[2],tmp=(C_word)a,a+=5,tmp);
-t6=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_6046,tmp=(C_word)a,a+=2,tmp);
+t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6047,a[2]=t4,a[3]=((C_word*)t0)[4],a[4]=((C_word*)t0)[2],tmp=(C_word)a,a+=5,tmp);
+t6=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_6049,tmp=(C_word)a,a+=2,tmp);
 t7=((C_word*)t0)[3];
 t8=C_u_i_cdr(t7);
-/* c-platform.scm:777: filter */
-f_2293(t5,t6,t8);}}}
+/* c-platform.scm:778: filter */
+f_2295(t5,t6,t8);}}}
 
-/* k5989 in k5968 in a5959 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
-static void C_ccall f_5991(C_word c,C_word *av){
+/* k5992 in k5971 in a5962 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
+static void C_ccall f_5994(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19968,10 +19968,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_5991,2,av);}
+C_save_and_reclaim((void *)f_5994,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:768: chicken.compiler.support#make-node */
+/* c-platform.scm:769: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -19986,8 +19986,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k6017 in k6042 in k5968 in a5959 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
-static void C_ccall f_6019(C_word c,C_word *av){
+/* k6020 in k6045 in k5971 in a5962 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
+static void C_ccall f_6022(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -19995,10 +19995,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_6019,2,av);}
+C_save_and_reclaim((void *)f_6022,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:783: chicken.compiler.support#make-node */
+/* c-platform.scm:784: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -20013,8 +20013,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* a6020 in k6042 in k5968 in a5959 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
-static void C_ccall f_6021(C_word c,C_word *av){
+/* a6023 in k6045 in k5971 in a5962 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
+static void C_ccall f_6024(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20025,11 +20025,11 @@ C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_6021,4,av);}
+C_save_and_reclaim((void *)f_6024,4,av);}
 a=C_alloc(6);
 t4=(C_truep(*((C_word*)lf[26]+1))?lf[464]:lf[465]);
 t5=C_a_i_list2(&a,2,t2,t3);
-/* c-platform.scm:789: chicken.compiler.support#make-node */
+/* c-platform.scm:790: chicken.compiler.support#make-node */
 t6=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -20044,8 +20044,8 @@ av2[3]=t4;
 av2[4]=t5;
 ((C_proc)(void*)(*((C_word*)t6+1)))(5,av2);}}
 
-/* k6042 in k5968 in a5959 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
-static void C_ccall f_6044(C_word c,C_word *av){
+/* k6045 in k5971 in a5962 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
+static void C_ccall f_6047(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20058,16 +20058,16 @@ C_word t7;
 C_word t8;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(13,c,4)))){
-C_save_and_reclaim((void *)f_6044,2,av);}
+C_save_and_reclaim((void *)f_6047,2,av);}
 a=C_alloc(13);
 t2=C_a_i_cons(&a,2,((C_word*)t0)[2],t1);
 t3=C_i_length(t2);
 if(C_truep(C_fixnum_greater_or_equal_p(t3,C_fix(2)))){
 t4=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t5=t4;
-t6=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6019,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t5,tmp=(C_word)a,a+=5,tmp);
-t7=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_6021,tmp=(C_word)a,a+=2,tmp);
-/* c-platform.scm:787: chicken.compiler.support#fold-inner */
+t6=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6022,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t5,tmp=(C_word)a,a+=5,tmp);
+t7=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_6024,tmp=(C_word)a,a+=2,tmp);
+/* c-platform.scm:788: chicken.compiler.support#fold-inner */
 t8=*((C_word*)lf[60]+1);{
 C_word *av2;
 if(c >= 4) {
@@ -20087,8 +20087,8 @@ av2[0]=t4;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}}
 
-/* a6045 in k5968 in a5959 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
-static void C_ccall f_6046(C_word c,C_word *av){
+/* a6048 in k5971 in a5962 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
+static void C_ccall f_6049(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20097,10 +20097,10 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
-C_save_and_reclaim((void *)f_6046,3,av);}
+C_save_and_reclaim((void *)f_6049,3,av);}
 a=C_alloc(4);
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6069,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:779: chicken.compiler.support#node-class */
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6072,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:780: chicken.compiler.support#node-class */
 t4=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t4;
@@ -20108,8 +20108,8 @@ av2[1]=t3;
 av2[2]=t2;
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}
 
-/* k6063 in k6067 in a6045 in k5968 in a5959 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
-static void C_ccall f_6065(C_word c,C_word *av){
+/* k6066 in k6070 in a6048 in k5971 in a5962 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in ... */
+static void C_ccall f_6068(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20118,7 +20118,7 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
-C_save_and_reclaim((void *)f_6065,2,av);}
+C_save_and_reclaim((void *)f_6068,2,av);}
 t2=C_i_car(t1);
 t3=C_i_zerop(t2);
 t4=((C_word*)t0)[2];{
@@ -20127,8 +20127,8 @@ av2[0]=t4;
 av2[1]=C_i_not(t3);
 ((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}
 
-/* k6067 in a6045 in k5968 in a5959 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
-static void C_ccall f_6069(C_word c,C_word *av){
+/* k6070 in a6048 in k5971 in a5962 in k4437 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
+static void C_ccall f_6072(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20137,12 +20137,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_6069,2,av);}
+C_save_and_reclaim((void *)f_6072,2,av);}
 a=C_alloc(3);
 t2=C_eqp(lf[31],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6065,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:780: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6068,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:781: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -20161,8 +20161,8 @@ av2[0]=t3;
 av2[1]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* a6083 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in k4374 in k4371 in ... */
-static void C_ccall f_6084(C_word c,C_word *av){
+/* a6086 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in k4374 in ... */
+static void C_ccall f_6087(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20175,15 +20175,15 @@ C_word t7;
 C_word t8;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,3)))){
-C_save_and_reclaim((void *)f_6084,6,av);}
+C_save_and_reclaim((void *)f_6087,6,av);}
 a=C_alloc(6);
-t6=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6088,a[2]=t4,a[3]=t1,tmp=(C_word)a,a+=4,tmp);
-t7=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_6202,tmp=(C_word)a,a+=2,tmp);
-/* c-platform.scm:737: filter */
-f_2293(t6,t7,t5);}
+t6=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6091,a[2]=t4,a[3]=t1,tmp=(C_word)a,a+=4,tmp);
+t7=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_6205,tmp=(C_word)a,a+=2,tmp);
+/* c-platform.scm:738: filter */
+f_2295(t6,t7,t5);}
 
-/* k6086 in a6083 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in k4374 in ... */
-static void C_ccall f_6088(C_word c,C_word *av){
+/* k6089 in a6086 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in ... */
+static void C_ccall f_6091(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20196,13 +20196,13 @@ C_word t7;
 C_word t8;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(10,c,4)))){
-C_save_and_reclaim((void *)f_6088,2,av);}
+C_save_and_reclaim((void *)f_6091,2,av);}
 a=C_alloc(10);
 if(C_truep(C_i_nullp(t1))){
 t2=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6109,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t3,tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:742: chicken.compiler.support#qnode */
+t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6112,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t3,tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:743: chicken.compiler.support#qnode */
 t5=*((C_word*)lf[29]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -20220,7 +20220,7 @@ if(C_truep(C_i_nullp(t2))){
 t3=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t4=C_i_car(t1);
 t5=C_a_i_list2(&a,2,((C_word*)t0)[2],t4);
-/* c-platform.scm:744: chicken.compiler.support#make-node */
+/* c-platform.scm:745: chicken.compiler.support#make-node */
 t6=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -20239,9 +20239,9 @@ t3=C_eqp(*((C_word*)lf[25]+1),lf[24]);
 if(C_truep(t3)){
 t4=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t5=t4;
-t6=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6151,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t5,tmp=(C_word)a,a+=5,tmp);
-t7=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_6153,tmp=(C_word)a,a+=2,tmp);
-/* c-platform.scm:750: chicken.compiler.support#fold-inner */
+t6=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6154,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t5,tmp=(C_word)a,a+=5,tmp);
+t7=(*a=C_CLOSURE_TYPE|1,a[1]=(C_word)f_6156,tmp=(C_word)a,a+=2,tmp);
+/* c-platform.scm:751: chicken.compiler.support#fold-inner */
 t8=*((C_word*)lf[60]+1);{
 C_word *av2;
 if(c >= 4) {
@@ -20261,8 +20261,8 @@ av2[0]=t4;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}}}}
 
-/* k6107 in k6086 in a6083 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in ... */
-static void C_ccall f_6109(C_word c,C_word *av){
+/* k6110 in k6089 in a6086 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
+static void C_ccall f_6112(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20270,10 +20270,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_6109,2,av);}
+C_save_and_reclaim((void *)f_6112,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:742: chicken.compiler.support#make-node */
+/* c-platform.scm:743: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -20288,8 +20288,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k6149 in k6086 in a6083 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in ... */
-static void C_ccall f_6151(C_word c,C_word *av){
+/* k6152 in k6089 in a6086 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
+static void C_ccall f_6154(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20297,10 +20297,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_6151,2,av);}
+C_save_and_reclaim((void *)f_6154,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:746: chicken.compiler.support#make-node */
+/* c-platform.scm:747: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -20315,8 +20315,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* a6152 in k6086 in a6083 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in ... */
-static void C_ccall f_6153(C_word c,C_word *av){
+/* a6155 in k6089 in a6086 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
+static void C_ccall f_6156(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20327,11 +20327,11 @@ C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(9,c,2)))){
-C_save_and_reclaim((void *)f_6153,4,av);}
+C_save_and_reclaim((void *)f_6156,4,av);}
 a=C_alloc(9);
-t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6160,a[2]=t2,a[3]=t1,a[4]=t3,tmp=(C_word)a,a+=5,tmp);
-t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6196,a[2]=t4,a[3]=t3,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:752: chicken.compiler.support#node-class */
+t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6163,a[2]=t2,a[3]=t1,a[4]=t3,tmp=(C_word)a,a+=5,tmp);
+t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6199,a[2]=t4,a[3]=t3,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:753: chicken.compiler.support#node-class */
 t6=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t6;
@@ -20339,18 +20339,18 @@ av2[1]=t5;
 av2[2]=t3;
 ((C_proc)(void*)(*((C_word*)t6+1)))(3,av2);}}
 
-/* k6158 in a6152 in k6086 in a6083 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
-static void C_fcall f_6160(C_word t0,C_word t1){
+/* k6161 in a6155 in k6089 in a6086 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
+static void C_fcall f_6163(C_word t0,C_word t1){
 C_word tmp;
 C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,0,4)))){
-C_save_and_reclaim_args((void *)trf_6160,2,t0,t1);}
+C_save_and_reclaim_args((void *)trf_6163,2,t0,t1);}
 a=C_alloc(6);
 if(C_truep(t1)){
-t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6171,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:753: chicken.compiler.support#qnode */
+t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6174,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:754: chicken.compiler.support#qnode */
 t3=*((C_word*)lf[29]+1);{
 C_word av2[3];
 av2[0]=t3;
@@ -20359,7 +20359,7 @@ av2[2]=C_fix(1);
 ((C_proc)(void*)(*((C_word*)t3+1)))(3,av2);}}
 else{
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],((C_word*)t0)[4]);
-/* c-platform.scm:754: chicken.compiler.support#make-node */
+/* c-platform.scm:755: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word av2[5];
 av2[0]=t3;
@@ -20369,8 +20369,8 @@ av2[3]=lf[467];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}}
 
-/* k6169 in k6158 in a6152 in k6086 in a6083 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
-static void C_ccall f_6171(C_word c,C_word *av){
+/* k6172 in k6161 in a6155 in k6089 in a6086 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
+static void C_ccall f_6174(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20378,10 +20378,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_6171,2,av);}
+C_save_and_reclaim((void *)f_6174,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:753: chicken.compiler.support#make-node */
+/* c-platform.scm:754: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -20396,8 +20396,8 @@ av2[3]=lf[466];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k6190 in k6194 in a6152 in k6086 in a6083 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
-static void C_ccall f_6192(C_word c,C_word *av){
+/* k6193 in k6197 in a6155 in k6089 in a6086 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in ... */
+static void C_ccall f_6195(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20405,13 +20405,13 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
-C_save_and_reclaim((void *)f_6192,2,av);}
+C_save_and_reclaim((void *)f_6195,2,av);}
 t2=C_i_car(t1);
 t3=((C_word*)t0)[2];
-f_6160(t3,C_eqp(C_fix(2),t2));}
+f_6163(t3,C_eqp(C_fix(2),t2));}
 
-/* k6194 in a6152 in k6086 in a6083 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
-static void C_ccall f_6196(C_word c,C_word *av){
+/* k6197 in a6155 in k6089 in a6086 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
+static void C_ccall f_6199(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20420,12 +20420,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_6196,2,av);}
+C_save_and_reclaim((void *)f_6199,2,av);}
 a=C_alloc(3);
 t2=C_eqp(lf[31],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6192,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:752: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6195,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:753: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -20439,10 +20439,10 @@ av2[2]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}
 else{
 t3=((C_word*)t0)[2];
-f_6160(t3,C_SCHEME_FALSE);}}
+f_6163(t3,C_SCHEME_FALSE);}}
 
-/* a6201 in a6083 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in k4374 in ... */
-static void C_ccall f_6202(C_word c,C_word *av){
+/* a6204 in a6086 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in ... */
+static void C_ccall f_6205(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20451,10 +20451,10 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
-C_save_and_reclaim((void *)f_6202,3,av);}
+C_save_and_reclaim((void *)f_6205,3,av);}
 a=C_alloc(4);
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6228,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:739: chicken.compiler.support#node-class */
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6231,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:740: chicken.compiler.support#node-class */
 t4=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t4;
@@ -20462,8 +20462,8 @@ av2[1]=t3;
 av2[2]=t2;
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}
 
-/* k6222 in k6226 in a6201 in a6083 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
-static void C_ccall f_6224(C_word c,C_word *av){
+/* k6225 in k6229 in a6204 in a6086 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in ... */
+static void C_ccall f_6227(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20472,7 +20472,7 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
-C_save_and_reclaim((void *)f_6224,2,av);}
+C_save_and_reclaim((void *)f_6227,2,av);}
 t2=C_i_car(t1);
 t3=C_eqp(C_fix(1),t2);
 t4=((C_word*)t0)[2];{
@@ -20481,8 +20481,8 @@ av2[0]=t4;
 av2[1]=C_i_not(t3);
 ((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}
 
-/* k6226 in a6201 in a6083 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in k4377 in ... */
-static void C_ccall f_6228(C_word c,C_word *av){
+/* k6229 in a6204 in a6086 in k4434 in k4431 in k4428 in k4425 in k4422 in k4419 in k4416 in k4413 in k4410 in k4407 in k4404 in k4401 in k4398 in k4395 in k4392 in k4389 in k4386 in k4383 in k4380 in ... */
+static void C_ccall f_6231(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20491,12 +20491,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_6228,2,av);}
+C_save_and_reclaim((void *)f_6231,2,av);}
 a=C_alloc(3);
 t2=C_eqp(lf[31],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6224,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:740: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6227,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:741: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -20515,8 +20515,8 @@ av2[0]=t3;
 av2[1]=C_SCHEME_TRUE;
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_6230(C_word c,C_word *av){
+/* a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_6233(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20537,7 +20537,7 @@ C_word t15;
 C_word t16;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(13,c,2)))){
-C_save_and_reclaim((void *)f_6230,6,av);}
+C_save_and_reclaim((void *)f_6233,6,av);}
 a=C_alloc(13);
 t6=C_i_length(t5);
 t7=C_eqp(t6,C_fix(2));
@@ -20548,9 +20548,9 @@ t10=t9;
 t11=t5;
 t12=C_i_cadr(t11);
 t13=t12;
-t14=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_6246,a[2]=t1,a[3]=t4,a[4]=t5,a[5]=t13,a[6]=t10,tmp=(C_word)a,a+=7,tmp);
-t15=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_6386,a[2]=t4,a[3]=t14,a[4]=t13,a[5]=t10,tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:348: chicken.compiler.support#node-class */
+t14=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_6249,a[2]=t1,a[3]=t4,a[4]=t5,a[5]=t13,a[6]=t10,tmp=(C_word)a,a+=7,tmp);
+t15=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_6389,a[2]=t4,a[3]=t14,a[4]=t13,a[5]=t10,tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:349: chicken.compiler.support#node-class */
 t16=*((C_word*)lf[34]+1);{
 C_word *av2=av;
 av2[0]=t16;
@@ -20564,8 +20564,8 @@ av2[0]=t8;
 av2[1]=C_SCHEME_FALSE;
 ((C_proc)(void*)(*((C_word*)t8+1)))(2,av2);}}}
 
-/* k6244 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_6246(C_word c,C_word *av){
+/* k6247 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_6249(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20575,7 +20575,7 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(15,c,2)))){
-C_save_and_reclaim((void *)f_6246,2,av);}
+C_save_and_reclaim((void *)f_6249,2,av);}
 a=C_alloc(15);
 if(C_truep(t1)){
 t2=((C_word*)t0)[2];{
@@ -20584,10 +20584,10 @@ av2[0]=t2;
 av2[1]=t1;
 ((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}
 else{
-t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6252,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
-t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_6273,a[2]=((C_word*)t0)[3],a[3]=t2,a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
-t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6340,a[2]=t3,a[3]=((C_word*)t0)[6],tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:352: chicken.compiler.support#node-class */
+t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6255,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
+t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_6276,a[2]=((C_word*)t0)[3],a[3]=t2,a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
+t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6343,a[2]=t3,a[3]=((C_word*)t0)[6],tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:353: chicken.compiler.support#node-class */
 t5=*((C_word*)lf[34]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -20600,8 +20600,8 @@ av2[1]=t4;
 av2[2]=((C_word*)t0)[6];
 ((C_proc)(void*)(*((C_word*)t5+1)))(3,av2);}}}
 
-/* k6250 in k6244 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_6252(C_word c,C_word *av){
+/* k6253 in k6247 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_6255(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20611,7 +20611,7 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(8,c,4)))){
-C_save_and_reclaim((void *)f_6252,2,av);}
+C_save_and_reclaim((void *)f_6255,2,av);}
 a=C_alloc(8);
 if(C_truep(t1)){
 t2=t1;
@@ -20623,8 +20623,8 @@ av2[1]=t2;
 else{
 t2=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6270,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[2],a[4]=t3,tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:363: chicken.compiler.support#make-node */
+t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6273,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[2],a[4]=t3,tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:364: chicken.compiler.support#make-node */
 t5=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -20639,8 +20639,8 @@ av2[3]=lf[918];
 av2[4]=((C_word*)t0)[4];
 ((C_proc)(void*)(*((C_word*)t5+1)))(5,av2);}}}
 
-/* k6268 in k6250 in k6244 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 in ... */
-static void C_ccall f_6270(C_word c,C_word *av){
+/* k6271 in k6253 in k6247 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 in ... */
+static void C_ccall f_6273(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20648,10 +20648,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_6270,2,av);}
+C_save_and_reclaim((void *)f_6273,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:361: chicken.compiler.support#make-node */
+/* c-platform.scm:362: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -20666,23 +20666,23 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k6271 in k6244 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_fcall f_6273(C_word t0,C_word t1){
+/* k6274 in k6247 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_fcall f_6276(C_word t0,C_word t1){
 C_word tmp;
 C_word t2;
 C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(9,0,2)))){
-C_save_and_reclaim_args((void *)trf_6273,2,t0,t1);}
+C_save_and_reclaim_args((void *)trf_6276,2,t0,t1);}
 a=C_alloc(9);
-t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6276,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
+t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6279,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
 if(C_truep(t1)){
 t3=t2;
-f_6276(t3,t1);}
+f_6279(t3,t1);}
 else{
-t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6317,a[2]=t2,a[3]=((C_word*)t0)[5],tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:355: chicken.compiler.support#node-class */
+t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6320,a[2]=t2,a[3]=((C_word*)t0)[5],tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:356: chicken.compiler.support#node-class */
 t4=*((C_word*)lf[34]+1);{
 C_word av2[3];
 av2[0]=t4;
@@ -20690,8 +20690,8 @@ av2[1]=t3;
 av2[2]=((C_word*)t0)[5];
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}}
 
-/* k6274 in k6271 in k6244 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 in ... */
-static void C_fcall f_6276(C_word t0,C_word t1){
+/* k6277 in k6274 in k6247 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 in ... */
+static void C_fcall f_6279(C_word t0,C_word t1){
 C_word tmp;
 C_word t2;
 C_word t3;
@@ -20699,13 +20699,13 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(8,0,4)))){
-C_save_and_reclaim_args((void *)trf_6276,2,t0,t1);}
+C_save_and_reclaim_args((void *)trf_6279,2,t0,t1);}
 a=C_alloc(8);
 if(C_truep(t1)){
 t2=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6291,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t3,tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:360: chicken.compiler.support#make-node */
+t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6294,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t3,tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:361: chicken.compiler.support#make-node */
 t5=*((C_word*)lf[22]+1);{
 C_word av2[5];
 av2[0]=t5;
@@ -20719,10 +20719,10 @@ t2=((C_word*)t0)[3];{
 C_word av2[2];
 av2[0]=t2;
 av2[1]=C_SCHEME_FALSE;
-f_6252(2,av2);}}}
+f_6255(2,av2);}}}
 
-/* k6289 in k6274 in k6271 in k6244 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in ... */
-static void C_ccall f_6291(C_word c,C_word *av){
+/* k6292 in k6277 in k6274 in k6247 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in ... */
+static void C_ccall f_6294(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20730,10 +20730,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_6291,2,av);}
+C_save_and_reclaim((void *)f_6294,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:358: chicken.compiler.support#make-node */
+/* c-platform.scm:359: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -20748,20 +20748,20 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k6301 in k6311 in k6315 in k6271 in k6244 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in ... */
-static void C_ccall f_6303(C_word c,C_word *av){
+/* k6304 in k6314 in k6318 in k6274 in k6247 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in ... */
+static void C_ccall f_6306(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
-C_save_and_reclaim((void *)f_6303,2,av);}
+C_save_and_reclaim((void *)f_6306,2,av);}
 t2=((C_word*)t0)[2];
-f_6276(t2,(C_truep(t1)?t1:C_i_symbolp(((C_word*)t0)[3])));}
+f_6279(t2,(C_truep(t1)?t1:C_i_symbolp(((C_word*)t0)[3])));}
 
-/* k6311 in k6315 in k6271 in k6244 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in ... */
-static void C_ccall f_6313(C_word c,C_word *av){
+/* k6314 in k6318 in k6274 in k6247 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in ... */
+static void C_ccall f_6316(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20771,12 +20771,12 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
-C_save_and_reclaim((void *)f_6313,2,av);}
+C_save_and_reclaim((void *)f_6316,2,av);}
 a=C_alloc(4);
 t2=C_i_car(t1);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6303,a[2]=((C_word*)t0)[2],a[3]=t3,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:357: chicken.compiler.support#immediate? */
+t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6306,a[2]=((C_word*)t0)[2],a[3]=t3,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:358: chicken.compiler.support#immediate? */
 t5=*((C_word*)lf[32]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -20789,8 +20789,8 @@ av2[1]=t4;
 av2[2]=t3;
 ((C_proc)(void*)(*((C_word*)t5+1)))(3,av2);}}
 
-/* k6315 in k6271 in k6244 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 in ... */
-static void C_ccall f_6317(C_word c,C_word *av){
+/* k6318 in k6274 in k6247 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 in ... */
+static void C_ccall f_6320(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20799,12 +20799,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_6317,2,av);}
+C_save_and_reclaim((void *)f_6320,2,av);}
 a=C_alloc(3);
 t2=C_eqp(lf[31],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6313,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:356: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6316,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:357: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -20818,10 +20818,10 @@ av2[2]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}
 else{
 t3=((C_word*)t0)[2];
-f_6276(t3,C_SCHEME_FALSE);}}
+f_6279(t3,C_SCHEME_FALSE);}}
 
-/* k6324 in k6334 in k6338 in k6244 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in ... */
-static void C_ccall f_6326(C_word c,C_word *av){
+/* k6327 in k6337 in k6341 in k6247 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in ... */
+static void C_ccall f_6329(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20829,17 +20829,17 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
-C_save_and_reclaim((void *)f_6326,2,av);}
+C_save_and_reclaim((void *)f_6329,2,av);}
 if(C_truep(t1)){
 t2=t1;
 t3=((C_word*)t0)[2];
-f_6273(t3,t2);}
+f_6276(t3,t2);}
 else{
 t2=((C_word*)t0)[2];
-f_6273(t2,C_i_symbolp(((C_word*)t0)[3]));}}
+f_6276(t2,C_i_symbolp(((C_word*)t0)[3]));}}
 
-/* k6334 in k6338 in k6244 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 in ... */
-static void C_ccall f_6336(C_word c,C_word *av){
+/* k6337 in k6341 in k6247 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 in ... */
+static void C_ccall f_6339(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20849,12 +20849,12 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
-C_save_and_reclaim((void *)f_6336,2,av);}
+C_save_and_reclaim((void *)f_6339,2,av);}
 a=C_alloc(4);
 t2=C_i_car(t1);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6326,a[2]=((C_word*)t0)[2],a[3]=t3,tmp=(C_word)a,a+=4,tmp);
-/* c-platform.scm:354: chicken.compiler.support#immediate? */
+t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_6329,a[2]=((C_word*)t0)[2],a[3]=t3,tmp=(C_word)a,a+=4,tmp);
+/* c-platform.scm:355: chicken.compiler.support#immediate? */
 t5=*((C_word*)lf[32]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -20867,8 +20867,8 @@ av2[1]=t4;
 av2[2]=t3;
 ((C_proc)(void*)(*((C_word*)t5+1)))(3,av2);}}
 
-/* k6338 in k6244 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_6340(C_word c,C_word *av){
+/* k6341 in k6247 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_6343(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20877,12 +20877,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_6340,2,av);}
+C_save_and_reclaim((void *)f_6343,2,av);}
 a=C_alloc(3);
 t2=C_eqp(lf[31],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6336,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
-/* c-platform.scm:353: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_6339,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
+/* c-platform.scm:354: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -20896,10 +20896,10 @@ av2[2]=((C_word*)t0)[3];
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}
 else{
 t3=((C_word*)t0)[2];
-f_6273(t3,C_SCHEME_FALSE);}}
+f_6276(t3,C_SCHEME_FALSE);}}
 
-/* k6368 in k6376 in k6372 in k6380 in k6384 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in ... */
-static void C_ccall f_6370(C_word c,C_word *av){
+/* k6371 in k6379 in k6375 in k6383 in k6387 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in ... */
+static void C_ccall f_6373(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20907,10 +20907,10 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
-C_save_and_reclaim((void *)f_6370,2,av);}
+C_save_and_reclaim((void *)f_6373,2,av);}
 a=C_alloc(6);
 t2=C_a_i_list2(&a,2,((C_word*)t0)[2],t1);
-/* c-platform.scm:351: chicken.compiler.support#make-node */
+/* c-platform.scm:352: chicken.compiler.support#make-node */
 t3=*((C_word*)lf[22]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -20925,8 +20925,8 @@ av2[3]=((C_word*)t0)[4];
 av2[4]=t2;
 ((C_proc)(void*)(*((C_word*)t3+1)))(5,av2);}}
 
-/* k6372 in k6380 in k6384 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 in ... */
-static void C_ccall f_6374(C_word c,C_word *av){
+/* k6375 in k6383 in k6387 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 in ... */
+static void C_ccall f_6377(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20935,11 +20935,11 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
-C_save_and_reclaim((void *)f_6374,2,av);}
+C_save_and_reclaim((void *)f_6377,2,av);}
 a=C_alloc(5);
 t2=t1;
-t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6378,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:350: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6381,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:351: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -20952,8 +20952,8 @@ av2[1]=t3;
 av2[2]=((C_word*)t0)[4];
 ((C_proc)(void*)(*((C_word*)t4+1)))(3,av2);}}
 
-/* k6376 in k6372 in k6380 in k6384 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in ... */
-static void C_ccall f_6378(C_word c,C_word *av){
+/* k6379 in k6375 in k6383 in k6387 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in ... */
+static void C_ccall f_6381(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20963,13 +20963,13 @@ C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
-C_save_and_reclaim((void *)f_6378,2,av);}
+C_save_and_reclaim((void *)f_6381,2,av);}
 a=C_alloc(8);
 if(C_truep(C_i_equalp(((C_word*)t0)[2],t1))){
 t2=C_a_i_list1(&a,1,C_SCHEME_TRUE);
 t3=t2;
-t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6370,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t3,tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:351: chicken.compiler.support#qnode */
+t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6373,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t3,tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:352: chicken.compiler.support#qnode */
 t5=*((C_word*)lf[29]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -20986,10 +20986,10 @@ t2=((C_word*)t0)[4];{
 C_word *av2=av;
 av2[0]=t2;
 av2[1]=C_SCHEME_FALSE;
-f_6246(2,av2);}}}
+f_6249(2,av2);}}}
 
-/* k6380 in k6384 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_6382(C_word c,C_word *av){
+/* k6383 in k6387 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_6385(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -20998,12 +20998,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
-C_save_and_reclaim((void *)f_6382,2,av);}
+C_save_and_reclaim((void *)f_6385,2,av);}
 a=C_alloc(5);
 t2=C_eqp(lf[35],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6374,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
-/* c-platform.scm:350: chicken.compiler.support#node-parameters */
+t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6377,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
+/* c-platform.scm:351: chicken.compiler.support#node-parameters */
 t4=*((C_word*)lf[33]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -21020,10 +21020,10 @@ t3=((C_word*)t0)[3];{
 C_word *av2=av;
 av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
-f_6246(2,av2);}}}
+f_6249(2,av2);}}}
 
-/* k6384 in a6229 in k3234 in k3231 in k3075 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_6386(C_word c,C_word *av){
+/* k6387 in a6232 in k3237 in k3234 in k3078 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_6389(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -21032,12 +21032,12 @@ C_word t3;
 C_word t4;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
-C_save_and_reclaim((void *)f_6386,2,av);}
+C_save_and_reclaim((void *)f_6389,2,av);}
 a=C_alloc(6);
 t2=C_eqp(lf[35],t1);
 if(C_truep(t2)){
-t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_6382,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
-/* c-platform.scm:349: chicken.compiler.support#node-class */
+t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_6385,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
+/* c-platform.scm:350: chicken.compiler.support#node-class */
 t4=*((C_word*)lf[34]+1);{
 C_word *av2;
 if(c >= 3) {
@@ -21054,18 +21054,18 @@ t3=((C_word*)t0)[3];{
 C_word *av2=av;
 av2[0]=t3;
 av2[1]=C_SCHEME_FALSE;
-f_6246(2,av2);}}}
+f_6249(2,av2);}}}
 
-/* k6393 in k3072 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_6395(C_word c,C_word *av){
+/* k6396 in k3075 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_6398(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
-C_save_and_reclaim((void *)f_6395,2,av);}
-/* c-platform.scm:313: chicken.compiler.optimizer#rewrite */
+C_save_and_reclaim((void *)f_6398,2,av);}
+/* c-platform.scm:314: chicken.compiler.optimizer#rewrite */
 t2=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -21080,16 +21080,16 @@ av2[3]=C_fix(8);
 av2[4]=t1;
 ((C_proc)(void*)(*((C_word*)t2+1)))(5,av2);}}
 
-/* k6397 in k3005 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_6399(C_word c,C_word *av){
+/* k6400 in k3008 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_6402(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
 C_word t2;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
-C_save_and_reclaim((void *)f_6399,2,av);}
-/* c-platform.scm:312: chicken.compiler.optimizer#rewrite */
+C_save_and_reclaim((void *)f_6402,2,av);}
+/* c-platform.scm:313: chicken.compiler.optimizer#rewrite */
 t2=*((C_word*)lf[46]+1);{
 C_word *av2;
 if(c >= 5) {
@@ -21104,8 +21104,8 @@ av2[3]=C_fix(8);
 av2[4]=t1;
 ((C_proc)(void*)(*((C_word*)t2+1)))(5,av2);}}
 
-/* for-each-loop589 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_fcall f_6401(C_word t0,C_word t1,C_word t2){
+/* for-each-loop590 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_fcall f_6404(C_word t0,C_word t1,C_word t2){
 C_word tmp;
 C_word t3;
 C_word t4;
@@ -21113,13 +21113,13 @@ C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(5,0,4)))){
-C_save_and_reclaim_args((void *)trf_6401,3,t0,t1,t2);}
+C_save_and_reclaim_args((void *)trf_6404,3,t0,t1,t2);}
 a=C_alloc(5);
 if(C_truep(C_i_pairp(t2))){
-t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6411,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=t1,tmp=(C_word)a,a+=5,tmp);
+t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_6414,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=t1,tmp=(C_word)a,a+=5,tmp);
 t4=C_slot(t2,C_fix(0));
 t5=*((C_word*)lf[929]+1);
-/* c-platform.scm:284: g605 */
+/* c-platform.scm:285: g606 */
 t6=*((C_word*)lf[929]+1);{
 C_word av2[5];
 av2[0]=t6;
@@ -21136,8 +21136,8 @@ av2[0]=t4;
 av2[1]=t3;
 ((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}}
 
-/* k6409 in for-each-loop589 in k2996 in k2989 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_6411(C_word c,C_word *av){
+/* k6412 in for-each-loop590 in k2999 in k2992 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_6414(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -21145,25 +21145,25 @@ C_word t2;
 C_word t3;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
-C_save_and_reclaim((void *)f_6411,2,av);}
+C_save_and_reclaim((void *)f_6414,2,av);}
 t2=C_slot(((C_word*)t0)[2],C_fix(1));
 t3=((C_word*)((C_word*)t0)[3])[1];
-f_6401(t3,((C_word*)t0)[4],t2);}
+f_6404(t3,((C_word*)t0)[4],t2);}
 
-/* map-loop551 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_fcall f_6424(C_word t0,C_word t1,C_word t2){
+/* map-loop552 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_fcall f_6427(C_word t0,C_word t1,C_word t2){
 C_word tmp;
 C_word t3;
 C_word t4;
 C_word t5;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(6,0,3)))){
-C_save_and_reclaim_args((void *)trf_6424,3,t0,t1,t2);}
+C_save_and_reclaim_args((void *)trf_6427,3,t0,t1,t2);}
 a=C_alloc(6);
 if(C_truep(C_i_pairp(t2))){
-t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_6449,a[2]=((C_word*)t0)[2],a[3]=t2,a[4]=((C_word*)t0)[3],a[5]=t1,tmp=(C_word)a,a+=6,tmp);
+t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_6452,a[2]=((C_word*)t0)[2],a[3]=t2,a[4]=((C_word*)t0)[3],a[5]=t1,tmp=(C_word)a,a+=6,tmp);
 t4=C_slot(t2,C_fix(0));
-/* c-platform.scm:120: chicken.base#symbol-append */
+/* c-platform.scm:121: chicken.base#symbol-append */
 t5=*((C_word*)lf[935]+1);{
 C_word av2[4];
 av2[0]=t5;
@@ -21178,8 +21178,8 @@ av2[0]=t3;
 av2[1]=C_slot(((C_word*)t0)[4],C_fix(1));
 ((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}
 
-/* k6447 in map-loop551 in k2974 in k2971 in k2968 in k2961 in k1680 in k1677 in k1674 in k1671 in k1668 in k1665 in k1662 */
-static void C_ccall f_6449(C_word c,C_word *av){
+/* k6450 in map-loop552 in k2977 in k2974 in k2971 in k2963 in k1682 in k1679 in k1676 in k1673 in k1670 in k1667 in k1664 */
+static void C_ccall f_6452(C_word c,C_word *av){
 C_word tmp;
 C_word t0=av[0];
 C_word t1=av[1];
@@ -21190,14 +21190,14 @@ C_word t5;
 C_word t6;
 C_word *a;
 if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
-C_save_and_reclaim((void *)f_6449,2,av);}
+C_save_and_reclaim((void *)f_6452,2,av);}
 a=C_alloc(3);
 t2=C_a_i_cons(&a,2,t1,C_SCHEME_END_OF_LIST);
 t3=C_i_setslot(((C_word*)((C_word*)t0)[2])[1],C_fix(1),t2);
 t4=C_mutate(((C_word *)((C_word*)t0)[2])+1,t2);
 t5=C_slot(((C_word*)t0)[3],C_fix(1));
 t6=((C_word*)((C_word*)t0)[4])[1];
-f_6424(t6,((C_word*)t0)[5],t5);}
+f_6427(t6,((C_word*)t0)[5],t5);}
 
 /* toplevel */
 static C_TLS int toplevel_initialized=0;
@@ -22394,7 +22394,7 @@ lf[941]=C_h_intern(&lf[941],45, C_text("
 lf[942]=C_decode_literal(C_heaptop,C_text("\376B\000\000\005C_eqp"));
 lf[943]=C_h_intern(&lf[943],54, C_text("chicken.compiler.optimizer#default-optimization-passes"));
 C_register_lf2(lf,944,create_ptable());{}
-t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1664,a[2]=t1,tmp=(C_word)a,a+=3,tmp);{
+t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1666,a[2]=t1,tmp=(C_word)a,a+=3,tmp);{
 C_word *av2=av;
 av2[0]=C_SCHEME_UNDEFINED;
 av2[1]=t2;
@@ -22402,106 +22402,105 @@ C_library_toplevel(2,av2);}}
 
 #ifdef C_ENABLE_PTABLES
 static C_PTABLE_ENTRY ptable[673] = {
-{C_text("f_1664:c_2dplatform_2escm"),(void*)f_1664},
-{C_text("f_1667:c_2dplatform_2escm"),(void*)f_1667},
-{C_text("f_1670:c_2dplatform_2escm"),(void*)f_1670},
-{C_text("f_1673:c_2dplatform_2escm"),(void*)f_1673},
-{C_text("f_1676:c_2dplatform_2escm"),(void*)f_1676},
-{C_text("f_1679:c_2dplatform_2escm"),(void*)f_1679},
-{C_text("f_1682:c_2dplatform_2escm"),(void*)f_1682},
-{C_text("f_2117:c_2dplatform_2escm"),(void*)f_2117},
-{C_text("f_2123:c_2dplatform_2escm"),(void*)f_2123},
-{C_text("f_2137:c_2dplatform_2escm"),(void*)f_2137},
-{C_text("f_2293:c_2dplatform_2escm"),(void*)f_2293},
-{C_text("f_2302:c_2dplatform_2escm"),(void*)f_2302},
-{C_text("f_2310:c_2dplatform_2escm"),(void*)f_2310},
-{C_text("f_2317:c_2dplatform_2escm"),(void*)f_2317},
-{C_text("f_2331:c_2dplatform_2escm"),(void*)f_2331},
-{C_text("f_2459:c_2dplatform_2escm"),(void*)f_2459},
-{C_text("f_2701:c_2dplatform_2escm"),(void*)f_2701},
-{C_text("f_2715:c_2dplatform_2escm"),(void*)f_2715},
-{C_text("f_2719:c_2dplatform_2escm"),(void*)f_2719},
-{C_text("f_2963:c_2dplatform_2escm"),(void*)f_2963},
-{C_text("f_2970:c_2dplatform_2escm"),(void*)f_2970},
+{C_text("f_1666:c_2dplatform_2escm"),(void*)f_1666},
+{C_text("f_1669:c_2dplatform_2escm"),(void*)f_1669},
+{C_text("f_1672:c_2dplatform_2escm"),(void*)f_1672},
+{C_text("f_1675:c_2dplatform_2escm"),(void*)f_1675},
+{C_text("f_1678:c_2dplatform_2escm"),(void*)f_1678},
+{C_text("f_1681:c_2dplatform_2escm"),(void*)f_1681},
+{C_text("f_1684:c_2dplatform_2escm"),(void*)f_1684},
+{C_text("f_2119:c_2dplatform_2escm"),(void*)f_2119},
+{C_text("f_2125:c_2dplatform_2escm"),(void*)f_2125},
+{C_text("f_2139:c_2dplatform_2escm"),(void*)f_2139},
+{C_text("f_2295:c_2dplatform_2escm"),(void*)f_2295},
+{C_text("f_2304:c_2dplatform_2escm"),(void*)f_2304},
+{C_text("f_2312:c_2dplatform_2escm"),(void*)f_2312},
+{C_text("f_2319:c_2dplatform_2escm"),(void*)f_2319},
+{C_text("f_2333:c_2dplatform_2escm"),(void*)f_2333},
+{C_text("f_2461:c_2dplatform_2escm"),(void*)f_2461},
+{C_text("f_2703:c_2dplatform_2escm"),(void*)f_2703},
+{C_text("f_2717:c_2dplatform_2escm"),(void*)f_2717},
+{C_text("f_2721:c_2dplatform_2escm"),(void*)f_2721},
+{C_text("f_2965:c_2dplatform_2escm"),(void*)f_2965},
 {C_text("f_2973:c_2dplatform_2escm"),(void*)f_2973},
 {C_text("f_2976:c_2dplatform_2escm"),(void*)f_2976},
-{C_text("f_2991:c_2dplatform_2escm"),(void*)f_2991},
-{C_text("f_2998:c_2dplatform_2escm"),(void*)f_2998},
-{C_text("f_3007:c_2dplatform_2escm"),(void*)f_3007},
-{C_text("f_3009:c_2dplatform_2escm"),(void*)f_3009},
-{C_text("f_3011:c_2dplatform_2escm"),(void*)f_3011},
-{C_text("f_3033:c_2dplatform_2escm"),(void*)f_3033},
-{C_text("f_3066:c_2dplatform_2escm"),(void*)f_3066},
-{C_text("f_3074:c_2dplatform_2escm"),(void*)f_3074},
+{C_text("f_2979:c_2dplatform_2escm"),(void*)f_2979},
+{C_text("f_2994:c_2dplatform_2escm"),(void*)f_2994},
+{C_text("f_3001:c_2dplatform_2escm"),(void*)f_3001},
+{C_text("f_3010:c_2dplatform_2escm"),(void*)f_3010},
+{C_text("f_3012:c_2dplatform_2escm"),(void*)f_3012},
+{C_text("f_3014:c_2dplatform_2escm"),(void*)f_3014},
+{C_text("f_3036:c_2dplatform_2escm"),(void*)f_3036},
+{C_text("f_3069:c_2dplatform_2escm"),(void*)f_3069},
 {C_text("f_3077:c_2dplatform_2escm"),(void*)f_3077},
-{C_text("f_3079:c_2dplatform_2escm"),(void*)f_3079},
-{C_text("f_3095:c_2dplatform_2escm"),(void*)f_3095},
-{C_text("f_3104:c_2dplatform_2escm"),(void*)f_3104},
+{C_text("f_3080:c_2dplatform_2escm"),(void*)f_3080},
+{C_text("f_3082:c_2dplatform_2escm"),(void*)f_3082},
+{C_text("f_3098:c_2dplatform_2escm"),(void*)f_3098},
 {C_text("f_3107:c_2dplatform_2escm"),(void*)f_3107},
-{C_text("f_3122:c_2dplatform_2escm"),(void*)f_3122},
-{C_text("f_3134:c_2dplatform_2escm"),(void*)f_3134},
-{C_text("f_3148:c_2dplatform_2escm"),(void*)f_3148},
-{C_text("f_3152:c_2dplatform_2escm"),(void*)f_3152},
-{C_text("f_3161:c_2dplatform_2escm"),(void*)f_3161},
-{C_text("f_3175:c_2dplatform_2escm"),(void*)f_3175},
-{C_text("f_3179:c_2dplatform_2escm"),(void*)f_3179},
-{C_text("f_3209:c_2dplatform_2escm"),(void*)f_3209},
-{C_text("f_3213:c_2dplatform_2escm"),(void*)f_3213},
-{C_text("f_3217:c_2dplatform_2escm"),(void*)f_3217},
-{C_text("f_3221:c_2dplatform_2escm"),(void*)f_3221},
-{C_text("f_3225:c_2dplatform_2escm"),(void*)f_3225},
-{C_text("f_3233:c_2dplatform_2escm"),(void*)f_3233},
+{C_text("f_3110:c_2dplatform_2escm"),(void*)f_3110},
+{C_text("f_3125:c_2dplatform_2escm"),(void*)f_3125},
+{C_text("f_3137:c_2dplatform_2escm"),(void*)f_3137},
+{C_text("f_3151:c_2dplatform_2escm"),(void*)f_3151},
+{C_text("f_3155:c_2dplatform_2escm"),(void*)f_3155},
+{C_text("f_3164:c_2dplatform_2escm"),(void*)f_3164},
+{C_text("f_3178:c_2dplatform_2escm"),(void*)f_3178},
+{C_text("f_3182:c_2dplatform_2escm"),(void*)f_3182},
+{C_text("f_3212:c_2dplatform_2escm"),(void*)f_3212},
+{C_text("f_3216:c_2dplatform_2escm"),(void*)f_3216},
+{C_text("f_3220:c_2dplatform_2escm"),(void*)f_3220},
+{C_text("f_3224:c_2dplatform_2escm"),(void*)f_3224},
+{C_text("f_3228:c_2dplatform_2escm"),(void*)f_3228},
 {C_text("f_3236:c_2dplatform_2escm"),(void*)f_3236},
 {C_text("f_3239:c_2dplatform_2escm"),(void*)f_3239},
-{C_text("f_3241:c_2dplatform_2escm"),(void*)f_3241},
-{C_text("f_3269:c_2dplatform_2escm"),(void*)f_3269},
-{C_text("f_3277:c_2dplatform_2escm"),(void*)f_3277},
-{C_text("f_3294:c_2dplatform_2escm"),(void*)f_3294},
-{C_text("f_3296:c_2dplatform_2escm"),(void*)f_3296},
-{C_text("f_3321:c_2dplatform_2escm"),(void*)f_3321},
-{C_text("f_3332:c_2dplatform_2escm"),(void*)f_3332},
-{C_text("f_3336:c_2dplatform_2escm"),(void*)f_3336},
+{C_text("f_3242:c_2dplatform_2escm"),(void*)f_3242},
+{C_text("f_3244:c_2dplatform_2escm"),(void*)f_3244},
+{C_text("f_3272:c_2dplatform_2escm"),(void*)f_3272},
+{C_text("f_3280:c_2dplatform_2escm"),(void*)f_3280},
+{C_text("f_3297:c_2dplatform_2escm"),(void*)f_3297},
+{C_text("f_3299:c_2dplatform_2escm"),(void*)f_3299},
+{C_text("f_3324:c_2dplatform_2escm"),(void*)f_3324},
+{C_text("f_3335:c_2dplatform_2escm"),(void*)f_3335},
 {C_text("f_3339:c_2dplatform_2escm"),(void*)f_3339},
-{C_text("f_3353:c_2dplatform_2escm"),(void*)f_3353},
-{C_text("f_3357:c_2dplatform_2escm"),(void*)f_3357},
-{C_text("f_3380:c_2dplatform_2escm"),(void*)f_3380},
-{C_text("f_3395:c_2dplatform_2escm"),(void*)f_3395},
-{C_text("f_3403:c_2dplatform_2escm"),(void*)f_3403},
-{C_text("f_3412:c_2dplatform_2escm"),(void*)f_3412},
-{C_text("f_3416:c_2dplatform_2escm"),(void*)f_3416},
+{C_text("f_3342:c_2dplatform_2escm"),(void*)f_3342},
+{C_text("f_3356:c_2dplatform_2escm"),(void*)f_3356},
+{C_text("f_3360:c_2dplatform_2escm"),(void*)f_3360},
+{C_text("f_3383:c_2dplatform_2escm"),(void*)f_3383},
+{C_text("f_3398:c_2dplatform_2escm"),(void*)f_3398},
+{C_text("f_3406:c_2dplatform_2escm"),(void*)f_3406},
+{C_text("f_3415:c_2dplatform_2escm"),(void*)f_3415},
 {C_text("f_3419:c_2dplatform_2escm"),(void*)f_3419},
 {C_text("f_3422:c_2dplatform_2escm"),(void*)f_3422},
-{C_text("f_3424:c_2dplatform_2escm"),(void*)f_3424},
-{C_text("f_3430:c_2dplatform_2escm"),(void*)f_3430},
-{C_text("f_3442:c_2dplatform_2escm"),(void*)f_3442},
-{C_text("f_3461:c_2dplatform_2escm"),(void*)f_3461},
-{C_text("f_3492:c_2dplatform_2escm"),(void*)f_3492},
+{C_text("f_3425:c_2dplatform_2escm"),(void*)f_3425},
+{C_text("f_3427:c_2dplatform_2escm"),(void*)f_3427},
+{C_text("f_3433:c_2dplatform_2escm"),(void*)f_3433},
+{C_text("f_3445:c_2dplatform_2escm"),(void*)f_3445},
+{C_text("f_3464:c_2dplatform_2escm"),(void*)f_3464},
 {C_text("f_3495:c_2dplatform_2escm"),(void*)f_3495},
 {C_text("f_3498:c_2dplatform_2escm"),(void*)f_3498},
 {C_text("f_3501:c_2dplatform_2escm"),(void*)f_3501},
 {C_text("f_3504:c_2dplatform_2escm"),(void*)f_3504},
 {C_text("f_3507:c_2dplatform_2escm"),(void*)f_3507},
-{C_text("f_3508:c_2dplatform_2escm"),(void*)f_3508},
-{C_text("f_3534:c_2dplatform_2escm"),(void*)f_3534},
+{C_text("f_3510:c_2dplatform_2escm"),(void*)f_3510},
+{C_text("f_3511:c_2dplatform_2escm"),(void*)f_3511},
 {C_text("f_3537:c_2dplatform_2escm"),(void*)f_3537},
-{C_text("f_3539:c_2dplatform_2escm"),(void*)f_3539},
-{C_text("f_3573:c_2dplatform_2escm"),(void*)f_3573},
-{C_text("f_3600:c_2dplatform_2escm"),(void*)f_3600},
+{C_text("f_3540:c_2dplatform_2escm"),(void*)f_3540},
+{C_text("f_3542:c_2dplatform_2escm"),(void*)f_3542},
+{C_text("f_3576:c_2dplatform_2escm"),(void*)f_3576},
 {C_text("f_3603:c_2dplatform_2escm"),(void*)f_3603},
 {C_text("f_3606:c_2dplatform_2escm"),(void*)f_3606},
-{C_text("f_3621:c_2dplatform_2escm"),(void*)f_3621},
-{C_text("f_3625:c_2dplatform_2escm"),(void*)f_3625},
-{C_text("f_3637:c_2dplatform_2escm"),(void*)f_3637},
-{C_text("f_3649:c_2dplatform_2escm"),(void*)f_3649},
-{C_text("f_3661:c_2dplatform_2escm"),(void*)f_3661},
-{C_text("f_3665:c_2dplatform_2escm"),(void*)f_3665},
-{C_text("f_3673:c_2dplatform_2escm"),(void*)f_3673},
-{C_text("f_3680:c_2dplatform_2escm"),(void*)f_3680},
-{C_text("f_3684:c_2dplatform_2escm"),(void*)f_3684},
-{C_text("f_3688:c_2dplatform_2escm"),(void*)f_3688},
-{C_text("f_3692:c_2dplatform_2escm"),(void*)f_3692},
-{C_text("f_3696:c_2dplatform_2escm"),(void*)f_3696},
-{C_text("f_3704:c_2dplatform_2escm"),(void*)f_3704},
+{C_text("f_3609:c_2dplatform_2escm"),(void*)f_3609},
+{C_text("f_3624:c_2dplatform_2escm"),(void*)f_3624},
+{C_text("f_3628:c_2dplatform_2escm"),(void*)f_3628},
+{C_text("f_3640:c_2dplatform_2escm"),(void*)f_3640},
+{C_text("f_3652:c_2dplatform_2escm"),(void*)f_3652},
+{C_text("f_3664:c_2dplatform_2escm"),(void*)f_3664},
+{C_text("f_3668:c_2dplatform_2escm"),(void*)f_3668},
+{C_text("f_3676:c_2dplatform_2escm"),(void*)f_3676},
+{C_text("f_3683:c_2dplatform_2escm"),(void*)f_3683},
+{C_text("f_3687:c_2dplatform_2escm"),(void*)f_3687},
+{C_text("f_3691:c_2dplatform_2escm"),(void*)f_3691},
+{C_text("f_3695:c_2dplatform_2escm"),(void*)f_3695},
+{C_text("f_3699:c_2dplatform_2escm"),(void*)f_3699},
 {C_text("f_3707:c_2dplatform_2escm"),(void*)f_3707},
 {C_text("f_3710:c_2dplatform_2escm"),(void*)f_3710},
 {C_text("f_3713:c_2dplatform_2escm"),(void*)f_3713},
@@ -22748,18 +22747,18 @@ static C_PTABLE_ENTRY ptable[673] = {
 {C_text("f_4436:c_2dplatform_2escm"),(void*)f_4436},
 {C_text("f_4439:c_2dplatform_2escm"),(void*)f_4439},
 {C_text("f_4442:c_2dplatform_2escm"),(void*)f_4442},
-{C_text("f_4444:c_2dplatform_2escm"),(void*)f_4444},
-{C_text("f_4481:c_2dplatform_2escm"),(void*)f_4481},
-{C_text("f_4483:c_2dplatform_2escm"),(void*)f_4483},
-{C_text("f_4490:c_2dplatform_2escm"),(void*)f_4490},
-{C_text("f_4501:c_2dplatform_2escm"),(void*)f_4501},
-{C_text("f_4522:c_2dplatform_2escm"),(void*)f_4522},
-{C_text("f_4526:c_2dplatform_2escm"),(void*)f_4526},
-{C_text("f_4539:c_2dplatform_2escm"),(void*)f_4539},
-{C_text("f_4541:c_2dplatform_2escm"),(void*)f_4541},
-{C_text("f_4563:c_2dplatform_2escm"),(void*)f_4563},
-{C_text("f_4567:c_2dplatform_2escm"),(void*)f_4567},
-{C_text("f_4577:c_2dplatform_2escm"),(void*)f_4577},
+{C_text("f_4445:c_2dplatform_2escm"),(void*)f_4445},
+{C_text("f_4447:c_2dplatform_2escm"),(void*)f_4447},
+{C_text("f_4484:c_2dplatform_2escm"),(void*)f_4484},
+{C_text("f_4486:c_2dplatform_2escm"),(void*)f_4486},
+{C_text("f_4493:c_2dplatform_2escm"),(void*)f_4493},
+{C_text("f_4504:c_2dplatform_2escm"),(void*)f_4504},
+{C_text("f_4525:c_2dplatform_2escm"),(void*)f_4525},
+{C_text("f_4529:c_2dplatform_2escm"),(void*)f_4529},
+{C_text("f_4542:c_2dplatform_2escm"),(void*)f_4542},
+{C_text("f_4544:c_2dplatform_2escm"),(void*)f_4544},
+{C_text("f_4566:c_2dplatform_2escm"),(void*)f_4566},
+{C_text("f_4570:c_2dplatform_2escm"),(void*)f_4570},
 {C_text("f_4580:c_2dplatform_2escm"),(void*)f_4580},
 {C_text("f_4583:c_2dplatform_2escm"),(void*)f_4583},
 {C_text("f_4586:c_2dplatform_2escm"),(void*)f_4586},
@@ -22950,32 +22949,32 @@ static C_PTABLE_ENTRY ptable[673] = {
 {C_text("f_5141:c_2dplatform_2escm"),(void*)f_5141},
 {C_text("f_5144:c_2dplatform_2escm"),(void*)f_5144},
 {C_text("f_5147:c_2dplatform_2escm"),(void*)f_5147},
-{C_text("f_5149:c_2dplatform_2escm"),(void*)f_5149},
-{C_text("f_5171:c_2dplatform_2escm"),(void*)f_5171},
-{C_text("f_5186:c_2dplatform_2escm"),(void*)f_5186},
+{C_text("f_5150:c_2dplatform_2escm"),(void*)f_5150},
+{C_text("f_5152:c_2dplatform_2escm"),(void*)f_5152},
+{C_text("f_5174:c_2dplatform_2escm"),(void*)f_5174},
 {C_text("f_5189:c_2dplatform_2escm"),(void*)f_5189},
-{C_text("f_5204:c_2dplatform_2escm"),(void*)f_5204},
-{C_text("f_5216:c_2dplatform_2escm"),(void*)f_5216},
-{C_text("f_5224:c_2dplatform_2escm"),(void*)f_5224},
-{C_text("f_5226:c_2dplatform_2escm"),(void*)f_5226},
-{C_text("f_5247:c_2dplatform_2escm"),(void*)f_5247},
-{C_text("f_5251:c_2dplatform_2escm"),(void*)f_5251},
+{C_text("f_5192:c_2dplatform_2escm"),(void*)f_5192},
+{C_text("f_5207:c_2dplatform_2escm"),(void*)f_5207},
+{C_text("f_5219:c_2dplatform_2escm"),(void*)f_5219},
+{C_text("f_5227:c_2dplatform_2escm"),(void*)f_5227},
+{C_text("f_5229:c_2dplatform_2escm"),(void*)f_5229},
+{C_text("f_5250:c_2dplatform_2escm"),(void*)f_5250},
 {C_text("f_5254:c_2dplatform_2escm"),(void*)f_5254},
 {C_text("f_5257:c_2dplatform_2escm"),(void*)f_5257},
-{C_text("f_5259:c_2dplatform_2escm"),(void*)f_5259},
-{C_text("f_5278:c_2dplatform_2escm"),(void*)f_5278},
-{C_text("f_5295:c_2dplatform_2escm"),(void*)f_5295},
-{C_text("f_5338:c_2dplatform_2escm"),(void*)f_5338},
-{C_text("f_5342:c_2dplatform_2escm"),(void*)f_5342},
-{C_text("f_5346:c_2dplatform_2escm"),(void*)f_5346},
-{C_text("f_5350:c_2dplatform_2escm"),(void*)f_5350},
-{C_text("f_5357:c_2dplatform_2escm"),(void*)f_5357},
-{C_text("f_5361:c_2dplatform_2escm"),(void*)f_5361},
-{C_text("f_5369:c_2dplatform_2escm"),(void*)f_5369},
-{C_text("f_5373:c_2dplatform_2escm"),(void*)f_5373},
-{C_text("f_5381:c_2dplatform_2escm"),(void*)f_5381},
+{C_text("f_5260:c_2dplatform_2escm"),(void*)f_5260},
+{C_text("f_5262:c_2dplatform_2escm"),(void*)f_5262},
+{C_text("f_5281:c_2dplatform_2escm"),(void*)f_5281},
+{C_text("f_5298:c_2dplatform_2escm"),(void*)f_5298},
+{C_text("f_5341:c_2dplatform_2escm"),(void*)f_5341},
+{C_text("f_5345:c_2dplatform_2escm"),(void*)f_5345},
+{C_text("f_5349:c_2dplatform_2escm"),(void*)f_5349},
+{C_text("f_5353:c_2dplatform_2escm"),(void*)f_5353},
+{C_text("f_5360:c_2dplatform_2escm"),(void*)f_5360},
+{C_text("f_5364:c_2dplatform_2escm"),(void*)f_5364},
+{C_text("f_5372:c_2dplatform_2escm"),(void*)f_5372},
+{C_text("f_5376:c_2dplatform_2escm"),(void*)f_5376},
 {C_text("f_5384:c_2dplatform_2escm"),(void*)f_5384},
-{C_text("f_5388:c_2dplatform_2escm"),(void*)f_5388},
+{C_text("f_5387:c_2dplatform_2escm"),(void*)f_5387},
 {C_text("f_5391:c_2dplatform_2escm"),(void*)f_5391},
 {C_text("f_5394:c_2dplatform_2escm"),(void*)f_5394},
 {C_text("f_5397:c_2dplatform_2escm"),(void*)f_5397},
@@ -22991,88 +22990,89 @@ static C_PTABLE_ENTRY ptable[673] = {
 {C_text("f_5427:c_2dplatform_2escm"),(void*)f_5427},
 {C_text("f_5430:c_2dplatform_2escm"),(void*)f_5430},
 {C_text("f_5433:c_2dplatform_2escm"),(void*)f_5433},
-{C_text("f_5435:c_2dplatform_2escm"),(void*)f_5435},
-{C_text("f_5457:c_2dplatform_2escm"),(void*)f_5457},
-{C_text("f_5475:c_2dplatform_2escm"),(void*)f_5475},
-{C_text("f_5497:c_2dplatform_2escm"),(void*)f_5497},
-{C_text("f_5515:c_2dplatform_2escm"),(void*)f_5515},
-{C_text("f_5540:c_2dplatform_2escm"),(void*)f_5540},
-{C_text("f_5561:c_2dplatform_2escm"),(void*)f_5561},
-{C_text("f_5569:c_2dplatform_2escm"),(void*)f_5569},
-{C_text("f_5573:c_2dplatform_2escm"),(void*)f_5573},
-{C_text("f_5580:c_2dplatform_2escm"),(void*)f_5580},
-{C_text("f_5608:c_2dplatform_2escm"),(void*)f_5608},
+{C_text("f_5436:c_2dplatform_2escm"),(void*)f_5436},
+{C_text("f_5438:c_2dplatform_2escm"),(void*)f_5438},
+{C_text("f_5460:c_2dplatform_2escm"),(void*)f_5460},
+{C_text("f_5478:c_2dplatform_2escm"),(void*)f_5478},
+{C_text("f_5500:c_2dplatform_2escm"),(void*)f_5500},
+{C_text("f_5518:c_2dplatform_2escm"),(void*)f_5518},
+{C_text("f_5543:c_2dplatform_2escm"),(void*)f_5543},
+{C_text("f_5564:c_2dplatform_2escm"),(void*)f_5564},
+{C_text("f_5572:c_2dplatform_2escm"),(void*)f_5572},
+{C_text("f_5576:c_2dplatform_2escm"),(void*)f_5576},
+{C_text("f_5583:c_2dplatform_2escm"),(void*)f_5583},
 {C_text("f_5611:c_2dplatform_2escm"),(void*)f_5611},
-{C_text("f_5642:c_2dplatform_2escm"),(void*)f_5642},
-{C_text("f_5664:c_2dplatform_2escm"),(void*)f_5664},
-{C_text("f_5687:c_2dplatform_2escm"),(void*)f_5687},
-{C_text("f_5691:c_2dplatform_2escm"),(void*)f_5691},
-{C_text("f_5695:c_2dplatform_2escm"),(void*)f_5695},
-{C_text("f_5702:c_2dplatform_2escm"),(void*)f_5702},
-{C_text("f_5724:c_2dplatform_2escm"),(void*)f_5724},
-{C_text("f_5734:c_2dplatform_2escm"),(void*)f_5734},
-{C_text("f_5748:c_2dplatform_2escm"),(void*)f_5748},
-{C_text("f_5752:c_2dplatform_2escm"),(void*)f_5752},
-{C_text("f_5759:c_2dplatform_2escm"),(void*)f_5759},
-{C_text("f_5790:c_2dplatform_2escm"),(void*)f_5790},
+{C_text("f_5614:c_2dplatform_2escm"),(void*)f_5614},
+{C_text("f_5645:c_2dplatform_2escm"),(void*)f_5645},
+{C_text("f_5667:c_2dplatform_2escm"),(void*)f_5667},
+{C_text("f_5690:c_2dplatform_2escm"),(void*)f_5690},
+{C_text("f_5694:c_2dplatform_2escm"),(void*)f_5694},
+{C_text("f_5698:c_2dplatform_2escm"),(void*)f_5698},
+{C_text("f_5705:c_2dplatform_2escm"),(void*)f_5705},
+{C_text("f_5727:c_2dplatform_2escm"),(void*)f_5727},
+{C_text("f_5737:c_2dplatform_2escm"),(void*)f_5737},
+{C_text("f_5751:c_2dplatform_2escm"),(void*)f_5751},
+{C_text("f_5755:c_2dplatform_2escm"),(void*)f_5755},
+{C_text("f_5762:c_2dplatform_2escm"),(void*)f_5762},
 {C_text("f_5793:c_2dplatform_2escm"),(void*)f_5793},
-{C_text("f_5808:c_2dplatform_2escm"),(void*)f_5808},
-{C_text("f_5825:c_2dplatform_2escm"),(void*)f_5825},
-{C_text("f_5829:c_2dplatform_2escm"),(void*)f_5829},
-{C_text("f_5836:c_2dplatform_2escm"),(void*)f_5836},
-{C_text("f_5846:c_2dplatform_2escm"),(void*)f_5846},
-{C_text("f_5867:c_2dplatform_2escm"),(void*)f_5867},
-{C_text("f_5895:c_2dplatform_2escm"),(void*)f_5895},
-{C_text("f_5897:c_2dplatform_2escm"),(void*)f_5897},
-{C_text("f_5920:c_2dplatform_2escm"),(void*)f_5920},
-{C_text("f_5922:c_2dplatform_2escm"),(void*)f_5922},
-{C_text("f_5941:c_2dplatform_2escm"),(void*)f_5941},
-{C_text("f_5945:c_2dplatform_2escm"),(void*)f_5945},
-{C_text("f_5960:c_2dplatform_2escm"),(void*)f_5960},
-{C_text("f_5970:c_2dplatform_2escm"),(void*)f_5970},
-{C_text("f_5991:c_2dplatform_2escm"),(void*)f_5991},
-{C_text("f_6019:c_2dplatform_2escm"),(void*)f_6019},
-{C_text("f_6021:c_2dplatform_2escm"),(void*)f_6021},
-{C_text("f_6044:c_2dplatform_2escm"),(void*)f_6044},
-{C_text("f_6046:c_2dplatform_2escm"),(void*)f_6046},
-{C_text("f_6065:c_2dplatform_2escm"),(void*)f_6065},
-{C_text("f_6069:c_2dplatform_2escm"),(void*)f_6069},
-{C_text("f_6084:c_2dplatform_2escm"),(void*)f_6084},
-{C_text("f_6088:c_2dplatform_2escm"),(void*)f_6088},
-{C_text("f_6109:c_2dplatform_2escm"),(void*)f_6109},
-{C_text("f_6151:c_2dplatform_2escm"),(void*)f_6151},
-{C_text("f_6153:c_2dplatform_2escm"),(void*)f_6153},
-{C_text("f_6160:c_2dplatform_2escm"),(void*)f_6160},
-{C_text("f_6171:c_2dplatform_2escm"),(void*)f_6171},
-{C_text("f_6192:c_2dplatform_2escm"),(void*)f_6192},
-{C_text("f_6196:c_2dplatform_2escm"),(void*)f_6196},
-{C_text("f_6202:c_2dplatform_2escm"),(void*)f_6202},
-{C_text("f_6224:c_2dplatform_2escm"),(void*)f_6224},
-{C_text("f_6228:c_2dplatform_2escm"),(void*)f_6228},
-{C_text("f_6230:c_2dplatform_2escm"),(void*)f_6230},
-{C_text("f_6246:c_2dplatform_2escm"),(void*)f_6246},
-{C_text("f_6252:c_2dplatform_2escm"),(void*)f_6252},
-{C_text("f_6270:c_2dplatform_2escm"),(void*)f_6270},
+{C_text("f_5796:c_2dplatform_2escm"),(void*)f_5796},
+{C_text("f_5811:c_2dplatform_2escm"),(void*)f_5811},
+{C_text("f_5828:c_2dplatform_2escm"),(void*)f_5828},
+{C_text("f_5832:c_2dplatform_2escm"),(void*)f_5832},
+{C_text("f_5839:c_2dplatform_2escm"),(void*)f_5839},
+{C_text("f_5849:c_2dplatform_2escm"),(void*)f_5849},
+{C_text("f_5870:c_2dplatform_2escm"),(void*)f_5870},
+{C_text("f_5898:c_2dplatform_2escm"),(void*)f_5898},
+{C_text("f_5900:c_2dplatform_2escm"),(void*)f_5900},
+{C_text("f_5923:c_2dplatform_2escm"),(void*)f_5923},
+{C_text("f_5925:c_2dplatform_2escm"),(void*)f_5925},
+{C_text("f_5944:c_2dplatform_2escm"),(void*)f_5944},
+{C_text("f_5948:c_2dplatform_2escm"),(void*)f_5948},
+{C_text("f_5963:c_2dplatform_2escm"),(void*)f_5963},
+{C_text("f_5973:c_2dplatform_2escm"),(void*)f_5973},
+{C_text("f_5994:c_2dplatform_2escm"),(void*)f_5994},
+{C_text("f_6022:c_2dplatform_2escm"),(void*)f_6022},
+{C_text("f_6024:c_2dplatform_2escm"),(void*)f_6024},
+{C_text("f_6047:c_2dplatform_2escm"),(void*)f_6047},
+{C_text("f_6049:c_2dplatform_2escm"),(void*)f_6049},
+{C_text("f_6068:c_2dplatform_2escm"),(void*)f_6068},
+{C_text("f_6072:c_2dplatform_2escm"),(void*)f_6072},
+{C_text("f_6087:c_2dplatform_2escm"),(void*)f_6087},
+{C_text("f_6091:c_2dplatform_2escm"),(void*)f_6091},
+{C_text("f_6112:c_2dplatform_2escm"),(void*)f_6112},
+{C_text("f_6154:c_2dplatform_2escm"),(void*)f_6154},
+{C_text("f_6156:c_2dplatform_2escm"),(void*)f_6156},
+{C_text("f_6163:c_2dplatform_2escm"),(void*)f_6163},
+{C_text("f_6174:c_2dplatform_2escm"),(void*)f_6174},
+{C_text("f_6195:c_2dplatform_2escm"),(void*)f_6195},
+{C_text("f_6199:c_2dplatform_2escm"),(void*)f_6199},
+{C_text("f_6205:c_2dplatform_2escm"),(void*)f_6205},
+{C_text("f_6227:c_2dplatform_2escm"),(void*)f_6227},
+{C_text("f_6231:c_2dplatform_2escm"),(void*)f_6231},
+{C_text("f_6233:c_2dplatform_2escm"),(void*)f_6233},
+{C_text("f_6249:c_2dplatform_2escm"),(void*)f_6249},
+{C_text("f_6255:c_2dplatform_2escm"),(void*)f_6255},
 {C_text("f_6273:c_2dplatform_2escm"),(void*)f_6273},
 {C_text("f_6276:c_2dplatform_2escm"),(void*)f_6276},
-{C_text("f_6291:c_2dplatform_2escm"),(void*)f_6291},
-{C_text("f_6303:c_2dplatform_2escm"),(void*)f_6303},
-{C_text("f_6313:c_2dplatform_2escm"),(void*)f_6313},
-{C_text("f_6317:c_2dplatform_2escm"),(void*)f_6317},
-{C_text("f_6326:c_2dplatform_2escm"),(void*)f_6326},
-{C_text("f_6336:c_2dplatform_2escm"),(void*)f_6336},
-{C_text("f_6340:c_2dplatform_2escm"),(void*)f_6340},
-{C_text("f_6370:c_2dplatform_2escm"),(void*)f_6370},
-{C_text("f_6374:c_2dplatform_2escm"),(void*)f_6374},
-{C_text("f_6378:c_2dplatform_2escm"),(void*)f_6378},
-{C_text("f_6382:c_2dplatform_2escm"),(void*)f_6382},
-{C_text("f_6386:c_2dplatform_2escm"),(void*)f_6386},
-{C_text("f_6395:c_2dplatform_2escm"),(void*)f_6395},
-{C_text("f_6399:c_2dplatform_2escm"),(void*)f_6399},
-{C_text("f_6401:c_2dplatform_2escm"),(void*)f_6401},
-{C_text("f_6411:c_2dplatform_2escm"),(void*)f_6411},
-{C_text("f_6424:c_2dplatform_2escm"),(void*)f_6424},
-{C_text("f_6449:c_2dplatform_2escm"),(void*)f_6449},
+{C_text("f_6279:c_2dplatform_2escm"),(void*)f_6279},
+{C_text("f_6294:c_2dplatform_2escm"),(void*)f_6294},
+{C_text("f_6306:c_2dplatform_2escm"),(void*)f_6306},
+{C_text("f_6316:c_2dplatform_2escm"),(void*)f_6316},
+{C_text("f_6320:c_2dplatform_2escm"),(void*)f_6320},
+{C_text("f_6329:c_2dplatform_2escm"),(void*)f_6329},
+{C_text("f_6339:c_2dplatform_2escm"),(void*)f_6339},
+{C_text("f_6343:c_2dplatform_2escm"),(void*)f_6343},
+{C_text("f_6373:c_2dplatform_2escm"),(void*)f_6373},
+{C_text("f_6377:c_2dplatform_2escm"),(void*)f_6377},
+{C_text("f_6381:c_2dplatform_2escm"),(void*)f_6381},
+{C_text("f_6385:c_2dplatform_2escm"),(void*)f_6385},
+{C_text("f_6389:c_2dplatform_2escm"),(void*)f_6389},
+{C_text("f_6398:c_2dplatform_2escm"),(void*)f_6398},
+{C_text("f_6402:c_2dplatform_2escm"),(void*)f_6402},
+{C_text("f_6404:c_2dplatform_2escm"),(void*)f_6404},
+{C_text("f_6414:c_2dplatform_2escm"),(void*)f_6414},
+{C_text("f_6427:c_2dplatform_2escm"),(void*)f_6427},
+{C_text("f_6452:c_2dplatform_2escm"),(void*)f_6452},
 {C_text("toplevel:c_2dplatform_2escm"),(void*)C_c_2dplatform_toplevel},
 {NULL,NULL}};
 #endif
@@ -23124,9 +23124,10 @@ o|hiding unexported module binding: chic
 o|hiding unexported module binding: chicken.compiler.c-platform#make-list 
 o|hiding unexported module binding: chicken.compiler.c-platform#posq 
 o|hiding unexported module binding: chicken.compiler.c-platform#posv 
-o|hiding unexported module binding: chicken.compiler.c-platform#constant577 
-o|hiding unexported module binding: chicken.compiler.c-platform#constant581 
-o|hiding unexported module binding: chicken.compiler.c-platform#constant585 
+o|hiding unexported module binding: chicken.compiler.c-platform#min-words-per-bignum 
+o|hiding unexported module binding: chicken.compiler.c-platform#constant578 
+o|hiding unexported module binding: chicken.compiler.c-platform#constant582 
+o|hiding unexported module binding: chicken.compiler.c-platform#constant586 
 o|hiding unexported module binding: chicken.compiler.c-platform#setter-map 
 S|applied compiler syntax:
 S|  scheme#for-each		1
@@ -23148,29 +23149,29 @@ o|  5 (##sys#check-list (or pair list) *
 o|  26 (scheme#cdr pair)
 o|  10 (scheme#car pair)
 (o e)|safe calls: 461 
-(o e)|assignments to immediate values: 1 
+(o e)|assignments to immediate values: 2 
 o|safe globals: (chicken.compiler.c-platform#posv chicken.compiler.c-platform#posq chicken.compiler.c-platform#make-list chicken.compiler.c-platform#iota chicken.compiler.c-platform#find-tail chicken.compiler.c-platform#find chicken.compiler.c-platform#length+ chicken.compiler.c-platform#lset=/eq? chicken.compiler.c-platform#lset<=/eq? chicken.compiler.c-platform#list-tabulate chicken.compiler.c-platform#lset-intersection/eq? chicken.compiler.c-platform#lset-union/eq? chicken.compiler.c-platform#lset-difference/eq? chicken.compiler.c-platform#lset-adjoin/eq? chicken.compiler.c-platform#list-index chicken.compiler.c-platform#last chicken.compiler.c-platform#unzip1 chicken.compiler.c-platform#remove chicken.compiler.c-platform#filter-map chicken.compiler.c-platform#filter chicken.compiler.c-platform#alist-cons chicken.compiler.c-platform#delete-duplicates chicken.compiler.c-platform#fifth chicken.compiler.c-platform#fourth chicken.compiler.c-platform#third chicken.compiler.c-platform#second chicken.compiler.c-platform#first chicken.compiler.c-platform#delete chicken.compiler.c-platform#concatenate chicken.compiler.c-platform#cons* chicken.compiler.c-platform#any chicken.compiler.c-platform#every chicken.compiler.c-platform#append-map chicken.compiler.c-platform#split-at chicken.compiler.c-platform#drop chicken.compiler.c-platform#take chicken.compiler.c-platform#span chicken.compiler.c-platform#partition) 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#partition 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#span 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#drop 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#split-at 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#append-map 
-o|inlining procedure: k2064 
-o|inlining procedure: k2064 
-o|inlining procedure: k2095 
-o|inlining procedure: k2095 
+o|inlining procedure: k2066 
+o|inlining procedure: k2066 
+o|inlining procedure: k2097 
+o|inlining procedure: k2097 
 o|merged explicitly consed rest parameter: xs203 
-o|inlining procedure: k2125 
-o|inlining procedure: k2125 
+o|inlining procedure: k2127 
+o|inlining procedure: k2127 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#concatenate 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#fourth 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#fifth 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#delete-duplicates 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#alist-cons 
-o|inlining procedure: k2312 
-o|inlining procedure: k2312 
-o|inlining procedure: k2304 
-o|inlining procedure: k2304 
+o|inlining procedure: k2314 
+o|inlining procedure: k2314 
+o|inlining procedure: k2306 
+o|inlining procedure: k2306 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#filter-map 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#remove 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#unzip1 
@@ -23179,8 +23180,8 @@ o|removed side-effect free assignment to
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#lset-difference/eq? 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#lset-union/eq? 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#lset-intersection/eq? 
-o|inlining procedure: k2703 
-o|inlining procedure: k2703 
+o|inlining procedure: k2705 
+o|inlining procedure: k2705 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#lset<=/eq? 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#lset=/eq? 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#length+ 
@@ -23190,300 +23191,305 @@ o|removed side-effect free assignment to
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#make-list 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#posq 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#posv 
-o|inlining procedure: k3013 
-o|inlining procedure: k3031 
-o|inlining procedure: k3045 
-o|inlining procedure: k3045 
-o|inlining procedure: k3031 
-o|inlining procedure: k3013 
-o|substituted constant variable: a3071 
-o|inlining procedure: k3081 
-o|inlining procedure: k3099 
-o|inlining procedure: k3099 
-o|inlining procedure: k3123 
-o|inlining procedure: "(c-platform.scm:331) chicken.compiler.c-platform#first" 
-o|inlining procedure: k3123 
-o|inlining procedure: k3162 
-o|inlining procedure: k3162 
-o|inlining procedure: "(c-platform.scm:328) chicken.compiler.c-platform#first" 
-o|inlining procedure: k3183 
-o|inlining procedure: k3183 
-o|inlining procedure: "(c-platform.scm:322) chicken.compiler.c-platform#second" 
-o|inlining procedure: "(c-platform.scm:321) chicken.compiler.c-platform#first" 
-o|inlining procedure: k3081 
-o|substituted constant variable: a3230 
-o|inlining procedure: k3243 
-o|consed rest parameter at call site: "(c-platform.scm:377) chicken.compiler.c-platform#cons*" 2 
-o|inlining procedure: k3298 
-o|inlining procedure: k3298 
-o|inlining procedure: "(c-platform.scm:379) chicken.compiler.c-platform#first" 
-o|inlining procedure: "(c-platform.scm:377) chicken.compiler.c-platform#first" 
-o|inlining procedure: k3340 
-o|inlining procedure: k3340 
-o|consed rest parameter at call site: "(c-platform.scm:392) chicken.compiler.c-platform#cons*" 2 
-o|inlining procedure: k3361 
-o|substituted constant variable: a3374 
-o|inlining procedure: k3375 
-o|inlining procedure: k3375 
-o|inlining procedure: k3361 
-o|substituted constant variable: a3404 
-o|contracted procedure: "(c-platform.scm:372) chicken.compiler.c-platform#last" 
-o|inlining procedure: k2461 
-o|inlining procedure: k2461 
-o|inlining procedure: k3243 
-o|inlining procedure: k3432 
-o|inlining procedure: k3459 
-o|inlining procedure: k3459 
-o|inlining procedure: "(c-platform.scm:407) chicken.compiler.c-platform#first" 
-o|inlining procedure: k3432 
-o|substituted constant variable: a3489 
-o|inlining procedure: k3510 
-o|inlining procedure: k3510 
-o|substituted constant variable: a3531 
-o|inlining procedure: k3541 
-o|inlining procedure: k3559 
-o|inlining procedure: k3574 
-o|inlining procedure: k3586 
-o|substituted constant variable: a3674 
-o|inlining procedure: k3586 
-o|inlining procedure: "(c-platform.scm:443) chicken.compiler.c-platform#third" 
-o|inlining procedure: k3574 
-o|inlining procedure: k3559 
-o|inlining procedure: k3541 
-o|substituted constant variable: a3697 
-o|inlining procedure: k4446 
-o|inlining procedure: k4461 
-o|inlining procedure: k4485 
-o|inlining procedure: k4485 
-o|inlining procedure: "(c-platform.scm:852) chicken.compiler.c-platform#first" 
-o|inlining procedure: k4461 
-o|substituted constant variable: a4531 
-o|inlining procedure: k4547 
-o|inlining procedure: "(c-platform.scm:843) chicken.compiler.c-platform#first" 
-o|inlining procedure: k4547 
-o|substituted constant variable: a4574 
-o|inlining procedure: k4446 
-o|inlining procedure: k5154 
-o|inlining procedure: k5175 
-o|inlining procedure: "(c-platform.scm:1153) chicken.compiler.c-platform#second" 
-o|inlining procedure: k5175 
-o|inlining procedure: "(c-platform.scm:1149) chicken.compiler.c-platform#first" 
-o|inlining procedure: "(c-platform.scm:1146) chicken.compiler.c-platform#first" 
-o|inlining procedure: k5154 
-o|inlining procedure: k5261 
-o|inlining procedure: k5279 
-o|inlining procedure: k5297 
-o|inlining procedure: k5312 
-o|inlining procedure: k5312 
-o|inlining procedure: "(c-platform.scm:1182) chicken.compiler.c-platform#second" 
-o|inlining procedure: k5297 
-o|inlining procedure: "(c-platform.scm:1177) chicken.compiler.c-platform#third" 
-o|inlining procedure: k5279 
-o|inlining procedure: "(c-platform.scm:1175) chicken.compiler.c-platform#first" 
-o|inlining procedure: "(c-platform.scm:1173) chicken.compiler.c-platform#first" 
-o|inlining procedure: k5261 
-o|substituted constant variable: a5374 
-o|inlining procedure: k5437 
-o|inlining procedure: k5463 
-o|inlining procedure: k5463 
-o|inlining procedure: k5437 
-o|substituted constant variable: a5469 
-o|inlining procedure: k5477 
-o|inlining procedure: k5503 
-o|inlining procedure: k5503 
-o|inlining procedure: k5477 
-o|substituted constant variable: a5509 
-o|inlining procedure: k5517 
-o|inlining procedure: k5535 
+o|inlining procedure: k3016 
+o|inlining procedure: k3034 
+o|inlining procedure: k3048 
+o|inlining procedure: k3048 
+o|inlining procedure: k3034 
+o|inlining procedure: k3016 
+o|substituted constant variable: a3074 
+o|inlining procedure: k3084 
+o|inlining procedure: k3102 
+o|inlining procedure: k3102 
+o|inlining procedure: k3126 
+o|inlining procedure: "(c-platform.scm:332) chicken.compiler.c-platform#first" 
+o|inlining procedure: k3126 
+o|inlining procedure: k3165 
+o|inlining procedure: k3165 
+o|inlining procedure: "(c-platform.scm:329) chicken.compiler.c-platform#first" 
+o|inlining procedure: k3186 
+o|inlining procedure: k3186 
+o|inlining procedure: "(c-platform.scm:323) chicken.compiler.c-platform#second" 
+o|inlining procedure: "(c-platform.scm:322) chicken.compiler.c-platform#first" 
+o|inlining procedure: k3084 
+o|substituted constant variable: a3233 
+o|inlining procedure: k3246 
+o|consed rest parameter at call site: "(c-platform.scm:378) chicken.compiler.c-platform#cons*" 2 
+o|inlining procedure: k3301 
+o|inlining procedure: k3301 
+o|inlining procedure: "(c-platform.scm:380) chicken.compiler.c-platform#first" 
+o|inlining procedure: "(c-platform.scm:378) chicken.compiler.c-platform#first" 
+o|inlining procedure: k3343 
+o|inlining procedure: k3343 
+o|consed rest parameter at call site: "(c-platform.scm:393) chicken.compiler.c-platform#cons*" 2 
+o|inlining procedure: k3364 
+o|substituted constant variable: a3377 
+o|inlining procedure: k3378 
+o|inlining procedure: k3378 
+o|inlining procedure: k3364 
+o|substituted constant variable: a3407 
+o|contracted procedure: "(c-platform.scm:373) chicken.compiler.c-platform#last" 
+o|inlining procedure: k2463 
+o|inlining procedure: k2463 
+o|inlining procedure: k3246 
+o|inlining procedure: k3435 
+o|inlining procedure: k3462 
+o|inlining procedure: k3462 
+o|inlining procedure: "(c-platform.scm:408) chicken.compiler.c-platform#first" 
+o|inlining procedure: k3435 
+o|substituted constant variable: a3492 
+o|inlining procedure: k3513 
+o|inlining procedure: k3513 
+o|substituted constant variable: a3534 
+o|inlining procedure: k3544 
+o|inlining procedure: k3562 
+o|inlining procedure: k3577 
+o|inlining procedure: k3589 
+o|substituted constant variable: a3677 
+o|inlining procedure: k3589 
+o|inlining procedure: "(c-platform.scm:444) chicken.compiler.c-platform#third" 
+o|inlining procedure: k3577 
+o|inlining procedure: k3562 
+o|inlining procedure: k3544 
+o|substituted constant variable: a3700 
+o|inlining procedure: k4449 
+o|inlining procedure: k4464 
+o|inlining procedure: k4488 
+o|inlining procedure: k4488 
+o|inlining procedure: "(c-platform.scm:853) chicken.compiler.c-platform#first" 
+o|inlining procedure: k4464 
+o|substituted constant variable: a4534 
+o|inlining procedure: k4550 
+o|inlining procedure: "(c-platform.scm:844) chicken.compiler.c-platform#first" 
+o|inlining procedure: k4550 
+o|substituted constant variable: a4577 
+o|inlining procedure: k4449 
+o|inlining procedure: k5157 
+o|inlining procedure: k5178 
+o|inlining procedure: "(c-platform.scm:1157) chicken.compiler.c-platform#second" 
+o|inlining procedure: k5178 
+o|inlining procedure: "(c-platform.scm:1153) chicken.compiler.c-platform#first" 
+o|inlining procedure: "(c-platform.scm:1150) chicken.compiler.c-platform#first" 
+o|inlining procedure: k5157 
+o|inlining procedure: k5264 
+o|inlining procedure: k5282 
+o|inlining procedure: k5300 
+o|inlining procedure: k5315 
+o|inlining procedure: k5315 
+o|inlining procedure: "(c-platform.scm:1186) chicken.compiler.c-platform#second" 
+o|inlining procedure: k5300 
+o|inlining procedure: "(c-platform.scm:1181) chicken.compiler.c-platform#third" 
+o|inlining procedure: k5282 
+o|inlining procedure: "(c-platform.scm:1179) chicken.compiler.c-platform#first" 
+o|inlining procedure: "(c-platform.scm:1177) chicken.compiler.c-platform#first" 
+o|inlining procedure: k5264 
+o|substituted constant variable: a5377 
+o|inlining procedure: k5440 
+o|inlining procedure: k5466 
+o|inlining procedure: k5466 
+o|inlining procedure: k5440 
+o|substituted constant variable: a5472 
+o|inlining procedure: k5480 
+o|inlining procedure: k5506 
+o|inlining procedure: k5506 
+o|inlining procedure: k5480 
+o|substituted constant variable: a5512 
+o|inlining procedure: k5520 
+o|inlining procedure: k5538 
 o|substituted constant variable: chicken.compiler.c-platform#setter-map 
-o|inlining procedure: k5535 
-o|inlining procedure: k5517 
-o|substituted constant variable: a5574 
-o|inlining procedure: k5582 
-o|inlining procedure: k5609 
-o|inlining procedure: k5609 
-o|inlining procedure: k5631 
-o|inlining procedure: k5643 
-o|inlining procedure: "(c-platform.scm:1029) chicken.compiler.c-platform#first" 
-o|inlining procedure: "(c-platform.scm:1032) chicken.compiler.c-platform#first" 
-o|inlining procedure: k5643 
-o|inlining procedure: "(c-platform.scm:1024) chicken.compiler.c-platform#first" 
-o|inlining procedure: k5631 
-o|inlining procedure: "(c-platform.scm:1018) chicken.compiler.c-platform#second" 
-o|inlining procedure: k5582 
-o|substituted constant variable: a5696 
-o|inlining procedure: k5704 
-o|inlining procedure: k5729 
-o|inlining procedure: k5729 
-o|inlining procedure: "(c-platform.scm:989) chicken.compiler.c-platform#first" 
-o|inlining procedure: "(c-platform.scm:987) chicken.compiler.c-platform#third" 
-o|inlining procedure: k5704 
-o|substituted constant variable: a5757 
-o|inlining procedure: k5761 
-o|inlining procedure: k5788 
-o|inlining procedure: "(c-platform.scm:874) chicken.compiler.c-platform#first" 
-o|inlining procedure: k5788 
-o|inlining procedure: "(c-platform.scm:871) chicken.compiler.c-platform#first" 
-o|inlining procedure: "(c-platform.scm:868) chicken.compiler.c-platform#second" 
-o|substituted constant variable: a5834 
-o|inlining procedure: k5761 
-o|inlining procedure: k5838 
-o|inlining procedure: k5838 
-o|inlining procedure: k5869 
-o|inlining procedure: k5869 
-o|inlining procedure: k5875 
-o|inlining procedure: k5875 
-o|substituted constant variable: a5914 
-o|inlining procedure: k5928 
-o|inlining procedure: "(c-platform.scm:817) chicken.compiler.c-platform#first" 
-o|inlining procedure: k5928 
-o|inlining procedure: k5962 
-o|inlining procedure: k5962 
-o|inlining procedure: k5993 
-o|inlining procedure: k5993 
-o|inlining procedure: k5999 
-o|inlining procedure: k5999 
-o|substituted constant variable: a6038 
-o|inlining procedure: k6052 
-o|inlining procedure: "(c-platform.scm:780) chicken.compiler.c-platform#first" 
-o|inlining procedure: k6052 
-o|inlining procedure: k6089 
-o|inlining procedure: k6089 
-o|inlining procedure: "(c-platform.scm:744) chicken.compiler.c-platform#first" 
-o|inlining procedure: k6131 
-o|inlining procedure: k6155 
-o|inlining procedure: k6155 
-o|inlining procedure: "(c-platform.scm:752) chicken.compiler.c-platform#first" 
-o|inlining procedure: k6131 
-o|inlining procedure: k6208 
-o|inlining procedure: "(c-platform.scm:740) chicken.compiler.c-platform#first" 
-o|inlining procedure: k6208 
-o|inlining procedure: k6232 
-o|inlining procedure: k6253 
-o|inlining procedure: k6253 
-o|inlining procedure: k6292 
-o|inlining procedure: "(c-platform.scm:356) chicken.compiler.c-platform#first" 
-o|inlining procedure: k6292 
-o|inlining procedure: k6327 
-o|inlining procedure: k6327 
-o|inlining procedure: "(c-platform.scm:353) chicken.compiler.c-platform#first" 
-o|inlining procedure: k6344 
-o|inlining procedure: k6344 
-o|inlining procedure: "(c-platform.scm:347) chicken.compiler.c-platform#second" 
-o|inlining procedure: "(c-platform.scm:346) chicken.compiler.c-platform#first" 
-o|inlining procedure: k6232 
-o|substituted constant variable: a6391 
-o|inlining procedure: k6403 
-o|contracted procedure: "(c-platform.scm:283) g590597" 
-o|propagated global variable: g605606 chicken.compiler.support#mark-variable 
-o|inlining procedure: k6403 
-o|substituted constant variable: chicken.compiler.c-platform#constant581 
-o|substituted constant variable: chicken.compiler.c-platform#constant577 
-o|substituted constant variable: chicken.compiler.c-platform#constant585 
-o|inlining procedure: k6426 
-o|contracted procedure: "(c-platform.scm:120) g557566" 
-o|inlining procedure: k6426 
+o|inlining procedure: k5538 
+o|inlining procedure: k5520 
+o|substituted constant variable: a5577 
+o|substituted constant variable: chicken.compiler.c-platform#min-words-per-bignum 
+o|substituted constant variable: chicken.compiler.c-platform#min-words-per-bignum 
+o|inlining procedure: k5585 
+o|inlining procedure: k5612 
+o|inlining procedure: k5612 
+o|inlining procedure: k5634 
+o|inlining procedure: k5646 
+o|inlining procedure: "(c-platform.scm:1033) chicken.compiler.c-platform#first" 
+o|inlining procedure: "(c-platform.scm:1036) chicken.compiler.c-platform#first" 
+o|inlining procedure: k5646 
+o|inlining procedure: "(c-platform.scm:1028) chicken.compiler.c-platform#first" 
+o|inlining procedure: k5634 
+o|inlining procedure: "(c-platform.scm:1022) chicken.compiler.c-platform#second" 
+o|inlining procedure: k5585 
+o|substituted constant variable: a5699 
+o|inlining procedure: k5707 
+o|inlining procedure: k5732 
+o|inlining procedure: k5732 
+o|inlining procedure: "(c-platform.scm:993) chicken.compiler.c-platform#first" 
+o|inlining procedure: "(c-platform.scm:991) chicken.compiler.c-platform#third" 
+o|inlining procedure: k5707 
+o|substituted constant variable: a5760 
+o|substituted constant variable: chicken.compiler.c-platform#min-words-per-bignum 
+o|substituted constant variable: chicken.compiler.c-platform#min-words-per-bignum 
+o|inlining procedure: k5764 
+o|inlining procedure: k5791 
+o|inlining procedure: "(c-platform.scm:875) chicken.compiler.c-platform#first" 
+o|inlining procedure: k5791 
+o|inlining procedure: "(c-platform.scm:872) chicken.compiler.c-platform#first" 
+o|inlining procedure: "(c-platform.scm:869) chicken.compiler.c-platform#second" 
+o|substituted constant variable: a5837 
+o|inlining procedure: k5764 
+o|inlining procedure: k5841 
+o|inlining procedure: k5841 
+o|inlining procedure: k5872 
+o|inlining procedure: k5872 
+o|inlining procedure: k5878 
+o|inlining procedure: k5878 
+o|substituted constant variable: a5917 
+o|inlining procedure: k5931 
+o|inlining procedure: "(c-platform.scm:818) chicken.compiler.c-platform#first" 
+o|inlining procedure: k5931 
+o|inlining procedure: k5965 
+o|inlining procedure: k5965 
+o|inlining procedure: k5996 
+o|inlining procedure: k5996 
+o|inlining procedure: k6002 
+o|inlining procedure: k6002 
+o|substituted constant variable: a6041 
+o|inlining procedure: k6055 
+o|inlining procedure: "(c-platform.scm:781) chicken.compiler.c-platform#first" 
+o|inlining procedure: k6055 
+o|inlining procedure: k6092 
+o|inlining procedure: k6092 
+o|inlining procedure: "(c-platform.scm:745) chicken.compiler.c-platform#first" 
+o|inlining procedure: k6134 
+o|inlining procedure: k6158 
+o|inlining procedure: k6158 
+o|inlining procedure: "(c-platform.scm:753) chicken.compiler.c-platform#first" 
+o|inlining procedure: k6134 
+o|inlining procedure: k6211 
+o|inlining procedure: "(c-platform.scm:741) chicken.compiler.c-platform#first" 
+o|inlining procedure: k6211 
+o|inlining procedure: k6235 
+o|inlining procedure: k6256 
+o|inlining procedure: k6256 
+o|inlining procedure: k6295 
+o|inlining procedure: "(c-platform.scm:357) chicken.compiler.c-platform#first" 
+o|inlining procedure: k6295 
+o|inlining procedure: k6330 
+o|inlining procedure: k6330 
+o|inlining procedure: "(c-platform.scm:354) chicken.compiler.c-platform#first" 
+o|inlining procedure: k6347 
+o|inlining procedure: k6347 
+o|inlining procedure: "(c-platform.scm:348) chicken.compiler.c-platform#second" 
+o|inlining procedure: "(c-platform.scm:347) chicken.compiler.c-platform#first" 
+o|inlining procedure: k6235 
+o|substituted constant variable: a6394 
+o|inlining procedure: k6406 
+o|contracted procedure: "(c-platform.scm:284) g591598" 
+o|propagated global variable: g606607 chicken.compiler.support#mark-variable 
+o|inlining procedure: k6406 
+o|substituted constant variable: chicken.compiler.c-platform#constant582 
+o|substituted constant variable: chicken.compiler.c-platform#constant578 
+o|substituted constant variable: chicken.compiler.c-platform#constant586 
+o|inlining procedure: k6429 
+o|contracted procedure: "(c-platform.scm:121) g558567" 
+o|inlining procedure: k6429 
 o|simplifications: ((if . 1)) 
 o|replaced variables: 448 
-o|removed binding forms: 574 
+o|removed binding forms: 575 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#every 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#any 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#first 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#second 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#third 
-o|substituted constant variable: r23056466 
-o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#constant577 
-o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#constant581 
-o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#constant585 
-o|substituted constant variable: r30146478 
-o|substituted constant variable: r31006481 
-o|substituted constant variable: r31246488 
-o|substituted constant variable: r31846497 
-o|substituted constant variable: r30826508 
-o|substituted constant variable: r33766526 
-o|substituted constant variable: r33626528 
-o|substituted constant variable: r32446531 
-o|substituted constant variable: r34336542 
-o|substituted constant variable: r35116544 
-o|substituted constant variable: r35876549 
-o|substituted constant variable: r35756555 
-o|substituted constant variable: r35606556 
-o|substituted constant variable: r35426557 
-o|substituted constant variable: r44626567 
-o|substituted constant variable: r45486575 
-o|substituted constant variable: r45486575 
+o|substituted constant variable: r23076469 
+o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#min-words-per-bignum 
+o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#constant578 
+o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#constant582 
+o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#constant586 
+o|substituted constant variable: r30176481 
+o|substituted constant variable: r31036484 
+o|substituted constant variable: r31276491 
+o|substituted constant variable: r31876500 
+o|substituted constant variable: r30856511 
+o|substituted constant variable: r33796529 
+o|substituted constant variable: r33656531 
+o|substituted constant variable: r32476534 
+o|substituted constant variable: r34366545 
+o|substituted constant variable: r35146547 
+o|substituted constant variable: r35906552 
+o|substituted constant variable: r35786558 
+o|substituted constant variable: r35636559 
+o|substituted constant variable: r35456560 
+o|substituted constant variable: r44656570 
+o|substituted constant variable: r45516578 
+o|substituted constant variable: r45516578 
 o|folded constant expression: (scheme#not (quote #f)) 
-o|substituted constant variable: r44476577 
-o|contracted procedure: "(c-platform.scm:1165) chicken.compiler.c-platform#list-tabulate" 
-o|substituted constant variable: r27046467 
-o|substituted constant variable: r51766585 
-o|substituted constant variable: r51556596 
-o|substituted constant variable: r53136601 
-o|substituted constant variable: r52986607 
-o|substituted constant variable: r52806613 
-o|substituted constant variable: r52626624 
+o|substituted constant variable: r44506580 
+o|contracted procedure: "(c-platform.scm:1169) chicken.compiler.c-platform#list-tabulate" 
+o|substituted constant variable: r27066470 
+o|substituted constant variable: r51796588 
+o|substituted constant variable: r51586599 
+o|substituted constant variable: r53166604 
+o|substituted constant variable: r53016610 
+o|substituted constant variable: r52836616 
+o|substituted constant variable: r52656627 
 o|removed side-effect free assignment to unused variable: chicken.compiler.c-platform#setter-map 
-o|substituted constant variable: r54646626 
-o|substituted constant variable: r54646626 
-o|substituted constant variable: r54646628 
-o|substituted constant variable: r54646628 
-o|substituted constant variable: r54386630 
-o|substituted constant variable: r55046632 
-o|substituted constant variable: r55046632 
-o|substituted constant variable: r55046634 
-o|substituted constant variable: r55046634 
-o|substituted constant variable: r54786636 
-o|substituted constant variable: r55366639 
-o|substituted constant variable: r55186640 
-o|converted assignments to bindings: (rewrite-call/cc895) 
-o|converted assignments to bindings: (rewrite-make-vector878) 
-o|substituted constant variable: r56446658 
-o|substituted constant variable: r56326664 
-o|substituted constant variable: r55836670 
-o|substituted constant variable: r57306672 
-o|substituted constant variable: r57306672 
-o|substituted constant variable: r57306674 
-o|substituted constant variable: r57306674 
-o|substituted constant variable: r57056686 
-o|substituted constant variable: r57626707 
-o|converted assignments to bindings: (rewrite-div826) 
-o|substituted constant variable: r58396708 
-o|substituted constant variable: r58706710 
-o|substituted constant variable: r58706710 
-o|substituted constant variable: r58706712 
-o|substituted constant variable: r58706712 
-o|substituted constant variable: r58766715 
-o|substituted constant variable: r59296723 
-o|substituted constant variable: r59296723 
+o|substituted constant variable: r54676629 
+o|substituted constant variable: r54676629 
+o|substituted constant variable: r54676631 
+o|substituted constant variable: r54676631 
+o|substituted constant variable: r54416633 
+o|substituted constant variable: r55076635 
+o|substituted constant variable: r55076635 
+o|substituted constant variable: r55076637 
+o|substituted constant variable: r55076637 
+o|substituted constant variable: r54816639 
+o|substituted constant variable: r55396642 
+o|substituted constant variable: r55216643 
+o|converted assignments to bindings: (rewrite-call/cc896) 
+o|converted assignments to bindings: (rewrite-make-vector879) 
+o|substituted constant variable: r56476661 
+o|substituted constant variable: r56356667 
+o|substituted constant variable: r55866673 
+o|substituted constant variable: r57336675 
+o|substituted constant variable: r57336675 
+o|substituted constant variable: r57336677 
+o|substituted constant variable: r57336677 
+o|substituted constant variable: r57086689 
+o|substituted constant variable: r57656710 
+o|converted assignments to bindings: (rewrite-div827) 
+o|substituted constant variable: r58426711 
+o|substituted constant variable: r58736713 
+o|substituted constant variable: r58736713 
+o|substituted constant variable: r58736715 
+o|substituted constant variable: r58736715 
+o|substituted constant variable: r58796718 
+o|substituted constant variable: r59326726 
+o|substituted constant variable: r59326726 
 o|folded constant expression: (scheme#not (quote #f)) 
-o|substituted constant variable: r59636725 
-o|substituted constant variable: r59946727 
-o|substituted constant variable: r59946727 
-o|substituted constant variable: r59946729 
-o|substituted constant variable: r59946729 
-o|substituted constant variable: r60006732 
-o|substituted constant variable: r60536740 
-o|substituted constant variable: r60536740 
+o|substituted constant variable: r59666728 
+o|substituted constant variable: r59976730 
+o|substituted constant variable: r59976730 
+o|substituted constant variable: r59976732 
+o|substituted constant variable: r59976732 
+o|substituted constant variable: r60036735 
+o|substituted constant variable: r60566743 
+o|substituted constant variable: r60566743 
 o|folded constant expression: (scheme#not (quote #f)) 
-o|substituted constant variable: r61326757 
-o|substituted constant variable: r62096765 
-o|substituted constant variable: r62096765 
+o|substituted constant variable: r61356760 
+o|substituted constant variable: r62126768 
+o|substituted constant variable: r62126768 
 o|folded constant expression: (scheme#not (quote #f)) 
-o|converted assignments to bindings: (rewrite-c-w-v756) 
-o|converted assignments to bindings: (rewrite-c..r727) 
-o|converted assignments to bindings: (rewrite-apply683) 
-o|substituted constant variable: r62936776 
-o|substituted constant variable: r63456785 
-o|substituted constant variable: r62336796 
-o|converted assignments to bindings: (eqv?-id623) 
-o|converted assignments to bindings: (op1612) 
-o|substituted constant variable: g596598 
-o|substituted constant variable: g563567 
+o|converted assignments to bindings: (rewrite-c-w-v757) 
+o|converted assignments to bindings: (rewrite-c..r728) 
+o|converted assignments to bindings: (rewrite-apply684) 
+o|substituted constant variable: r62966779 
+o|substituted constant variable: r63486788 
+o|substituted constant variable: r62366799 
+o|converted assignments to bindings: (eqv?-id624) 
+o|converted assignments to bindings: (op1613) 
+o|substituted constant variable: g597599 
+o|substituted constant variable: g564568 
 o|simplifications: ((let . 8)) 
 o|replaced variables: 42 
 o|removed binding forms: 450 
 o|replaced variables: 24 
-o|removed binding forms: 123 
+o|removed binding forms: 124 
 o|replaced variables: 35 
 o|removed binding forms: 24 
 o|removed binding forms: 35 
@@ -23513,288 +23519,288 @@ o|    ##sys#slot	10
 o|    scheme#null?	8
 o|    scheme#car	34
 o|    scheme#cons	11
-o|contracted procedure: k2128 
-o|contracted procedure: k2139 
-o|contracted procedure: k2295 
-o|contracted procedure: k2307 
-o|contracted procedure: k2325 
-o|contracted procedure: k2333 
-o|contracted procedure: k2981 
-o|contracted procedure: k3068 
-o|contracted procedure: k3016 
-o|contracted procedure: k3023 
-o|contracted procedure: k3027 
-o|contracted procedure: k3034 
-o|inlining procedure: k3041 
-o|inlining procedure: k3041 
-o|contracted procedure: k3052 
-o|contracted procedure: k3060 
-o|contracted procedure: k3056 
-o|contracted procedure: k3227 
-o|contracted procedure: k3084 
+o|contracted procedure: k2130 
+o|contracted procedure: k2141 
+o|contracted procedure: k2297 
+o|contracted procedure: k2309 
+o|contracted procedure: k2327 
+o|contracted procedure: k2335 
+o|contracted procedure: k2984 
+o|contracted procedure: k3071 
+o|contracted procedure: k3019 
+o|contracted procedure: k3026 
+o|contracted procedure: k3030 
+o|contracted procedure: k3037 
+o|inlining procedure: k3044 
+o|inlining procedure: k3044 
+o|contracted procedure: k3055 
+o|contracted procedure: k3063 
+o|contracted procedure: k3059 
+o|contracted procedure: k3230 
 o|contracted procedure: k3087 
 o|contracted procedure: k3090 
-o|contracted procedure: k3112 
-o|contracted procedure: k3116 
-o|contracted procedure: k3126 
+o|contracted procedure: k3093 
+o|contracted procedure: k3115 
+o|contracted procedure: k3119 
 o|contracted procedure: k3129 
-o|contracted procedure: k3142 
-o|contracted procedure: k3153 
+o|contracted procedure: k3132 
+o|contracted procedure: k3145 
 o|contracted procedure: k3156 
-o|contracted procedure: k3169 
-o|contracted procedure: k3180 
-o|contracted procedure: k3186 
-o|contracted procedure: k3192 
-o|contracted procedure: k3199 
-o|contracted procedure: k3203 
-o|contracted procedure: k3246 
-o|contracted procedure: k3256 
-o|contracted procedure: k3263 
-o|contracted procedure: k3271 
-o|contracted procedure: k3279 
-o|contracted procedure: k3283 
+o|contracted procedure: k3159 
+o|contracted procedure: k3172 
+o|contracted procedure: k3183 
+o|contracted procedure: k3189 
+o|contracted procedure: k3195 
+o|contracted procedure: k3202 
+o|contracted procedure: k3206 
+o|contracted procedure: k3249 
+o|contracted procedure: k3259 
+o|contracted procedure: k3266 
+o|contracted procedure: k3274 
+o|contracted procedure: k3282 
 o|contracted procedure: k3286 
 o|contracted procedure: k3289 
-o|contracted procedure: k3301 
+o|contracted procedure: k3292 
 o|contracted procedure: k3304 
 o|contracted procedure: k3307 
-o|contracted procedure: k3315 
-o|contracted procedure: k3323 
-o|contracted procedure: k3347 
-o|contracted procedure: k3358 
-o|contracted procedure: k3406 
-o|contracted procedure: k3364 
+o|contracted procedure: k3310 
+o|contracted procedure: k3318 
+o|contracted procedure: k3326 
+o|contracted procedure: k3350 
+o|contracted procedure: k3361 
+o|contracted procedure: k3409 
 o|contracted procedure: k3367 
-o|contracted procedure: k3385 
-o|contracted procedure: k3397 
-o|contracted procedure: k3389 
-o|contracted procedure: k2474 
-o|contracted procedure: k2464 
-o|contracted procedure: k3486 
-o|contracted procedure: k3435 
-o|contracted procedure: k3444 
-o|contracted procedure: k3451 
-o|contracted procedure: k3455 
-o|contracted procedure: k3462 
-o|contracted procedure: k3469 
-o|contracted procedure: k3479 
-o|contracted procedure: k3528 
-o|contracted procedure: k3513 
-o|contracted procedure: k3520 
-o|contracted procedure: k3524 
-o|contracted procedure: k3699 
-o|contracted procedure: k3544 
+o|contracted procedure: k3370 
+o|contracted procedure: k3388 
+o|contracted procedure: k3400 
+o|contracted procedure: k3392 
+o|contracted procedure: k2476 
+o|contracted procedure: k2466 
+o|contracted procedure: k3489 
+o|contracted procedure: k3438 
+o|contracted procedure: k3447 
+o|contracted procedure: k3454 
+o|contracted procedure: k3458 
+o|contracted procedure: k3465 
+o|contracted procedure: k3472 
+o|contracted procedure: k3482 
+o|contracted procedure: k3531 
+o|contracted procedure: k3516 
+o|contracted procedure: k3523 
+o|contracted procedure: k3527 
+o|contracted procedure: k3702 
 o|contracted procedure: k3547 
 o|contracted procedure: k3550 
-o|contracted procedure: k3556 
-o|contracted procedure: k3562 
+o|contracted procedure: k3553 
+o|contracted procedure: k3559 
 o|contracted procedure: k3565 
-o|contracted procedure: k3580 
+o|contracted procedure: k3568 
 o|contracted procedure: k3583 
-o|contracted procedure: k3589 
-o|contracted procedure: k3595 
-o|contracted procedure: k3611 
-o|contracted procedure: k3615 
-o|contracted procedure: k3627 
-o|contracted procedure: k3631 
-o|contracted procedure: k3667 
-o|contracted procedure: k3639 
-o|contracted procedure: k3643 
-o|contracted procedure: k3651 
-o|contracted procedure: k3655 
-o|contracted procedure: k4449 
-o|contracted procedure: k4571 
-o|contracted procedure: k4455 
-o|contracted procedure: k4533 
+o|contracted procedure: k3586 
+o|contracted procedure: k3592 
+o|contracted procedure: k3598 
+o|contracted procedure: k3614 
+o|contracted procedure: k3618 
+o|contracted procedure: k3630 
+o|contracted procedure: k3634 
+o|contracted procedure: k3670 
+o|contracted procedure: k3642 
+o|contracted procedure: k3646 
+o|contracted procedure: k3654 
+o|contracted procedure: k3658 
+o|contracted procedure: k4452 
+o|contracted procedure: k4574 
 o|contracted procedure: k4458 
-o|contracted procedure: k4528 
-o|contracted procedure: k4464 
-o|contracted procedure: k4471 
-o|contracted procedure: k4475 
-o|contracted procedure: k4495 
-o|contracted procedure: k4506 
+o|contracted procedure: k4536 
+o|contracted procedure: k4461 
+o|contracted procedure: k4531 
+o|contracted procedure: k4467 
+o|contracted procedure: k4474 
+o|contracted procedure: k4478 
+o|contracted procedure: k4498 
 o|contracted procedure: k4509 
-o|contracted procedure: k4516 
+o|contracted procedure: k4512 
+o|contracted procedure: k4519 
+o|contracted procedure: k4553 
+o|contracted procedure: k4560 
 o|contracted procedure: k4550 
-o|contracted procedure: k4557 
-o|contracted procedure: k4547 
-o|contracted procedure: k5151 
-o|contracted procedure: k5157 
+o|contracted procedure: k5154 
 o|contracted procedure: k5160 
-o|contracted procedure: k5166 
-o|contracted procedure: k5172 
-o|contracted procedure: k5178 
-o|contracted procedure: k5194 
-o|contracted procedure: k5198 
-o|contracted procedure: k5206 
-o|contracted procedure: k5210 
-o|contracted procedure: k5218 
-o|contracted procedure: k2706 
-o|contracted procedure: k2721 
-o|contracted procedure: k5233 
-o|contracted procedure: k5376 
-o|contracted procedure: k5264 
+o|contracted procedure: k5163 
+o|contracted procedure: k5169 
+o|contracted procedure: k5175 
+o|contracted procedure: k5181 
+o|contracted procedure: k5197 
+o|contracted procedure: k5201 
+o|contracted procedure: k5209 
+o|contracted procedure: k5213 
+o|contracted procedure: k5221 
+o|contracted procedure: k2708 
+o|contracted procedure: k2723 
+o|contracted procedure: k5236 
+o|contracted procedure: k5379 
 o|contracted procedure: k5267 
-o|contracted procedure: k5273 
-o|contracted procedure: k5282 
-o|contracted procedure: k5288 
-o|contracted procedure: k5300 
+o|contracted procedure: k5270 
+o|contracted procedure: k5276 
+o|contracted procedure: k5285 
+o|contracted procedure: k5291 
 o|contracted procedure: k5303 
-o|contracted procedure: k5309 
-o|contracted procedure: k5315 
-o|contracted procedure: k5321 
-o|contracted procedure: k5328 
-o|contracted procedure: k5332 
-o|contracted procedure: k5363 
-o|contracted procedure: k5471 
-o|contracted procedure: k5440 
-o|contracted procedure: k5447 
-o|contracted procedure: k5451 
-o|contracted procedure: k5466 
-o|contracted procedure: k5459 
-o|contracted procedure: k5511 
-o|contracted procedure: k5480 
-o|contracted procedure: k5487 
-o|contracted procedure: k5491 
-o|contracted procedure: k5506 
-o|contracted procedure: k5499 
-o|contracted procedure: k5576 
-o|contracted procedure: k5520 
+o|contracted procedure: k5306 
+o|contracted procedure: k5312 
+o|contracted procedure: k5318 
+o|contracted procedure: k5324 
+o|contracted procedure: k5331 
+o|contracted procedure: k5335 
+o|contracted procedure: k5366 
+o|contracted procedure: k5474 
+o|contracted procedure: k5443 
+o|contracted procedure: k5450 
+o|contracted procedure: k5454 
+o|contracted procedure: k5469 
+o|contracted procedure: k5462 
+o|contracted procedure: k5514 
+o|contracted procedure: k5483 
+o|contracted procedure: k5490 
+o|contracted procedure: k5494 
+o|contracted procedure: k5509 
+o|contracted procedure: k5502 
+o|contracted procedure: k5579 
 o|contracted procedure: k5523 
-o|contracted procedure: k5529 
+o|contracted procedure: k5526 
 o|contracted procedure: k5532 
-o|contracted procedure: k5541 
-o|contracted procedure: k5551 
-o|contracted procedure: k5555 
-o|contracted procedure: k5563 
-o|contracted procedure: k5698 
-o|contracted procedure: k5585 
+o|contracted procedure: k5535 
+o|contracted procedure: k5544 
+o|contracted procedure: k5554 
+o|contracted procedure: k5558 
+o|contracted procedure: k5566 
+o|contracted procedure: k5701 
 o|contracted procedure: k5588 
-o|contracted procedure: k5595 
-o|contracted procedure: k5603 
-o|inlining procedure: k5599 
-o|inlining procedure: k5599 
-o|contracted procedure: k5615 
-o|contracted procedure: k5625 
+o|contracted procedure: k5591 
+o|contracted procedure: k5598 
+o|contracted procedure: k5606 
+o|inlining procedure: k5602 
+o|inlining procedure: k5602 
+o|contracted procedure: k5618 
 o|contracted procedure: k5628 
-o|contracted procedure: k5634 
-o|contracted procedure: k5658 
-o|contracted procedure: k5654 
-o|contracted procedure: k5675 
-o|contracted procedure: k5671 
+o|contracted procedure: k5631 
+o|contracted procedure: k5637 
+o|contracted procedure: k5661 
+o|contracted procedure: k5657 
 o|contracted procedure: k5678 
-o|contracted procedure: k5754 
-o|contracted procedure: k5707 
-o|contracted procedure: k5714 
-o|contracted procedure: k5718 
-o|contracted procedure: k5726 
-o|contracted procedure: k5735 
-o|contracted procedure: k5742 
-o|contracted procedure: k5764 
-o|contracted procedure: k5831 
-o|contracted procedure: k5770 
-o|contracted procedure: k5777 
-o|contracted procedure: k5781 
+o|contracted procedure: k5674 
+o|contracted procedure: k5681 
+o|contracted procedure: k5757 
+o|contracted procedure: k5710 
+o|contracted procedure: k5717 
+o|contracted procedure: k5721 
+o|contracted procedure: k5729 
+o|contracted procedure: k5738 
+o|contracted procedure: k5745 
+o|contracted procedure: k5767 
+o|contracted procedure: k5834 
+o|contracted procedure: k5773 
+o|contracted procedure: k5780 
 o|contracted procedure: k5784 
-o|contracted procedure: k5802 
-o|contracted procedure: k5798 
-o|contracted procedure: k5812 
-o|contracted procedure: k5819 
-o|contracted procedure: k5841 
-o|contracted procedure: k5949 
-o|contracted procedure: k5850 
-o|contracted procedure: k5857 
-o|contracted procedure: k5861 
-o|contracted procedure: k5872 
-o|contracted procedure: k5911 
-o|contracted procedure: k5878 
-o|contracted procedure: k5885 
-o|contracted procedure: k5889 
-o|contracted procedure: k5903 
-o|contracted procedure: k5907 
-o|contracted procedure: k5931 
-o|contracted procedure: k5935 
-o|contracted procedure: k5956 
-o|contracted procedure: k5965 
-o|contracted procedure: k6073 
-o|contracted procedure: k5974 
-o|contracted procedure: k5981 
-o|contracted procedure: k5985 
-o|contracted procedure: k5996 
-o|contracted procedure: k6035 
-o|contracted procedure: k6002 
-o|contracted procedure: k6009 
-o|contracted procedure: k6013 
-o|contracted procedure: k6027 
-o|contracted procedure: k6031 
-o|contracted procedure: k6055 
-o|contracted procedure: k6059 
-o|contracted procedure: k6080 
-o|contracted procedure: k6092 
-o|contracted procedure: k6099 
-o|contracted procedure: k6103 
-o|contracted procedure: k6198 
-o|contracted procedure: k6113 
-o|contracted procedure: k6120 
-o|contracted procedure: k6128 
-o|contracted procedure: k6124 
-o|contracted procedure: k6134 
-o|contracted procedure: k6141 
-o|contracted procedure: k6145 
-o|contracted procedure: k6165 
-o|contracted procedure: k6176 
+o|contracted procedure: k5787 
+o|contracted procedure: k5805 
+o|contracted procedure: k5801 
+o|contracted procedure: k5815 
+o|contracted procedure: k5822 
+o|contracted procedure: k5844 
+o|contracted procedure: k5952 
+o|contracted procedure: k5853 
+o|contracted procedure: k5860 
+o|contracted procedure: k5864 
+o|contracted procedure: k5875 
+o|contracted procedure: k5914 
+o|contracted procedure: k5881 
+o|contracted procedure: k5888 
+o|contracted procedure: k5892 
+o|contracted procedure: k5906 
+o|contracted procedure: k5910 
+o|contracted procedure: k5934 
+o|contracted procedure: k5938 
+o|contracted procedure: k5959 
+o|contracted procedure: k5968 
+o|contracted procedure: k6076 
+o|contracted procedure: k5977 
+o|contracted procedure: k5984 
+o|contracted procedure: k5988 
+o|contracted procedure: k5999 
+o|contracted procedure: k6038 
+o|contracted procedure: k6005 
+o|contracted procedure: k6012 
+o|contracted procedure: k6016 
+o|contracted procedure: k6030 
+o|contracted procedure: k6034 
+o|contracted procedure: k6058 
+o|contracted procedure: k6062 
+o|contracted procedure: k6083 
+o|contracted procedure: k6095 
+o|contracted procedure: k6102 
+o|contracted procedure: k6106 
+o|contracted procedure: k6201 
+o|contracted procedure: k6116 
+o|contracted procedure: k6123 
+o|contracted procedure: k6131 
+o|contracted procedure: k6127 
+o|contracted procedure: k6137 
+o|contracted procedure: k6144 
+o|contracted procedure: k6148 
+o|contracted procedure: k6168 
 o|contracted procedure: k6179 
-o|contracted procedure: k6186 
+o|contracted procedure: k6182 
+o|contracted procedure: k6189 
+o|contracted procedure: k6214 
+o|contracted procedure: k6221 
 o|contracted procedure: k6211 
-o|contracted procedure: k6218 
-o|contracted procedure: k6208 
-o|contracted procedure: k6388 
-o|contracted procedure: k6235 
+o|contracted procedure: k6391 
 o|contracted procedure: k6238 
 o|contracted procedure: k6241 
-o|contracted procedure: k6260 
-o|contracted procedure: k6264 
-o|contracted procedure: k6281 
-o|contracted procedure: k6285 
-o|contracted procedure: k6295 
+o|contracted procedure: k6244 
+o|contracted procedure: k6263 
+o|contracted procedure: k6267 
+o|contracted procedure: k6284 
+o|contracted procedure: k6288 
 o|contracted procedure: k6298 
-o|contracted procedure: k6318 
+o|contracted procedure: k6301 
 o|contracted procedure: k6321 
-o|contracted procedure: k6341 
-o|contracted procedure: k6347 
-o|contracted procedure: k6353 
-o|contracted procedure: k6360 
-o|contracted procedure: k6364 
-o|contracted procedure: k6406 
-o|contracted procedure: k6416 
-o|contracted procedure: k6420 
-o|contracted procedure: k6429 
+o|contracted procedure: k6324 
+o|contracted procedure: k6344 
+o|contracted procedure: k6350 
+o|contracted procedure: k6356 
+o|contracted procedure: k6363 
+o|contracted procedure: k6367 
+o|contracted procedure: k6409 
+o|contracted procedure: k6419 
+o|contracted procedure: k6423 
 o|contracted procedure: k6432 
 o|contracted procedure: k6435 
-o|contracted procedure: k6443 
-o|contracted procedure: k6451 
+o|contracted procedure: k6438 
+o|contracted procedure: k6446 
+o|contracted procedure: k6454 
 o|simplifications: ((let . 27)) 
 o|removed binding forms: 256 
 o|replaced variables: 32 
 o|removed binding forms: 2 
 o|removed binding forms: 18 
 o|direct leaf routine/allocation: loop327 0 
-o|contracted procedure: k3249 
+o|contracted procedure: k3252 
 o|converted assignments to bindings: (loop327) 
 o|simplifications: ((let . 1)) 
 o|removed binding forms: 1 
-o|customizable procedures: (map-loop551569 for-each-loop589607 op1612 k6271 k6274 rewrite-c..r727 k6158 k5968 k5844 k5791 k5640 loop422 chicken.compiler.c-platform#filter k4488 map-loop693710 chicken.compiler.c-platform#cons* k3102 k3105 foldr254257 g259260 loop204) 
+o|customizable procedures: (map-loop552570 for-each-loop590608 op1613 k6274 k6277 rewrite-c..r728 k6161 k5971 k5847 k5794 k5643 loop422 chicken.compiler.c-platform#filter k4491 map-loop694711 chicken.compiler.c-platform#cons* k3105 k3108 foldr254257 g259260 loop204) 
 o|calls to known targets: 69 
-o|identified direct recursive calls: f_2123 1 
-o|identified direct recursive calls: f_2302 1 
-o|identified direct recursive calls: f_2459 1 
+o|identified direct recursive calls: f_2125 1 
+o|identified direct recursive calls: f_2304 1 
+o|identified direct recursive calls: f_2461 1 
 o|fast box initializations: 6 
 o|fast global references: 6 
 o|fast global assignments: 2 
-o|dropping unused closure argument: f_2117 
-o|dropping unused closure argument: f_2293 
-o|dropping unused closure argument: f_2459 
-o|dropping unused closure argument: f_3009 
-o|dropping unused closure argument: f_3424 
+o|dropping unused closure argument: f_2119 
+o|dropping unused closure argument: f_2295 
+o|dropping unused closure argument: f_2461 
+o|dropping unused closure argument: f_3012 
+o|dropping unused closure argument: f_3427 
 */
 /* end of file */
--- chicken-5.1.0.orig/library.c
+++ chicken-5.1.0/library.c
@@ -1,6 +1,6 @@
 /* Generated from library.scm by the CHICKEN compiler
    http://www.call-cc.org
-   Version 5.1.0rc1 (prerelease) (rev 7358d2e5)
+   Version 5.1.0 (rev 8e62f718)
    linux-unix-gnu-x86-64 [ 64bit dload ptables ]
    command line: library.scm -optimize-level 2 -include-path . -include-path ./ -inline -ignore-repository -feature chicken-bootstrap -no-warnings -specialize -consult-types-file ./types.db -explicit-use -no-trace -output-file library.c -no-module-registration -emit-import-library chicken.bitwise -emit-import-library chicken.blob -emit-import-library chicken.fixnum -emit-import-library chicken.flonum -emit-import-library chicken.gc -emit-import-library chicken.keyword -emit-import-library chicken.platform -emit-import-library chicken.plist -emit-import-library chicken.process-context
    unit: library
@@ -21701,9 +21701,9 @@ C_word t6;
 C_word t7;
 C_word t8;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(8,c,1)))){
+if(C_unlikely(!C_demand(C_calculate_demand(9,c,1)))){
 C_save_and_reclaim((void *)f_15841,2,av);}
-a=C_alloc(8);
+a=C_alloc(9);
 t2=(C_truep(t1)?t1:((C_word*)t0)[2]);
 if(C_truep(t2)){
 t3=C_i_car(t2);
@@ -21814,9 +21814,9 @@ C_word t5;
 C_word t6;
 C_word t7;
 C_word *a;
-if(C_unlikely(!C_demand(C_calculate_demand(8,c,1)))){
+if(C_unlikely(!C_demand(C_calculate_demand(9,c,1)))){
 C_save_and_reclaim((void *)f_15914,2,av);}
-a=C_alloc(8);
+a=C_alloc(9);
 if(C_truep(t1)){
 t2=(
 /* library.scm:2477: go-inexact! */
--- chicken-5.1.0.orig/srfi-4.c
+++ chicken-5.1.0/srfi-4.c
@@ -1,6 +1,6 @@
 /* Generated from srfi-4.scm by the CHICKEN compiler
    http://www.call-cc.org
-   Version 5.1.0rc1 (prerelease) (rev 7358d2e5)
+   Version 5.1.0 (rev 8e62f718)
    linux-unix-gnu-x86-64 [ 64bit dload ptables ]
    command line: srfi-4.scm -optimize-level 2 -include-path . -include-path ./ -inline -ignore-repository -feature chicken-bootstrap -no-warnings -specialize -consult-types-file ./types.db -explicit-use -no-trace -output-file srfi-4.c -emit-import-library srfi-4
    unit: srfi-4
@@ -8830,9 +8830,9 @@ C_word t3=av[3];
 C_word t4;
 C_word *a;
 if(c!=4) C_bad_argc_2(c,4,t0);
-if(C_unlikely(!C_demand(C_calculate_demand(4,c,1)))){
+if(C_unlikely(!C_demand(C_calculate_demand(5,c,1)))){
 C_save_and_reclaim((void *)f_4460,4,av);}
-a=C_alloc(4);
+a=C_alloc(5);
 t4=t1;{
 C_word *av2=av;
 av2[0]=t4;
@@ -8849,9 +8849,9 @@ C_word t3=av[3];
 C_word t4;
 C_word *a;
 if(c!=4) C_bad_argc_2(c,4,t0);
-if(C_unlikely(!C_demand(C_calculate_demand(4,c,1)))){
+if(C_unlikely(!C_demand(C_calculate_demand(5,c,1)))){
 C_save_and_reclaim((void *)f_4463,4,av);}
-a=C_alloc(4);
+a=C_alloc(5);
 t4=t1;{
 C_word *av2=av;
 av2[0]=t4;
